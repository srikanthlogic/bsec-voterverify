package kotlinx.coroutines.channels;

import androidx.exifinterface.media.ExifInterface;
import com.google.android.gms.measurement.api.AppMeasurementSdk;
import com.google.firebase.analytics.FirebaseAnalytics;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.ExceptionsKt;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.Result;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.IndexedValue;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.CoroutineContext;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.Boxing;
import kotlin.coroutines.jvm.internal.ContinuationImpl;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.InlineMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlinx.coroutines.Dispatchers;
import kotlinx.coroutines.GlobalScope;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.io.FilenameUtils;
/* compiled from: Channels.common.kt */
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000Ð\u0001\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0006\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010 \n\u0000\n\u0002\u0010!\n\u0002\b\u0011\n\u0002\u0010\u000f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u000f\n\u0002\u0010\u0006\n\u0002\b\t\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0006\u001aJ\u0010\u0002\u001a#\u0012\u0015\u0012\u0013\u0018\u00010\u0004¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(\u0007\u0012\u0004\u0012\u00020\b0\u0003j\u0002`\t2\u001a\u0010\n\u001a\u000e\u0012\n\b\u0001\u0012\u0006\u0012\u0002\b\u00030\f0\u000b\"\u0006\u0012\u0002\b\u00030\fH\u0007¢\u0006\u0002\u0010\r\u001a5\u0010\u000e\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010\u0013\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010\u0013\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aY\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001e\u0010\u0019\u001a\u001a\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aG\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00100\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aa\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u001e\u001a]\u0010\u001f\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0018\b\u0002\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00100!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001aw\u0010\u001f\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u0018\b\u0003\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010$\u001ao\u0010%\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u0018\b\u0003\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u001e\u0010\u0019\u001a\u001a\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001aC\u0010&\u001a\u0002H'\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100(2\u001d\u0010)\u001a\u0019\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100\f\u0012\u0004\u0012\u0002H'0\u0003¢\u0006\u0002\b*H\u0087\b¢\u0006\u0002\u0010+\u001aC\u0010&\u001a\u0002H'\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001d\u0010)\u001a\u0019\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100\f\u0012\u0004\u0012\u0002H'0\u0003¢\u0006\u0002\b*H\u0087\b¢\u0006\u0002\u0010,\u001a5\u0010-\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100(2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\b0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010/\u001a5\u0010-\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\b0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a;\u00100\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0018\u0010.\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u001001\u0012\u0004\u0012\u00020\b0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a1\u00102\u001a#\u0012\u0015\u0012\u0013\u0018\u00010\u0004¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(\u0007\u0012\u0004\u0012\u00020\b0\u0003j\u0002`\t*\u0006\u0012\u0002\b\u00030\fH\u0007\u001a!\u00103\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u00103\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a\u001e\u00105\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0007\u001aZ\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u00109\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00170;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001a0\u0010>\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010?\u001a\u0002042\b\b\u0002\u00107\u001a\u000208H\u0007\u001aT\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001a)\u0010A\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010B\u001a\u000204H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010C\u001a=\u0010D\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010B\u001a\u0002042\u0012\u0010E\u001a\u000e\u0012\u0004\u0012\u000204\u0012\u0004\u0012\u0002H\u00100\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010F\u001a+\u0010G\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010B\u001a\u000204H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010C\u001aT\u0010H\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001ai\u0010I\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u00020827\u0010\u0011\u001a3\b\u0001\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0;\u0012\u0006\u0012\u0004\u0018\u00010<0JH\u0007ø\u0001\u0000¢\u0006\u0002\u0010K\u001ad\u0010L\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2'\u0010\u0011\u001a#\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010O\u001ab\u0010L\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010M*\b\u0012\u0004\u0012\u0002H\u00100P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2'\u0010\u0011\u001a#\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Q\u001aT\u0010R\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001a$\u0010S\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\b\b\u0000\u0010\u0010*\u00020<*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\fH\u0007\u001aA\u0010T\u001a\u0002HM\"\b\b\u0000\u0010\u0010*\u00020<\"\u0010\b\u0001\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100N*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\f2\u0006\u0010\"\u001a\u0002HMH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010U\u001a?\u0010T\u001a\u0002HM\"\b\b\u0000\u0010\u0010*\u00020<\"\u000e\b\u0001\u0010M*\b\u0012\u0004\u0012\u0002H\u00100P*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\f2\u0006\u0010\"\u001a\u0002HMH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010V\u001aO\u0010W\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010X\u001aM\u0010W\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010M*\b\u0012\u0004\u0012\u0002H\u00100P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aO\u0010Z\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010X\u001aM\u0010Z\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010M*\b\u0012\u0004\u0012\u0002H\u00100P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001a7\u0010[\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a7\u0010\\\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010]\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010]\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a#\u0010^\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a7\u0010^\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a`\u0010_\u001a\b\u0012\u0004\u0012\u0002H'0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082(\u0010\u0019\u001a$\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H'0\f0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001aX\u0010`\u001a\u0002H'\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010a\u001a\u0002H'2'\u0010b\u001a#\u0012\u0013\u0012\u0011H'¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(c\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010d\u001am\u0010e\u001a\u0002H'\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010a\u001a\u0002H'2<\u0010b\u001a8\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0013\u0012\u0011H'¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(c\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0JH\u0087Hø\u0001\u0000¢\u0006\u0002\u0010f\u001aM\u0010g\u001a\u0014\u0012\u0004\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100h0\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001ag\u0010g\u001a\u0014\u0012\u0004\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00180h0\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u001e\u001aa\u0010i\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u001c\b\u0002\u0010 *\u0016\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100j0!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001a{\u0010i\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u001c\b\u0003\u0010 *\u0016\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00180j0!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010$\u001a)\u0010k\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010l\u001a\u0002H\u0010H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010m\u001a5\u0010n\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a5\u0010o\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010p\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010p\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a)\u0010q\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010l\u001a\u0002H\u0010H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010m\u001a#\u0010r\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a7\u0010r\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aX\u0010s\u001a\b\u0012\u0004\u0012\u0002H'0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u0010\u0019\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H'0;\u0012\u0006\u0012\u0004\u0018\u00010<0:ø\u0001\u0000¢\u0006\u0002\u0010=\u001ao\u0010t\u001a\b\u0012\u0004\u0012\u0002H'0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u00020827\u0010\u0019\u001a3\b\u0001\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H'0;\u0012\u0006\u0012\u0004\u0018\u00010<0JH\u0007ø\u0001\u0000¢\u0006\u0002\u0010K\u001au\u0010u\u001a\b\u0012\u0004\u0012\u0002H'0\f\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u00020829\u0010\u0019\u001a5\b\u0001\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u0001H'0;\u0012\u0006\u0012\u0004\u0018\u00010<0JH\u0007ø\u0001\u0000¢\u0006\u0002\u0010K\u001ap\u0010v\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<\"\u0010\b\u0002\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H'0N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2)\u0010\u0019\u001a%\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H'0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010O\u001an\u0010v\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<\"\u000e\b\u0002\u0010M*\b\u0012\u0004\u0012\u0002H'0P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2)\u0010\u0019\u001a%\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H'0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Q\u001aj\u0010w\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'\"\u0010\b\u0002\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H'0N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2'\u0010\u0019\u001a#\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010O\u001ah\u0010w\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'\"\u000e\b\u0002\u0010M*\b\u0012\u0004\u0012\u0002H'0P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2'\u0010\u0019\u001a#\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0:H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Q\u001a`\u0010x\u001a\b\u0012\u0004\u0012\u0002H'0\f\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082$\u0010\u0019\u001a \b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u0001H'0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001a[\u0010y\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<\"\u0010\b\u0002\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H'0N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0014\u0010\u0019\u001a\u0010\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010X\u001aY\u0010y\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010'*\u00020<\"\u000e\b\u0002\u0010M*\b\u0012\u0004\u0012\u0002H'0P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0014\u0010\u0019\u001a\u0010\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aU\u0010z\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'\"\u0010\b\u0002\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H'0N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010X\u001aS\u0010z\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'\"\u000e\b\u0002\u0010M*\b\u0012\u0004\u0012\u0002H'0P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HM2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aG\u0010{\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H'0|*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aA\u0010}\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001b\u0010~\u001a\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00100\u007fj\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0010`\u0080\u0001H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u0081\u0001\u001aH\u0010\u0082\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H'0|*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aB\u0010\u0083\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001b\u0010~\u001a\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00100\u007fj\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0010`\u0080\u0001H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u0081\u0001\u001a\"\u0010\u0084\u0001\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a6\u0010\u0084\u0001\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aN\u0010\u0085\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100h\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100h0\u001a\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a[\u0010\u0086\u0001\u001a\u0003H\u0087\u0001\"\u0005\b\u0000\u0010\u0087\u0001\"\t\b\u0001\u0010\u0010*\u0003H\u0087\u0001*\b\u0012\u0004\u0012\u0002H\u00100\f2)\u0010b\u001a%\u0012\u0014\u0012\u0012H\u0087\u0001¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(c\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u0003H\u0087\u00010:H\u0087Hø\u0001\u0000¢\u0006\u0003\u0010\u0088\u0001\u001ap\u0010\u0089\u0001\u001a\u0003H\u0087\u0001\"\u0005\b\u0000\u0010\u0087\u0001\"\t\b\u0001\u0010\u0010*\u0003H\u0087\u0001*\b\u0012\u0004\u0012\u0002H\u00100\f2>\u0010b\u001a:\u0012\u0013\u0012\u001104¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(B\u0012\u0014\u0012\u0012H\u0087\u0001¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(c\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u0003H\u0087\u00010JH\u0087Hø\u0001\u0000¢\u0006\u0003\u0010\u008a\u0001\u001a%\u0010\u008b\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\b\b\u0000\u0010\u0010*\u00020<*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\fH\u0007\u001a\"\u0010\u008c\u0001\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a6\u0010\u008c\u0001\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a$\u0010\u008d\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a8\u0010\u008d\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a6\u0010\u008e\u0001\u001a\u000204\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002040\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a8\u0010\u008f\u0001\u001a\u00030\u0090\u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0013\u00109\u001a\u000f\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u00030\u0090\u00010\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a1\u0010\u0091\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010?\u001a\u0002042\b\b\u0002\u00107\u001a\u000208H\u0007\u001aU\u0010\u0092\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u0002082\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0;\u0012\u0006\u0012\u0004\u0018\u00010<0:H\u0007ø\u0001\u0000¢\u0006\u0002\u0010=\u001a:\u0010\u0093\u0001\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010M*\b\u0012\u0004\u0012\u0002H\u00100P*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HMH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010V\u001a<\u0010\u0094\u0001\u001a\u0002HM\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010M*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100N*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HMH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010U\u001a(\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100h\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a@\u0010\u0096\u0001\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0017\"\u0004\b\u0001\u0010\u0018*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001aW\u0010\u0096\u0001\u001a\u0002H \"\u0004\b\u0000\u0010\u0017\"\u0004\b\u0001\u0010\u0018\"\u0018\b\u0002\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\f2\u0006\u0010\"\u001a\u0002H H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u0097\u0001\u001a(\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100j\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a)\u0010\u0099\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00100\u009a\u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a)\u0010\u009b\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00100\u009c\u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a/\u0010\u009d\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u0010010\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00107\u001a\u000208H\u0007\u001aA\u0010\u009e\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H'0\u001a0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'*\b\u0012\u0004\u0012\u0002H\u00100\f2\r\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H'0\fH\u0087\u0004\u001a~\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00180\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010'\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\r\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H'0\f2\b\b\u0002\u00107\u001a\u00020828\u0010\u0019\u001a4\u0012\u0014\u0012\u0012H\u0010¢\u0006\r\b\u0005\u0012\t\b\u0006\u0012\u0005\b\b( \u0001\u0012\u0014\u0012\u0012H'¢\u0006\r\b\u0005\u0012\t\b\u0006\u0012\u0005\b\b(¡\u0001\u0012\u0004\u0012\u0002H\u00180:H\u0007\"\u000e\u0010\u0000\u001a\u00020\u0001X\u0080T¢\u0006\u0002\n\u0000\u0082\u0002\u0004\n\u0002\b\u0019¨\u0006¢\u0001"}, d2 = {"DEFAULT_CLOSE_MESSAGE", "", "consumesAll", "Lkotlin/Function1;", "", "Lkotlin/ParameterName;", AppMeasurementSdk.ConditionalUserProperty.NAME, "cause", "", "Lkotlinx/coroutines/CompletionHandler;", "channels", "", "Lkotlinx/coroutines/channels/ReceiveChannel;", "([Lkotlinx/coroutines/channels/ReceiveChannel;)Lkotlin/jvm/functions/Function1;", "all", "", ExifInterface.LONGITUDE_EAST, "predicate", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", Languages.ANY, "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associate", "", "K", ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associateByTo", "M", "", FirebaseAnalytics.Param.DESTINATION, "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associateTo", "consume", "R", "Lkotlinx/coroutines/channels/BroadcastChannel;", "block", "Lkotlin/ExtensionFunctionType;", "(Lkotlinx/coroutines/channels/BroadcastChannel;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "consumeEach", "action", "(Lkotlinx/coroutines/channels/BroadcastChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "consumeEachIndexed", "Lkotlin/collections/IndexedValue;", "consumes", "count", "", "distinct", "distinctBy", "context", "Lkotlin/coroutines/CoroutineContext;", "selector", "Lkotlin/Function2;", "Lkotlin/coroutines/Continuation;", "", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;", "drop", "n", "dropWhile", "elementAt", FirebaseAnalytics.Param.INDEX, "(Lkotlinx/coroutines/channels/ReceiveChannel;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlinx/coroutines/channels/ReceiveChannel;ILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function3;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/channels/ReceiveChannel;", "filterIndexedTo", "C", "", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "Lkotlinx/coroutines/channels/SendChannel;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterNot", "filterNotNull", "filterNotNullTo", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterNotTo", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterTo", "find", "findLast", "first", "firstOrNull", "flatMap", "fold", "initial", "operation", "acc", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "foldIndexed", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "groupBy", "", "groupByTo", "", "indexOf", "element", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "indexOfFirst", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "maxBy", "", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Comparator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "minBy", "minWith", "none", "partition", "reduce", ExifInterface.LATITUDE_SOUTH, "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sumBy", "sumByDouble", "", "take", "takeWhile", "toChannel", "toCollection", "toList", "toMap", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "toMutableList", "toMutableSet", "", "toSet", "", "withIndex", "zip", "other", "a", "b", "kotlinx-coroutines-core"}, k = 5, mv = {1, 1, 13}, xs = "kotlinx/coroutines/channels/ChannelsKt")
/* loaded from: classes3.dex */
public final /* synthetic */ class ChannelsKt__Channels_commonKt {
    public static final <E, R> R consume(BroadcastChannel<E> broadcastChannel, Function1<? super ReceiveChannel<? extends E>, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(broadcastChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(function1, "block");
        ReceiveChannel channel = broadcastChannel.openSubscription();
        try {
            return (R) function1.invoke(channel);
        } finally {
            InlineMarker.finallyStart(1);
            channel.cancel();
            InlineMarker.finallyEnd(1);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0027  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0092  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00ba A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00bb  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00c7 A[Catch: all -> 0x008f, TRY_LEAVE, TryCatch #2 {all -> 0x008f, blocks: (B:14:0x004d, B:17:0x0057, B:18:0x005b, B:22:0x0085, B:25:0x008a, B:32:0x00a6, B:36:0x00bf, B:38:0x00c7, B:45:0x00e6), top: B:58:0x0025 }] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00e6 A[Catch: all -> 0x008f, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x008f, blocks: (B:14:0x004d, B:17:0x0057, B:18:0x005b, B:22:0x0085, B:25:0x008a, B:32:0x00a6, B:36:0x00bf, B:38:0x00c7, B:45:0x00e6), top: B:58:0x0025 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object consumeEach(BroadcastChannel<E> broadcastChannel, Function1<? super E, Unit> function1, Continuation<? super Unit> continuation) {
        ChannelsKt__Channels_commonKt$consumeEach$1 channelsKt__Channels_commonKt$consumeEach$1;
        int i;
        ReceiveChannel channel$iv;
        Throwable th;
        ChannelIterator channelIterator;
        int $i$f$consume;
        int $i$a$2$consume;
        BroadcastChannel $receiver$iv;
        ReceiveChannel $receiver;
        ChannelIterator<E> channelIterator2;
        int element;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$consumeEach$1) {
                channelsKt__Channels_commonKt$consumeEach$1 = (ChannelsKt__Channels_commonKt$consumeEach$1) continuation;
                if ((channelsKt__Channels_commonKt$consumeEach$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$consumeEach$1.label -= Integer.MIN_VALUE;
                    Object element2 = channelsKt__Channels_commonKt$consumeEach$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$consumeEach$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$2$consume = 0;
                            $i$f$consume = 0;
                            ChannelIterator channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$consumeEach$1.L$5;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$1.L$4;
                            channel$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$1.L$3;
                            $receiver$iv = (BroadcastChannel) channelsKt__Channels_commonKt$consumeEach$1.L$2;
                            function1 = (Function1) channelsKt__Channels_commonKt$consumeEach$1.L$1;
                            broadcastChannel = (BroadcastChannel) channelsKt__Channels_commonKt$consumeEach$1.L$0;
                            if (element2 instanceof Result.Failure) {
                                throw ((Result.Failure) element2).exception;
                            }
                            channelIterator = channelIterator3;
                            if (!((Boolean) element2).booleanValue()) {
                            }
                        } else if (i == 2) {
                            $i$a$2$consume = 0;
                            $i$f$consume = 0;
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$consumeEach$1.L$5;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$1.L$4;
                            channel$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$1.L$3;
                            $receiver$iv = (BroadcastChannel) channelsKt__Channels_commonKt$consumeEach$1.L$2;
                            function1 = (Function1) channelsKt__Channels_commonKt$consumeEach$1.L$1;
                            broadcastChannel = (BroadcastChannel) channelsKt__Channels_commonKt$consumeEach$1.L$0;
                            ChannelIterator<E> channelIterator5 = channelIterator4;
                            if (element2 instanceof Result.Failure) {
                                throw ((Result.Failure) element2).exception;
                            }
                            channelIterator2 = channelIterator5;
                            try {
                                function1.invoke(element2);
                                element = $i$a$2$consume;
                                $i$f$consume = $i$f$consume;
                                channelsKt__Channels_commonKt$consumeEach$1.L$0 = broadcastChannel;
                                channelsKt__Channels_commonKt$consumeEach$1.L$1 = function1;
                                channelsKt__Channels_commonKt$consumeEach$1.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$consumeEach$1.L$3 = channel$iv;
                                channelsKt__Channels_commonKt$consumeEach$1.L$4 = $receiver;
                                channelsKt__Channels_commonKt$consumeEach$1.L$5 = channelIterator2;
                                channelsKt__Channels_commonKt$consumeEach$1.label = 1;
                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$1);
                                if (hasNext == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                $i$a$2$consume = element;
                                element2 = hasNext;
                                channelIterator = channelIterator2;
                                if (!((Boolean) element2).booleanValue()) {
                                    channelsKt__Channels_commonKt$consumeEach$1.L$0 = broadcastChannel;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$1 = function1;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$3 = channel$iv;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$4 = $receiver;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$5 = channelIterator;
                                    channelsKt__Channels_commonKt$consumeEach$1.label = 2;
                                    element2 = channelIterator.next(channelsKt__Channels_commonKt$consumeEach$1);
                                    channelIterator5 = channelIterator;
                                    if (element2 == coroutine_suspended) {
                                        return coroutine_suspended;
                                    }
                                    channelIterator2 = channelIterator5;
                                    function1.invoke(element2);
                                    element = $i$a$2$consume;
                                    $i$f$consume = $i$f$consume;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$0 = broadcastChannel;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$1 = function1;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$3 = channel$iv;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$4 = $receiver;
                                    channelsKt__Channels_commonKt$consumeEach$1.L$5 = channelIterator2;
                                    channelsKt__Channels_commonKt$consumeEach$1.label = 1;
                                    hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$1);
                                    if (hasNext == coroutine_suspended) {
                                    }
                                } else {
                                    Unit unit = Unit.INSTANCE;
                                    InlineMarker.finallyStart(1);
                                    channel$iv.cancel();
                                    InlineMarker.finallyEnd(1);
                                    return unit;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                InlineMarker.finallyStart(1);
                                channel$iv.cancel();
                                InlineMarker.finallyEnd(1);
                                throw th;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(element2 instanceof Result.Failure)) {
                        $receiver$iv = broadcastChannel;
                        $i$f$consume = 0;
                        channel$iv = $receiver$iv.openSubscription();
                        $receiver = channel$iv;
                        try {
                            channelIterator2 = $receiver.iterator();
                            element = 0;
                            channelsKt__Channels_commonKt$consumeEach$1.L$0 = broadcastChannel;
                            channelsKt__Channels_commonKt$consumeEach$1.L$1 = function1;
                            channelsKt__Channels_commonKt$consumeEach$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$consumeEach$1.L$3 = channel$iv;
                            channelsKt__Channels_commonKt$consumeEach$1.L$4 = $receiver;
                            channelsKt__Channels_commonKt$consumeEach$1.L$5 = channelIterator2;
                            channelsKt__Channels_commonKt$consumeEach$1.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$1);
                            if (hasNext == coroutine_suspended) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            InlineMarker.finallyStart(1);
                            channel$iv.cancel();
                            InlineMarker.finallyEnd(1);
                            throw th;
                        }
                    } else {
                        throw ((Result.Failure) element2).exception;
                    }
                }
            }
            if (i == 0) {
            }
        } catch (Throwable th4) {
            th = th4;
        }
        channelsKt__Channels_commonKt$consumeEach$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$consumeEach$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                this.result = obj;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.consumeEach((BroadcastChannel) null, (Function1) null, this);
            }
        };
        Object element22 = channelsKt__Channels_commonKt$consumeEach$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$consumeEach$1.label;
    }

    private static final Object consumeEach$$forInline(BroadcastChannel $receiver, Function1 action, Continuation continuation) {
        ReceiveChannel channel$iv = $receiver.openSubscription();
        try {
            ChannelIterator it = channel$iv.iterator();
            while (true) {
                InlineMarker.mark(0);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (!((Boolean) hasNext).booleanValue()) {
                    return Unit.INSTANCE;
                }
                InlineMarker.mark(0);
                Object element = it.next(continuation);
                InlineMarker.mark(1);
                action.invoke(element);
            }
        } finally {
            InlineMarker.finallyStart(1);
            channel$iv.cancel();
            InlineMarker.finallyEnd(1);
        }
    }

    public static final Function1<Throwable, Unit> consumes(ReceiveChannel<?> receiveChannel) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        return new Function1<Throwable, Unit>() { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$consumes$1
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(Throwable th) {
                invoke2(th);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke  reason: avoid collision after fix types in other method */
            public final void invoke2(Throwable cause) {
                ReceiveChannel.this.cancel(cause);
            }
        };
    }

    public static final Function1<Throwable, Unit> consumesAll(ReceiveChannel<?>... receiveChannelArr) {
        Intrinsics.checkParameterIsNotNull(receiveChannelArr, "channels");
        return new Function1<Throwable, Unit>(receiveChannelArr) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$consumesAll$1
            final /* synthetic */ ReceiveChannel[] $channels;

            /* JADX INFO: Access modifiers changed from: package-private */
            {
                this.$channels = r1;
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(Throwable th) {
                invoke2(th);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke  reason: avoid collision after fix types in other method */
            public final void invoke2(Throwable cause) {
                Throwable exception = null;
                for (ReceiveChannel channel : this.$channels) {
                    try {
                        channel.cancel(cause);
                    } catch (Throwable e) {
                        if (exception == null) {
                            exception = e;
                        } else {
                            ExceptionsKt.addSuppressed(exception, e);
                        }
                    }
                }
                if (exception != null) {
                    throw exception;
                }
            }
        };
    }

    public static final <E, R> R consume(ReceiveChannel<? extends E> receiveChannel, Function1<? super ReceiveChannel<? extends E>, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(function1, "block");
        Throwable cause = null;
        try {
            return (R) function1.invoke(receiveChannel);
        } finally {
            try {
                throw e;
            } finally {
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0028  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0092  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00bb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00c9 A[Catch: all -> 0x008f, TRY_LEAVE, TryCatch #3 {all -> 0x008f, blocks: (B:13:0x004d, B:16:0x0057, B:17:0x005b, B:21:0x0085, B:24:0x008a, B:31:0x00a7, B:35:0x00c1, B:37:0x00c9, B:44:0x00e9), top: B:62:0x0026 }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00e9 A[Catch: all -> 0x008f, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x008f, blocks: (B:13:0x004d, B:16:0x0057, B:17:0x005b, B:21:0x0085, B:24:0x008a, B:31:0x00a7, B:35:0x00c1, B:37:0x00c9, B:44:0x00e9), top: B:62:0x0026 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object consumeEach(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Unit> function1, Continuation<? super Unit> continuation) {
        ChannelsKt__Channels_commonKt$consumeEach$3 channelsKt__Channels_commonKt$consumeEach$3;
        int i;
        Throwable e$iv;
        ChannelIterator channelIterator;
        int $i$f$consume;
        Throwable cause$iv;
        int $i$a$4$consume;
        ReceiveChannel $receiver;
        ChannelIterator<? extends E> channelIterator2;
        int $receiver2;
        ReceiveChannel e;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$consumeEach$3) {
                channelsKt__Channels_commonKt$consumeEach$3 = (ChannelsKt__Channels_commonKt$consumeEach$3) continuation;
                if ((channelsKt__Channels_commonKt$consumeEach$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$consumeEach$3.label -= Integer.MIN_VALUE;
                    Object e2 = channelsKt__Channels_commonKt$consumeEach$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$consumeEach$3.label;
                    ReceiveChannel $receiver$iv = null;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = 0;
                            $i$f$consume = 0;
                            ChannelIterator channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$consumeEach$3.L$5;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$4;
                            cause$iv = (Throwable) channelsKt__Channels_commonKt$consumeEach$3.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$2;
                            function1 = (Function1) channelsKt__Channels_commonKt$consumeEach$3.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$0;
                            if (e2 instanceof Result.Failure) {
                                throw ((Result.Failure) e2).exception;
                            }
                            channelIterator = channelIterator3;
                            if (((Boolean) e2).booleanValue()) {
                            }
                        } else if (i == 2) {
                            $i$a$4$consume = 0;
                            $i$f$consume = 0;
                            ChannelIterator<? extends E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$consumeEach$3.L$5;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$4;
                            cause$iv = (Throwable) channelsKt__Channels_commonKt$consumeEach$3.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$2;
                            function1 = (Function1) channelsKt__Channels_commonKt$consumeEach$3.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEach$3.L$0;
                            ChannelIterator<? extends E> channelIterator5 = channelIterator4;
                            if (e2 instanceof Result.Failure) {
                                throw ((Result.Failure) e2).exception;
                            }
                            channelIterator2 = channelIterator5;
                            try {
                                function1.invoke(e2);
                                e = $receiver;
                                $receiver2 = $i$a$4$consume;
                                $i$f$consume = $i$f$consume;
                                channelsKt__Channels_commonKt$consumeEach$3.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$consumeEach$3.L$1 = function1;
                                channelsKt__Channels_commonKt$consumeEach$3.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$3 = cause$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$4 = e;
                                channelsKt__Channels_commonKt$consumeEach$3.L$5 = channelIterator2;
                                channelsKt__Channels_commonKt$consumeEach$3.label = 1;
                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$3);
                                if (hasNext == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                $receiver = e;
                                e2 = hasNext;
                                channelIterator = channelIterator2;
                                $i$a$4$consume = $receiver2;
                                if (((Boolean) e2).booleanValue()) {
                                    return Unit.INSTANCE;
                                }
                                channelsKt__Channels_commonKt$consumeEach$3.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$consumeEach$3.L$1 = function1;
                                channelsKt__Channels_commonKt$consumeEach$3.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$3 = cause$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$4 = $receiver;
                                channelsKt__Channels_commonKt$consumeEach$3.L$5 = channelIterator;
                                channelsKt__Channels_commonKt$consumeEach$3.label = 2;
                                e2 = channelIterator.next(channelsKt__Channels_commonKt$consumeEach$3);
                                channelIterator5 = channelIterator;
                                if (e2 == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                channelIterator2 = channelIterator5;
                                function1.invoke(e2);
                                e = $receiver;
                                $receiver2 = $i$a$4$consume;
                                $i$f$consume = $i$f$consume;
                                channelsKt__Channels_commonKt$consumeEach$3.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$consumeEach$3.L$1 = function1;
                                channelsKt__Channels_commonKt$consumeEach$3.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$3 = cause$iv;
                                channelsKt__Channels_commonKt$consumeEach$3.L$4 = e;
                                channelsKt__Channels_commonKt$consumeEach$3.L$5 = channelIterator2;
                                channelsKt__Channels_commonKt$consumeEach$3.label = 1;
                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$3);
                                if (hasNext == coroutine_suspended) {
                                }
                            } catch (Throwable th) {
                                e$iv = th;
                                try {
                                    throw e$iv;
                                } finally {
                                    InlineMarker.finallyStart(1);
                                    $receiver$iv.cancel(e$iv);
                                    InlineMarker.finallyEnd(1);
                                }
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e2 instanceof Result.Failure)) {
                        $i$f$consume = 0;
                        cause$iv = null;
                        try {
                            channelIterator2 = receiveChannel.iterator();
                            e = receiveChannel;
                            $receiver$iv = receiveChannel;
                            $receiver2 = 0;
                            channelsKt__Channels_commonKt$consumeEach$3.L$0 = receiveChannel;
                            channelsKt__Channels_commonKt$consumeEach$3.L$1 = function1;
                            channelsKt__Channels_commonKt$consumeEach$3.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$consumeEach$3.L$3 = cause$iv;
                            channelsKt__Channels_commonKt$consumeEach$3.L$4 = e;
                            channelsKt__Channels_commonKt$consumeEach$3.L$5 = channelIterator2;
                            channelsKt__Channels_commonKt$consumeEach$3.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$consumeEach$3);
                            if (hasNext == coroutine_suspended) {
                            }
                        } catch (Throwable th2) {
                            e$iv = th2;
                            $receiver$iv = receiveChannel;
                            throw e$iv;
                        }
                    } else {
                        throw ((Result.Failure) e2).exception;
                    }
                }
            }
            if (i == 0) {
            }
        } catch (Throwable th3) {
            e$iv = th3;
        }
        channelsKt__Channels_commonKt$consumeEach$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$consumeEach$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                this.result = obj;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.consumeEach((ReceiveChannel) null, (Function1) null, this);
            }
        };
        Object e22 = channelsKt__Channels_commonKt$consumeEach$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$consumeEach$3.label;
        ReceiveChannel $receiver$iv2 = null;
    }

    private static final Object consumeEach$$forInline(ReceiveChannel $receiver, Function1 action, Continuation continuation) {
        e$iv = null;
        try {
            ChannelIterator it = $receiver.iterator();
            while (true) {
                InlineMarker.mark(0);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (!((Boolean) hasNext).booleanValue()) {
                    return Unit.INSTANCE;
                }
                InlineMarker.mark(0);
                Object e = it.next(continuation);
                InlineMarker.mark(1);
                action.invoke(e);
            }
        } finally {
            try {
                throw e$iv;
            } finally {
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v9 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c6  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0103 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0118 A[Catch: all -> 0x0172, TRY_LEAVE, TryCatch #1 {all -> 0x0172, blocks: (B:39:0x0110, B:41:0x0118, B:54:0x0162), top: B:71:0x0110 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0162 A[Catch: all -> 0x0172, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0172, blocks: (B:39:0x0110, B:41:0x0118, B:54:0x0162), top: B:71:0x0110 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object consumeEachIndexed(ReceiveChannel<? extends E> receiveChannel, Function1<? super IndexedValue<? extends E>, Unit> function1, Continuation<? super Unit> continuation) {
        ChannelsKt__Channels_commonKt$consumeEachIndexed$1 channelsKt__Channels_commonKt$consumeEachIndexed$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Ref.IntRef index;
        ReceiveChannel $receiver$iv2;
        Throwable cause$iv$iv;
        Function1 action;
        ReceiveChannel $receiver;
        Object obj;
        Object hasNext;
        boolean z2;
        Function1 action2;
        ReceiveChannel $receiver$iv3;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$consumeEachIndexed$1) {
                channelsKt__Channels_commonKt$consumeEachIndexed$1 = (ChannelsKt__Channels_commonKt$consumeEachIndexed$1) continuation;
                if ((channelsKt__Channels_commonKt$consumeEachIndexed$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$consumeEachIndexed$1.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$consumeEachIndexed$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$consumeEachIndexed$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2;
                            Function1 action3 = (Function1) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    action2 = action3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2;
                            Function1 action4 = (Function1) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    $receiver$iv2 = $receiver$iv4;
                                    action = action4;
                                    z2 = false;
                                    Object e$iv = obj2;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        try {
                                            try {
                                                int i2 = index.element;
                                                index.element = i2 + 1;
                                                action.invoke(new IndexedValue(i2, e$iv));
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1 = action;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2 = index;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$consumeEachIndexed$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$consumeEachIndexed$1);
                                                if (hasNext == obj) {
                                                    return obj;
                                                }
                                                z2 = z;
                                                action2 = action;
                                                $receiver$iv3 = $receiver$iv2;
                                                cause$iv$iv2 = cause$iv$iv;
                                                channelIterator2 = channelIterator;
                                                try {
                                                    if (!((Boolean) hasNext).booleanValue()) {
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1 = action2;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2 = index;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7 = channelIterator2;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.label = 2;
                                                        e$iv = channelIterator2.next(channelsKt__Channels_commonKt$consumeEachIndexed$1);
                                                        if (e$iv == obj) {
                                                            return obj;
                                                        }
                                                        $receiver$iv2 = $receiver$iv3;
                                                        action = action2;
                                                        channelIterator = channelIterator2;
                                                        cause$iv$iv = cause$iv$iv2;
                                                        int i22 = index.element;
                                                        index.element = i22 + 1;
                                                        action.invoke(new IndexedValue(i22, e$iv));
                                                        obj = obj;
                                                        z = z2;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1 = channelsKt__Channels_commonKt$consumeEachIndexed$1;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1 = action;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2 = index;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7 = channelIterator;
                                                        channelsKt__Channels_commonKt$consumeEachIndexed$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$consumeEachIndexed$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv.cancel(cause$iv$iv2);
                                                        InlineMarker.finallyEnd(1);
                                                        return Unit.INSTANCE;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                            obj = obj;
                                            z = z2;
                                            channelsKt__Channels_commonKt$consumeEachIndexed$1 = channelsKt__Channels_commonKt$consumeEachIndexed$1;
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        Ref.IntRef index2 = new Ref.IntRef();
                        index2.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            index = index2;
                            action = function1;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$1 = action;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$2 = index;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$consumeEachIndexed$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$consumeEachIndexed$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$consumeEachIndexed$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$consumeEachIndexed$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.consumeEachIndexed(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$consumeEachIndexed$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$consumeEachIndexed$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object consumeEachIndexed$$forInline(ReceiveChannel $receiver, Function1 action, Continuation continuation) {
        Throwable e$iv$iv;
        int index = 0;
        int i = 0;
        Throwable cause$iv$iv = null;
        try {
            ChannelIterator it = $receiver.iterator();
            while (true) {
                InlineMarker.mark(i);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(i);
                    Object e$iv = it.next(continuation);
                    InlineMarker.mark(1);
                    int index2 = index + 1;
                    try {
                        try {
                            action.invoke(new IndexedValue(index, e$iv));
                            index = index2;
                            i = 0;
                        } catch (Throwable th) {
                            e$iv$iv = th;
                            try {
                                throw e$iv$iv;
                            } catch (Throwable e$iv$iv2) {
                                InlineMarker.finallyStart(1);
                                $receiver.cancel(e$iv$iv);
                                InlineMarker.finallyEnd(1);
                                throw e$iv$iv2;
                            }
                        }
                    } catch (Throwable th2) {
                        e$iv$iv = th2;
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    InlineMarker.finallyStart(1);
                    $receiver.cancel(cause$iv$iv);
                    InlineMarker.finallyEnd(1);
                    return Unit.INSTANCE;
                }
            }
        } catch (Throwable th3) {
            e$iv$iv = th3;
        }
    }

    /* JADX INFO: Multiple debug info for r14v12 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('cause$iv$iv' java.lang.Throwable)] */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002e  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00f4 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00f5  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x010d A[Catch: all -> 0x016b, TRY_LEAVE, TryCatch #3 {all -> 0x016b, blocks: (B:41:0x0105, B:43:0x010d, B:52:0x0144, B:53:0x016a), top: B:73:0x0105 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x013c A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0140  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0144 A[Catch: all -> 0x016b, TRY_ENTER, TryCatch #3 {all -> 0x016b, blocks: (B:41:0x0105, B:43:0x010d, B:52:0x0144, B:53:0x016a), top: B:73:0x0105 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object elementAt(ReceiveChannel<? extends E> receiveChannel, int index, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$elementAt$1 channelsKt__Channels_commonKt$elementAt$1;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        ReceiveChannel $receiver$iv;
        ChannelIterator<E> channelIterator;
        int count$iv;
        int $i$a$2$consume;
        Object obj;
        int index2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv$iv2;
        Object obj2;
        int count$iv2;
        ReceiveChannel $receiver2;
        int index3;
        int $receiver$iv3;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$elementAt$1) {
                channelsKt__Channels_commonKt$elementAt$1 = (ChannelsKt__Channels_commonKt$elementAt$1) continuation;
                if ((channelsKt__Channels_commonKt$elementAt$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$elementAt$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$elementAt$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$elementAt$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$elementAt$1.L$5;
                            count$iv2 = channelsKt__Channels_commonKt$elementAt$1.I$1;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$4;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$elementAt$1.L$3;
                            ReceiveChannel $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$1;
                            index3 = channelsKt__Channels_commonKt$elementAt$1.I$0;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    cause$iv$iv = cause$iv$iv2;
                                    $receiver$iv$iv = $receiver$iv$iv3;
                                    $receiver$iv$iv2 = $receiver$iv4;
                                    $receiver$iv3 = 0;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv3;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$elementAt$1.L$5;
                            count$iv2 = channelsKt__Channels_commonKt$elementAt$1.I$1;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$4;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$elementAt$1.L$3;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$1;
                            int index4 = channelsKt__Channels_commonKt$elementAt$1.I$0;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAt$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    $i$a$2$consume = 0;
                                    Object next = obj3;
                                    $receiver$iv2 = $receiver$iv5;
                                    Object obj4 = coroutine_suspended;
                                    index2 = index4;
                                    $receiver = $receiver4;
                                    int count$iv3 = count$iv2 + 1;
                                    if (index2 != count$iv2) {
                                        return next;
                                    }
                                    obj = obj4;
                                    count$iv = count$iv3;
                                    try {
                                        channelsKt__Channels_commonKt$elementAt$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$elementAt$1.I$0 = index2;
                                        channelsKt__Channels_commonKt$elementAt$1.L$1 = $receiver$iv;
                                        channelsKt__Channels_commonKt$elementAt$1.L$2 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$elementAt$1.L$3 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$elementAt$1.L$4 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$elementAt$1.I$1 = count$iv;
                                        channelsKt__Channels_commonKt$elementAt$1.L$5 = channelIterator;
                                        channelsKt__Channels_commonKt$elementAt$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAt$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver$iv$iv2 = $receiver$iv2;
                                        obj2 = obj;
                                        count$iv2 = count$iv;
                                        $receiver2 = $receiver;
                                        index3 = index2;
                                        $receiver$iv3 = $i$a$2$consume;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$elementAt$1.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$elementAt$1.I$0 = index3;
                                                channelsKt__Channels_commonKt$elementAt$1.L$1 = $receiver$iv;
                                                channelsKt__Channels_commonKt$elementAt$1.L$2 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$elementAt$1.L$3 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$elementAt$1.L$4 = $receiver$iv$iv2;
                                                channelsKt__Channels_commonKt$elementAt$1.I$1 = count$iv2;
                                                channelsKt__Channels_commonKt$elementAt$1.L$5 = channelIterator2;
                                                channelsKt__Channels_commonKt$elementAt$1.label = 2;
                                                next = channelIterator2.next(channelsKt__Channels_commonKt$elementAt$1);
                                                if (next == obj2) {
                                                    return obj2;
                                                }
                                                obj4 = obj2;
                                                $receiver$iv2 = $receiver$iv$iv2;
                                                index2 = index3;
                                                $receiver = $receiver2;
                                                channelIterator = channelIterator2;
                                                $i$a$2$consume = $receiver$iv3;
                                                int count$iv32 = count$iv2 + 1;
                                                if (index2 != count$iv2) {
                                                }
                                            } else {
                                                Boxing.boxInt(index3).intValue();
                                                throw new IndexOutOfBoundsException("ReceiveChannel doesn't contain element at index " + index3 + FilenameUtils.EXTENSION_SEPARATOR);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        $i$a$2$consume = 0;
                        try {
                            if (index >= 0) {
                                count$iv = 0;
                                channelIterator = $receiver$iv2.iterator();
                                $receiver$iv = receiveChannel;
                                obj = coroutine_suspended;
                                index2 = index;
                                $receiver = receiveChannel;
                                channelsKt__Channels_commonKt$elementAt$1.L$0 = $receiver;
                                channelsKt__Channels_commonKt$elementAt$1.I$0 = index2;
                                channelsKt__Channels_commonKt$elementAt$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$elementAt$1.L$2 = $receiver$iv$iv;
                                channelsKt__Channels_commonKt$elementAt$1.L$3 = cause$iv$iv;
                                channelsKt__Channels_commonKt$elementAt$1.L$4 = $receiver$iv2;
                                channelsKt__Channels_commonKt$elementAt$1.I$1 = count$iv;
                                channelsKt__Channels_commonKt$elementAt$1.L$5 = channelIterator;
                                channelsKt__Channels_commonKt$elementAt$1.label = 1;
                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAt$1);
                                if (hasNext != obj) {
                                }
                            } else {
                                Boxing.boxInt(index).intValue();
                                throw new IndexOutOfBoundsException("ReceiveChannel doesn't contain element at index " + index + FilenameUtils.EXTENSION_SEPARATOR);
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$elementAt$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$elementAt$1
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.elementAt(null, 0, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$elementAt$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$elementAt$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00be  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x010e A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x010f  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0121 A[Catch: all -> 0x016b, TRY_LEAVE, TryCatch #3 {all -> 0x016b, blocks: (B:48:0x0119, B:50:0x0121, B:59:0x0158), top: B:79:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x014a  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0155  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0158 A[Catch: all -> 0x016b, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x016b, blocks: (B:48:0x0119, B:50:0x0121, B:59:0x0158), top: B:79:0x0119 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object elementAtOrElse(ReceiveChannel<? extends E> receiveChannel, int index, Function1<? super Integer, ? extends E> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$elementAtOrElse$1 channelsKt__Channels_commonKt$elementAtOrElse$1;
        int i;
        int count;
        Function1 defaultValue;
        Function1 defaultValue2;
        int $i$a$2$consume;
        ReceiveChannel $receiver$iv;
        Throwable e$iv;
        ChannelIterator<E> channelIterator;
        int count2;
        Object obj;
        int count3;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver2;
        Object hasNext;
        ReceiveChannel $receiver3;
        Object obj2;
        int cause$iv;
        Function1 $i$f$elementAtOrElse;
        Function1 defaultValue3;
        int index2;
        int count4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$elementAtOrElse$1) {
                channelsKt__Channels_commonKt$elementAtOrElse$1 = (ChannelsKt__Channels_commonKt$elementAtOrElse$1) continuation;
                if ((channelsKt__Channels_commonKt$elementAtOrElse$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$elementAtOrElse$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$elementAtOrElse$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$elementAtOrElse$1.label;
                    count = 1;
                    if (i == 0) {
                        if (i == count) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$elementAtOrElse$1.L$5;
                            count4 = channelsKt__Channels_commonKt$elementAtOrElse$1.I$1;
                            $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$4;
                            Throwable cause$iv2 = (Throwable) channelsKt__Channels_commonKt$elementAtOrElse$1.L$3;
                            ReceiveChannel $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$2;
                            defaultValue3 = (Function1) channelsKt__Channels_commonKt$elementAtOrElse$1.L$1;
                            index2 = channelsKt__Channels_commonKt$elementAtOrElse$1.I$0;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver4;
                                    e$iv = cause$iv2;
                                    cause$iv = 0;
                                    $i$f$elementAtOrElse = null;
                                    $receiver$iv = $receiver$iv2;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv = th;
                                $receiver$iv = $receiver$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$elementAtOrElse$1.L$5;
                            int count5 = channelsKt__Channels_commonKt$elementAtOrElse$1.I$1;
                            $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$4;
                            e$iv = (Throwable) channelsKt__Channels_commonKt$elementAtOrElse$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$2;
                            defaultValue = (Function1) channelsKt__Channels_commonKt$elementAtOrElse$1.L$1;
                            int index3 = channelsKt__Channels_commonKt$elementAtOrElse$1.I$0;
                            ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrElse$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    $receiver = $receiver5;
                                    Object next = obj3;
                                    int count6 = count5;
                                    count3 = index3;
                                    $i$a$2$consume = 0;
                                    defaultValue2 = null;
                                    int count7 = count6 + 1;
                                    if (count3 != count6) {
                                        count = 3;
                                        return next;
                                    }
                                    $receiver2 = $receiver3;
                                    count2 = count7;
                                    try {
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.I$0 = count3;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$1 = defaultValue;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$3 = e$iv;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$4 = $receiver2;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.I$1 = count2;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.L$5 = channelIterator;
                                        channelsKt__Channels_commonKt$elementAtOrElse$1.label = count;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAtOrElse$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver3 = $receiver2;
                                        obj2 = obj;
                                        cause$iv = $i$a$2$consume;
                                        $i$f$elementAtOrElse = defaultValue2;
                                        defaultValue3 = defaultValue;
                                        index2 = count3;
                                        count4 = count2;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.I$0 = index2;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$1 = defaultValue3;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$3 = e$iv;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$4 = $receiver3;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.I$1 = count4;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$5 = channelIterator;
                                                channelsKt__Channels_commonKt$elementAtOrElse$1.label = 2;
                                                next = channelIterator.next(channelsKt__Channels_commonKt$elementAtOrElse$1);
                                                if (next == obj2) {
                                                    return obj2;
                                                }
                                                obj = obj2;
                                                count6 = count4;
                                                count3 = index2;
                                                defaultValue = defaultValue3;
                                                defaultValue2 = $i$f$elementAtOrElse;
                                                $i$a$2$consume = cause$iv;
                                                int count72 = count6 + 1;
                                                if (count3 != count6) {
                                                }
                                            } else {
                                                count = 2;
                                                return defaultValue3.invoke(Boxing.boxInt(index2));
                                            }
                                        } catch (Throwable th2) {
                                            e$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        e$iv = null;
                        $receiver2 = $receiver$iv;
                        try {
                            if (index < 0) {
                                try {
                                    count = 4;
                                    return function1.invoke(Boxing.boxInt(index));
                                } catch (Throwable th5) {
                                    e$iv = th5;
                                    throw e$iv;
                                }
                            } else {
                                defaultValue = function1;
                                count2 = 0;
                                channelIterator = $receiver2.iterator();
                                $i$a$2$consume = 0;
                                defaultValue2 = null;
                                count3 = index;
                                obj = coroutine_suspended;
                                $receiver = receiveChannel;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$0 = $receiver;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.I$0 = count3;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$1 = defaultValue;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$3 = e$iv;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$4 = $receiver2;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.I$1 = count2;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.L$5 = channelIterator;
                                channelsKt__Channels_commonKt$elementAtOrElse$1.label = count;
                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAtOrElse$1);
                                if (hasNext != obj) {
                                }
                            }
                        } catch (Throwable th6) {
                            e$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv;
                }
            }
            throw e$iv;
        } finally {
            InlineMarker.finallyStart(count);
            $receiver$iv.cancel(e$iv);
            InlineMarker.finallyEnd(count);
        }
        channelsKt__Channels_commonKt$elementAtOrElse$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$elementAtOrElse$1
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.elementAtOrElse(null, 0, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$elementAtOrElse$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$elementAtOrElse$1.label;
        count = 1;
        if (i == 0) {
        }
    }

    private static final Object elementAtOrElse$$forInline(ReceiveChannel $receiver, int index, Function1 defaultValue, Continuation continuation) {
        Object invoke;
        int i;
        e$iv = null;
        int i2 = 1;
        try {
            if (index >= 0) {
                int count = 0;
                ChannelIterator it = $receiver.iterator();
                while (true) {
                    InlineMarker.mark(0);
                    Object hasNext = it.hasNext(continuation);
                    InlineMarker.mark(i2);
                    if (!((Boolean) hasNext).booleanValue()) {
                        invoke = defaultValue.invoke(Integer.valueOf(index));
                        i = 2;
                        InlineMarker.finallyStart(2);
                        break;
                    }
                    InlineMarker.mark(0);
                    Object next = it.next(continuation);
                    InlineMarker.mark(i2);
                    int count2 = count + 1;
                    if (index == count) {
                        i2 = 3;
                        return next;
                    }
                    count = count2;
                }
            } else {
                invoke = defaultValue.invoke(Integer.valueOf(index));
                i = 4;
                InlineMarker.finallyStart(4);
            }
            $receiver.cancel(e$iv);
            InlineMarker.finallyEnd(i);
            return invoke;
        } finally {
            try {
                throw e$iv;
            } finally {
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:27:0x00a4  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00da A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00db  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00ed A[Catch: all -> 0x0123, TRY_LEAVE, TryCatch #2 {all -> 0x0123, blocks: (B:40:0x00e5, B:42:0x00ed), top: B:69:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0117 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x011b  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x011e A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x002a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object elementAtOrNull(ReceiveChannel<? extends E> receiveChannel, int index, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$elementAtOrNull$1 channelsKt__Channels_commonKt$elementAtOrNull$1;
        int i;
        int $i$f$consume;
        boolean z;
        ChannelIterator<E> channelIterator;
        Object obj;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        int count;
        int $i$a$2$consume;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver2;
        Object hasNext;
        ReceiveChannel $receiver3;
        Object obj2;
        int $i$f$consume2;
        int $i$f$consume3;
        int count2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$elementAtOrNull$1) {
                channelsKt__Channels_commonKt$elementAtOrNull$1 = (ChannelsKt__Channels_commonKt$elementAtOrNull$1) continuation;
                if ((channelsKt__Channels_commonKt$elementAtOrNull$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$elementAtOrNull$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$elementAtOrNull$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$elementAtOrNull$1.label;
                    boolean z2 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$f$consume2 = 0;
                                ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$elementAtOrNull$1.L$4;
                                count2 = channelsKt__Channels_commonKt$elementAtOrNull$1.I$1;
                                $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$3;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$elementAtOrNull$1.L$2;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$1;
                                $i$f$consume3 = channelsKt__Channels_commonKt$elementAtOrNull$1.I$0;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$0;
                                if (obj3 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj3).exception;
                                }
                                hasNext = obj3;
                                obj2 = coroutine_suspended;
                                $receiver = $receiver4;
                                channelIterator2 = channelIterator3;
                                if (((Boolean) hasNext).booleanValue()) {
                                }
                            } else if (i == 2) {
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$elementAtOrNull$1.L$4;
                                int count3 = channelsKt__Channels_commonKt$elementAtOrNull$1.I$1;
                                ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$3;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$elementAtOrNull$1.L$2;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$1;
                                int index2 = channelsKt__Channels_commonKt$elementAtOrNull$1.I$0;
                                ReceiveChannel $receiver6 = (ReceiveChannel) channelsKt__Channels_commonKt$elementAtOrNull$1.L$0;
                                if (!(obj3 instanceof Result.Failure)) {
                                    Object next = obj3;
                                    int count4 = count3;
                                    $i$a$2$consume = index2;
                                    $i$f$consume = 0;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver6;
                                    z = false;
                                    ReceiveChannel $receiver7 = $receiver5;
                                    int count5 = count4 + 1;
                                    if ($i$a$2$consume != count4) {
                                        return next;
                                    }
                                    $receiver2 = $receiver7;
                                    count = count5;
                                    try {
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.I$0 = $i$a$2$consume;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.L$1 = $receiver$iv;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.L$2 = cause$iv;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.L$3 = $receiver2;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.I$1 = count;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.L$4 = channelIterator;
                                        channelsKt__Channels_commonKt$elementAtOrNull$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAtOrNull$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver3 = $receiver2;
                                        obj2 = obj;
                                        $i$f$consume2 = $i$f$consume;
                                        $i$f$consume3 = $i$a$2$consume;
                                        count2 = count;
                                        z2 = z;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (((Boolean) hasNext).booleanValue()) {
                                                return null;
                                            }
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.I$0 = $i$f$consume3;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$1 = $receiver$iv;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$2 = cause$iv;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$3 = $receiver3;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.I$1 = count2;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$4 = channelIterator2;
                                            channelsKt__Channels_commonKt$elementAtOrNull$1.label = 2;
                                            next = channelIterator2.next(channelsKt__Channels_commonKt$elementAtOrNull$1);
                                            if (next == obj2) {
                                                return obj2;
                                            }
                                            obj = obj2;
                                            count4 = count2;
                                            $i$a$2$consume = $i$f$consume3;
                                            $i$f$consume = $i$f$consume2;
                                            z = z2;
                                            $receiver7 = $receiver3;
                                            channelIterator = channelIterator2;
                                            int count52 = count4 + 1;
                                            if ($i$a$2$consume != count4) {
                                            }
                                        } catch (Throwable th) {
                                            e$iv = th;
                                        }
                                    } catch (Throwable th2) {
                                        e$iv = th2;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th3) {
                            e$iv = th3;
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        cause$iv = null;
                        $receiver2 = $receiver$iv;
                        if (index < 0) {
                            return null;
                        }
                        count = 0;
                        try {
                            channelIterator = $receiver2.iterator();
                            z = false;
                            $i$f$consume = 0;
                            $i$a$2$consume = index;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.I$0 = $i$a$2$consume;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$1 = $receiver$iv;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$2 = cause$iv;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$3 = $receiver2;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.I$1 = count;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.L$4 = channelIterator;
                            channelsKt__Channels_commonKt$elementAtOrNull$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$elementAtOrNull$1);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th4) {
                            e$iv = th4;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv;
                }
            }
            throw e$iv;
        } finally {
            $receiver$iv.cancel(e$iv);
        }
        channelsKt__Channels_commonKt$elementAtOrNull$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$elementAtOrNull$1
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.elementAtOrNull(null, 0, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$elementAtOrNull$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$elementAtOrNull$1.label;
        boolean z22 = false;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0104 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0105  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0118 A[Catch: all -> 0x016a, TRY_LEAVE, TryCatch #2 {all -> 0x016a, blocks: (B:39:0x0110, B:41:0x0118, B:50:0x015a), top: B:69:0x0110 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0149  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0155  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x015a A[Catch: all -> 0x016a, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x016a, blocks: (B:39:0x0110, B:41:0x0118, B:50:0x015a), top: B:69:0x0110 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object find(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$find$1 channelsKt__Channels_commonKt$find$1;
        int i;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        ChannelIterator<E> channelIterator;
        Object obj;
        Throwable cause$iv$iv$iv;
        Function1 predicate;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        ChannelIterator<E> channelIterator2;
        Object obj2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$find$1) {
                channelsKt__Channels_commonKt$find$1 = (ChannelsKt__Channels_commonKt$find$1) continuation;
                if ((channelsKt__Channels_commonKt$find$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$find$1.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$find$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$find$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$find$1.L$7;
                            ReceiveChannel $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$6;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$find$1.L$5;
                            ReceiveChannel $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$4;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$find$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    $receiver$iv$iv = $receiver$iv$iv5;
                                    predicate2 = predicate3;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                    $receiver$iv$iv3 = $receiver$iv$iv4;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$find$1.L$7;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$6;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$find$1.L$5;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$find$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$find$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    predicate = predicate4;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    if (!predicate.invoke(it$iv).booleanValue()) {
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv$iv.cancel(cause$iv$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return it$iv;
                                    }
                                    $receiver$iv$iv2 = $receiver$iv$iv3;
                                    try {
                                        channelsKt__Channels_commonKt$find$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$find$1.L$1 = predicate;
                                        channelsKt__Channels_commonKt$find$1.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$find$1.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$find$1.L$4 = $receiver$iv$iv$iv;
                                        channelsKt__Channels_commonKt$find$1.L$5 = cause$iv$iv$iv;
                                        channelsKt__Channels_commonKt$find$1.L$6 = $receiver$iv$iv2;
                                        channelsKt__Channels_commonKt$find$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$find$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$find$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                        it$iv = hasNext;
                                        predicate2 = predicate;
                                        channelIterator2 = channelIterator;
                                        obj2 = obj;
                                        try {
                                            if (!((Boolean) it$iv).booleanValue()) {
                                                channelsKt__Channels_commonKt$find$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$find$1.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$find$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$find$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$find$1.L$4 = $receiver$iv$iv$iv;
                                                channelsKt__Channels_commonKt$find$1.L$5 = cause$iv$iv$iv;
                                                channelsKt__Channels_commonKt$find$1.L$6 = $receiver$iv$iv3;
                                                channelsKt__Channels_commonKt$find$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$find$1.label = 2;
                                                it$iv = channelIterator2.next(channelsKt__Channels_commonKt$find$1);
                                                if (it$iv == obj2) {
                                                    return obj2;
                                                }
                                                channelIterator = channelIterator2;
                                                predicate = predicate2;
                                                obj = obj2;
                                                if (!predicate.invoke(it$iv).booleanValue()) {
                                                }
                                            } else {
                                                Object it$iv2 = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv$iv.cancel(cause$iv$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                return null;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            $receiver$iv$iv2 = $receiver$iv$iv$iv;
                            predicate = function1;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$find$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$find$1.L$1 = predicate;
                            channelsKt__Channels_commonKt$find$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$find$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$find$1.L$4 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$find$1.L$5 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$find$1.L$6 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$find$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$find$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$find$1);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } catch (Throwable e$iv$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv$iv;
        }
        channelsKt__Channels_commonKt$find$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$find$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.find(null, null, this);
            }
        };
        Object it$iv3 = channelsKt__Channels_commonKt$find$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$find$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object find$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv$iv;
        ChannelIterator it;
        int i = 0;
        Throwable cause$iv$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    if (((Boolean) predicate.invoke(e$iv$iv)).booleanValue()) {
                        InlineMarker.finallyStart(2);
                        $receiver.cancel(cause$iv$iv$iv);
                        InlineMarker.finallyEnd(2);
                        return e$iv$iv;
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv$iv);
                InlineMarker.finallyEnd(1);
                return null;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } catch (Throwable e$iv$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv$iv2;
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v9 java.lang.Object: [D('last$iv' kotlin.jvm.internal.Ref$ObjectRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d6  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x011f A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0137 A[Catch: all -> 0x0187, TRY_LEAVE, TryCatch #3 {all -> 0x0187, blocks: (B:41:0x012f, B:43:0x0137, B:54:0x0177), top: B:77:0x012f }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x016c A[Catch: all -> 0x0173, TRY_LEAVE, TryCatch #0 {all -> 0x0173, blocks: (B:48:0x0160, B:50:0x016c), top: B:71:0x0160 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0177 A[Catch: all -> 0x0187, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x0187, blocks: (B:41:0x012f, B:43:0x0137, B:54:0x0177), top: B:77:0x012f }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object findLast(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$findLast$1 channelsKt__Channels_commonKt$findLast$1;
        int i;
        boolean z;
        Ref.ObjectRef last$iv;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        ReceiveChannel $receiver$iv;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        Object obj;
        Function1 predicate;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        Object obj2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv$iv$iv2;
        ReceiveChannel $receiver$iv$iv$iv3;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$findLast$1) {
                channelsKt__Channels_commonKt$findLast$1 = (ChannelsKt__Channels_commonKt$findLast$1) continuation;
                if ((channelsKt__Channels_commonKt$findLast$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$findLast$1.label -= Integer.MIN_VALUE;
                    Object it$iv = (Object) channelsKt__Channels_commonKt$findLast$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$findLast$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$findLast$1.L$8;
                            ReceiveChannel $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$findLast$1.L$6;
                            $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$4;
                            last$iv = (Ref.ObjectRef) channelsKt__Channels_commonKt$findLast$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$findLast$1.L$1;
                            $receiver$iv$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    z2 = false;
                                    $receiver$iv$iv3 = $receiver$iv$iv4;
                                    predicate2 = predicate3;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$findLast$1.L$8;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$findLast$1.L$6;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$4;
                            last$iv = (Ref.ObjectRef) channelsKt__Channels_commonKt$findLast$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$findLast$1.L$1;
                            ReceiveChannel $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$findLast$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    $receiver$iv2 = $receiver;
                                    z2 = false;
                                    ReceiveChannel $receiver$iv$iv6 = $receiver$iv$iv5;
                                    predicate = predicate4;
                                    obj2 = coroutine_suspended;
                                    try {
                                        try {
                                            try {
                                                if (predicate.invoke(it$iv).booleanValue()) {
                                                    last$iv.element = (T) it$iv;
                                                }
                                                channelsKt__Channels_commonKt$findLast$1.L$0 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$findLast$1.L$1 = predicate;
                                                channelsKt__Channels_commonKt$findLast$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$findLast$1.L$3 = last$iv;
                                                channelsKt__Channels_commonKt$findLast$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$findLast$1.L$5 = $receiver$iv$iv$iv;
                                                channelsKt__Channels_commonKt$findLast$1.L$6 = cause$iv$iv$iv;
                                                channelsKt__Channels_commonKt$findLast$1.L$7 = $receiver$iv$iv2;
                                                channelsKt__Channels_commonKt$findLast$1.L$8 = channelIterator;
                                                channelsKt__Channels_commonKt$findLast$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$findLast$1);
                                                if (hasNext == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv$iv3 = $receiver$iv$iv2;
                                                it$iv = (Object) hasNext;
                                                predicate2 = predicate;
                                                obj2 = obj;
                                                channelIterator2 = channelIterator;
                                                $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                                                $receiver$iv$iv$iv3 = $receiver$iv2;
                                                z2 = z;
                                                try {
                                                    if (!((Boolean) it$iv).booleanValue()) {
                                                        channelsKt__Channels_commonKt$findLast$1.L$0 = $receiver$iv$iv$iv3;
                                                        channelsKt__Channels_commonKt$findLast$1.L$1 = predicate2;
                                                        channelsKt__Channels_commonKt$findLast$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$3 = last$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$5 = $receiver$iv$iv$iv2;
                                                        channelsKt__Channels_commonKt$findLast$1.L$6 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$7 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$findLast$1.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$findLast$1.label = 2;
                                                        it$iv = (Object) channelIterator2.next(channelsKt__Channels_commonKt$findLast$1);
                                                        if (it$iv == obj2) {
                                                            return obj2;
                                                        }
                                                        predicate = predicate2;
                                                        $receiver$iv2 = $receiver$iv$iv$iv3;
                                                        $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                        channelIterator = channelIterator2;
                                                        $receiver$iv$iv6 = $receiver$iv$iv3;
                                                        if (predicate.invoke(it$iv).booleanValue()) {
                                                        }
                                                        $receiver$iv$iv2 = $receiver$iv$iv6;
                                                        obj = obj2;
                                                        z = z2;
                                                        channelsKt__Channels_commonKt$findLast$1.L$0 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$findLast$1.L$1 = predicate;
                                                        channelsKt__Channels_commonKt$findLast$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$3 = last$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$5 = $receiver$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$6 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$findLast$1.L$7 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$findLast$1.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$findLast$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$findLast$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv$iv2.cancel(cause$iv$iv$iv);
                                                        InlineMarker.finallyEnd(1);
                                                        return last$iv.element;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv$iv = th2;
                                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv$iv = th5;
                                    }
                                    $receiver$iv$iv2 = $receiver$iv$iv6;
                                    obj = obj2;
                                    z = z2;
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        Ref.ObjectRef objectRef = new Ref.ObjectRef();
                        objectRef.element = null;
                        last$iv = objectRef;
                        $receiver$iv$iv = receiveChannel;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            z = false;
                            $receiver$iv = receiveChannel;
                            $receiver$iv$iv2 = $receiver$iv$iv$iv;
                            obj = coroutine_suspended;
                            $receiver$iv2 = receiveChannel;
                            predicate = function1;
                            channelsKt__Channels_commonKt$findLast$1.L$0 = $receiver$iv2;
                            channelsKt__Channels_commonKt$findLast$1.L$1 = predicate;
                            channelsKt__Channels_commonKt$findLast$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$findLast$1.L$3 = last$iv;
                            channelsKt__Channels_commonKt$findLast$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$findLast$1.L$5 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$findLast$1.L$6 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$findLast$1.L$7 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$findLast$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$findLast$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$findLast$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } catch (Throwable e$iv$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv$iv;
        }
        channelsKt__Channels_commonKt$findLast$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$findLast$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.findLast(null, null, this);
            }
        };
        Object it$iv2 = (Object) channelsKt__Channels_commonKt$findLast$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$findLast$1.label;
        if (i == 0) {
        }
    }

    private static final Object findLast$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Object last$iv = null;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    if (((Boolean) predicate.invoke(e$iv$iv)).booleanValue()) {
                        last$iv = e$iv$iv;
                    }
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return last$iv;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(4:12|59|13|(3:15|42|43)(2:16|17))(2:20|21))(4:22|63|23|(1:25)(2:26|27))|49|61|50)(2:30|(4:32|57|33|(1:35)(1:36))(2:54|55))|56|37|(4:39|(1:41)|42|43)(2:44|45)))|7|8|(0)(0)|56|37|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x00e1, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0028  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0090  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00c0 A[Catch: all -> 0x00e1, TRY_LEAVE, TryCatch #0 {all -> 0x00e1, blocks: (B:37:0x00b8, B:39:0x00c0, B:44:0x00d7, B:45:0x00e0), top: B:56:0x00b8 }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d7 A[Catch: all -> 0x00e1, TRY_ENTER, TryCatch #0 {all -> 0x00e1, blocks: (B:37:0x00b8, B:39:0x00c0, B:44:0x00d7, B:45:0x00e0), top: B:56:0x00b8 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object first(ReceiveChannel<? extends E> receiveChannel, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$first$1 channelsKt__Channels_commonKt$first$1;
        Object obj;
        int i;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        ChannelIterator iterator;
        if (continuation instanceof ChannelsKt__Channels_commonKt$first$1) {
            channelsKt__Channels_commonKt$first$1 = (ChannelsKt__Channels_commonKt$first$1) continuation;
            if ((channelsKt__Channels_commonKt$first$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$first$1.label -= Integer.MIN_VALUE;
                obj = channelsKt__Channels_commonKt$first$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$first$1.label;
                if (i == 0) {
                    if (i == 1) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$first$1.L$4;
                        ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$3;
                        Throwable cause$iv2 = (Throwable) channelsKt__Channels_commonKt$first$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$0;
                        try {
                            if (!(obj instanceof Result.Failure)) {
                                $receiver = $receiver2;
                                cause$iv = cause$iv2;
                            } else {
                                throw ((Result.Failure) obj).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                        }
                    } else if (i == 2) {
                        ChannelIterator iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$first$1.L$4;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$3;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$first$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$1;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$first$1.L$0;
                        try {
                            if (!(obj instanceof Result.Failure)) {
                                return obj;
                            }
                            throw ((Result.Failure) obj).exception;
                        } catch (Throwable th2) {
                            cause$iv = th2;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw cause$iv;
                    } finally {
                        $receiver$iv.cancel(cause$iv);
                    }
                } else if (!(obj instanceof Result.Failure)) {
                    Throwable cause$iv3 = null;
                    $receiver = receiveChannel;
                    try {
                        ChannelIterator iterator3 = $receiver.iterator();
                        channelsKt__Channels_commonKt$first$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$first$1.L$1 = receiveChannel;
                        channelsKt__Channels_commonKt$first$1.L$2 = cause$iv3;
                        channelsKt__Channels_commonKt$first$1.L$3 = $receiver;
                        channelsKt__Channels_commonKt$first$1.L$4 = iterator3;
                        channelsKt__Channels_commonKt$first$1.label = 1;
                        Object hasNext = iterator3.hasNext(channelsKt__Channels_commonKt$first$1);
                        if (hasNext == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv = receiveChannel;
                        obj = hasNext;
                        cause$iv = cause$iv3;
                        iterator = iterator3;
                    } catch (Throwable th3) {
                        cause$iv = th3;
                        $receiver$iv = receiveChannel;
                    }
                } else {
                    throw ((Result.Failure) obj).exception;
                }
                if (!((Boolean) obj).booleanValue()) {
                    channelsKt__Channels_commonKt$first$1.L$0 = receiveChannel;
                    channelsKt__Channels_commonKt$first$1.L$1 = $receiver$iv;
                    channelsKt__Channels_commonKt$first$1.L$2 = cause$iv;
                    channelsKt__Channels_commonKt$first$1.L$3 = $receiver;
                    channelsKt__Channels_commonKt$first$1.L$4 = iterator;
                    channelsKt__Channels_commonKt$first$1.label = 2;
                    obj = iterator.next(channelsKt__Channels_commonKt$first$1);
                    if (obj == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                    return obj;
                }
                throw new NoSuchElementException("ReceiveChannel is empty.");
            }
        }
        channelsKt__Channels_commonKt$first$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$first$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.first(null, this);
            }
        };
        obj = channelsKt__Channels_commonKt$first$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$first$1.label;
        if (i == 0) {
        }
        if (!((Boolean) obj).booleanValue()) {
        }
    }

    /* JADX INFO: Multiple debug info for r8v8 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00f2 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0107 A[Catch: all -> 0x0161, TRY_LEAVE, TryCatch #1 {all -> 0x0161, blocks: (B:39:0x00ff, B:41:0x0107, B:51:0x014a), top: B:68:0x00ff }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x014a A[Catch: all -> 0x0161, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0161, blocks: (B:39:0x00ff, B:41:0x0107, B:51:0x014a), top: B:68:0x00ff }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object first(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$first$3 channelsKt__Channels_commonKt$first$3;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Throwable th;
        int $i$a$4$consume;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver;
        Function1 predicate;
        ReceiveChannel $receiver2;
        ReceiveChannel $receiver$iv;
        Object hasNext;
        ReceiveChannel $receiver$iv2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Function1 predicate2;
        int predicate3;
        Throwable cause$iv$iv2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$first$3) {
                channelsKt__Channels_commonKt$first$3 = (ChannelsKt__Channels_commonKt$first$3) continuation;
                if ((channelsKt__Channels_commonKt$first$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$first$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$first$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$first$3.label;
                    Throwable $i$a$4$consumeEach = null;
                    if (i == 0) {
                        if (i == 1) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$first$3.L$6;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$5;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$first$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$3;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$first$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    predicate3 = 0;
                                    predicate2 = predicate4;
                                    $receiver$iv3 = $receiver$iv4;
                                    cause$iv$iv = cause$iv$iv3;
                                    cause$iv$iv2 = null;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th2) {
                                e$iv$iv = th2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$first$3.L$6;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$first$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$3;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$2;
                            Function1 predicate5 = (Function1) channelsKt__Channels_commonKt$first$3.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$first$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    $i$a$4$consume = 0;
                                    Object obj4 = coroutine_suspended;
                                    $receiver2 = $receiver4;
                                    $receiver = $receiver$iv6;
                                    Object e$iv = obj3;
                                    $receiver$iv = $receiver$iv5;
                                    predicate = predicate5;
                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return e$iv;
                                    }
                                    th = $i$a$4$consumeEach;
                                    obj = obj4;
                                    try {
                                        channelsKt__Channels_commonKt$first$3.L$0 = $receiver2;
                                        channelsKt__Channels_commonKt$first$3.L$1 = predicate;
                                        channelsKt__Channels_commonKt$first$3.L$2 = $receiver;
                                        channelsKt__Channels_commonKt$first$3.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$first$3.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$first$3.L$5 = $receiver$iv;
                                        channelsKt__Channels_commonKt$first$3.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$first$3.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$first$3);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver$iv2 = $receiver$iv;
                                        obj2 = obj;
                                        $receiver$iv3 = $receiver;
                                        predicate2 = predicate;
                                        predicate3 = $i$a$4$consume;
                                        cause$iv$iv2 = th;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$first$3.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$first$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$first$3.L$2 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$first$3.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$first$3.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$first$3.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$first$3.L$6 = channelIterator;
                                                channelsKt__Channels_commonKt$first$3.label = 2;
                                                e$iv = channelIterator.next(channelsKt__Channels_commonKt$first$3);
                                                if (e$iv == obj2) {
                                                    return obj2;
                                                }
                                                obj4 = obj2;
                                                $receiver$iv = $receiver$iv2;
                                                predicate = predicate2;
                                                $receiver = $receiver$iv3;
                                                $i$a$4$consumeEach = cause$iv$iv2;
                                                $i$a$4$consume = predicate3;
                                                if (!predicate.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            $i$a$4$consume = 0;
                            th = null;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            $receiver2 = receiveChannel;
                            predicate = function1;
                            channelsKt__Channels_commonKt$first$3.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$first$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$first$3.L$2 = $receiver;
                            channelsKt__Channels_commonKt$first$3.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$first$3.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$first$3.L$5 = $receiver$iv;
                            channelsKt__Channels_commonKt$first$3.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$first$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$first$3);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$first$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$first$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.first(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$first$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$first$3.label;
        Throwable $i$a$4$consumeEach2 = null;
        if (i == 0) {
        }
    }

    private static final Object first$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Object e$iv;
        Throwable e$iv$iv = null;
        int i = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        do {
            InlineMarker.mark(0);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(0);
                e$iv = it.next(continuation);
                InlineMarker.mark(i);
                try {
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(i);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i);
                throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(i);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i);
            }
        } while (!((Boolean) predicate.invoke(e$iv)).booleanValue());
        i = 2;
        return e$iv;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(4:12|61|13|(3:15|45|46)(2:16|17))(2:20|21))(4:22|65|23|(1:25)(2:26|27))|50|63|51)(2:30|(4:32|59|33|(1:35)(1:36))(2:55|56))|57|37|(2:39|40)(2:41|(1:43)(3:44|45|46))))|7|8|(0)(0)|57|37|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:47:0x00e1, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0028  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0092  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00c4 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00c8 A[Catch: all -> 0x00e1, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x00e1, blocks: (B:37:0x00bb, B:41:0x00c8), top: B:57:0x00bb }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object firstOrNull(ReceiveChannel<? extends E> receiveChannel, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$firstOrNull$1 channelsKt__Channels_commonKt$firstOrNull$1;
        Object obj;
        int i;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver;
        ChannelIterator iterator;
        Throwable e$iv;
        ReceiveChannel $receiver$iv2;
        Throwable e$iv2;
        if (continuation instanceof ChannelsKt__Channels_commonKt$firstOrNull$1) {
            channelsKt__Channels_commonKt$firstOrNull$1 = (ChannelsKt__Channels_commonKt$firstOrNull$1) continuation;
            if ((channelsKt__Channels_commonKt$firstOrNull$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$firstOrNull$1.label -= Integer.MIN_VALUE;
                obj = channelsKt__Channels_commonKt$firstOrNull$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$firstOrNull$1.label;
                if (i == 0) {
                    if (i == 1) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$firstOrNull$1.L$4;
                        $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$3;
                        Throwable cause$iv = (Throwable) channelsKt__Channels_commonKt$firstOrNull$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$0;
                        try {
                            if (!(obj instanceof Result.Failure)) {
                                e$iv2 = cause$iv;
                            } else {
                                throw ((Result.Failure) obj).exception;
                            }
                        } catch (Throwable th) {
                            e$iv = th;
                        }
                    } else if (i == 2) {
                        ChannelIterator iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$firstOrNull$1.L$4;
                        ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$3;
                        e$iv = (Throwable) channelsKt__Channels_commonKt$firstOrNull$1.L$2;
                        $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$1;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$1.L$0;
                        try {
                            if (!(obj instanceof Result.Failure)) {
                                return obj;
                            }
                            throw ((Result.Failure) obj).exception;
                        } catch (Throwable th2) {
                            e$iv = th2;
                            $receiver$iv = $receiver$iv2;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw e$iv;
                    } finally {
                        $receiver$iv.cancel(e$iv);
                    }
                } else if (!(obj instanceof Result.Failure)) {
                    e$iv2 = null;
                    try {
                        ChannelIterator iterator3 = receiveChannel.iterator();
                        channelsKt__Channels_commonKt$firstOrNull$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$firstOrNull$1.L$1 = receiveChannel;
                        channelsKt__Channels_commonKt$firstOrNull$1.L$2 = e$iv2;
                        channelsKt__Channels_commonKt$firstOrNull$1.L$3 = receiveChannel;
                        channelsKt__Channels_commonKt$firstOrNull$1.L$4 = iterator3;
                        channelsKt__Channels_commonKt$firstOrNull$1.label = 1;
                        Object hasNext = iterator3.hasNext(channelsKt__Channels_commonKt$firstOrNull$1);
                        if (hasNext == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        obj = hasNext;
                        $receiver = receiveChannel;
                        $receiver$iv = receiveChannel;
                        iterator = iterator3;
                    } catch (Throwable th3) {
                        e$iv = th3;
                        $receiver$iv = receiveChannel;
                    }
                } else {
                    throw ((Result.Failure) obj).exception;
                }
                if (((Boolean) obj).booleanValue()) {
                    return null;
                }
                channelsKt__Channels_commonKt$firstOrNull$1.L$0 = receiveChannel;
                channelsKt__Channels_commonKt$firstOrNull$1.L$1 = $receiver$iv;
                channelsKt__Channels_commonKt$firstOrNull$1.L$2 = e$iv;
                channelsKt__Channels_commonKt$firstOrNull$1.L$3 = $receiver;
                channelsKt__Channels_commonKt$firstOrNull$1.L$4 = iterator;
                channelsKt__Channels_commonKt$firstOrNull$1.label = 2;
                obj = iterator.next(channelsKt__Channels_commonKt$firstOrNull$1);
                if (obj == coroutine_suspended) {
                    return coroutine_suspended;
                }
                e$iv = e$iv;
                $receiver$iv2 = $receiver$iv;
                return obj;
            }
        }
        channelsKt__Channels_commonKt$firstOrNull$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$firstOrNull$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.firstOrNull(null, this);
            }
        };
        obj = channelsKt__Channels_commonKt$firstOrNull$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$firstOrNull$1.label;
        if (i == 0) {
        }
        if (((Boolean) obj).booleanValue()) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ea A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00eb  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0100 A[Catch: all -> 0x0156, TRY_LEAVE, TryCatch #2 {all -> 0x0156, blocks: (B:39:0x00f8, B:41:0x0100, B:51:0x0148), top: B:70:0x00f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0135  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0148 A[Catch: all -> 0x0156, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x0156, blocks: (B:39:0x00f8, B:41:0x0100, B:51:0x0148), top: B:70:0x00f8 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object firstOrNull(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$firstOrNull$3 channelsKt__Channels_commonKt$firstOrNull$3;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Object obj;
        Throwable cause$iv$iv;
        Function1 predicate;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z2;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 predicate2;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$firstOrNull$3) {
                channelsKt__Channels_commonKt$firstOrNull$3 = (ChannelsKt__Channels_commonKt$firstOrNull$3) continuation;
                if ((channelsKt__Channels_commonKt$firstOrNull$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$firstOrNull$3.label -= Integer.MIN_VALUE;
                    Object e$iv = channelsKt__Channels_commonKt$firstOrNull$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$firstOrNull$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$firstOrNull$3.L$6;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$5;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$firstOrNull$3.L$4;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$firstOrNull$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    hasNext = e$iv;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    predicate2 = predicate3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$firstOrNull$3.L$6;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$firstOrNull$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$firstOrNull$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$firstOrNull$3.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    predicate = predicate4;
                                    z2 = false;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return e$iv;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    obj = obj3;
                                    z = z2;
                                    try {
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$1 = predicate;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$5 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$firstOrNull$3.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$firstOrNull$3.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$firstOrNull$3);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        z2 = z;
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        predicate2 = predicate;
                                        cause$iv$iv2 = cause$iv$iv;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$4 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$5 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$firstOrNull$3.L$6 = channelIterator2;
                                                channelsKt__Channels_commonKt$firstOrNull$3.label = 2;
                                                Object next = channelIterator2.next(channelsKt__Channels_commonKt$firstOrNull$3);
                                                if (next == obj2) {
                                                    return obj2;
                                                }
                                                obj3 = obj2;
                                                e$iv = next;
                                                $receiver$iv5 = $receiver$iv3;
                                                predicate = predicate2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                if (!predicate.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Object e$iv2 = Unit.INSTANCE;
                                                return null;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            predicate = function1;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$5 = $receiver$iv2;
                            channelsKt__Channels_commonKt$firstOrNull$3.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$firstOrNull$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$firstOrNull$3);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$firstOrNull$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$firstOrNull$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.firstOrNull(null, null, this);
            }
        };
        Object e$iv3 = channelsKt__Channels_commonKt$firstOrNull$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$firstOrNull$3.label;
        if (i == 0) {
        }
    }

    private static final Object firstOrNull$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        i2 = 2;
                        return e$iv;
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return null;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(i2);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i2);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c6  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0102 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0103  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0116 A[Catch: all -> 0x0169, TRY_LEAVE, TryCatch #2 {all -> 0x0169, blocks: (B:39:0x010e, B:41:0x0116, B:54:0x015d), top: B:73:0x010e }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0141 A[Catch: all -> 0x016c, TRY_LEAVE, TryCatch #3 {all -> 0x016c, blocks: (B:35:0x00e9, B:46:0x013b, B:48:0x0141, B:52:0x014d), top: B:75:0x00e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x014b  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x015d A[Catch: all -> 0x0169, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x0169, blocks: (B:39:0x010e, B:41:0x0116, B:54:0x015d), top: B:73:0x010e }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object indexOf(ReceiveChannel<? extends E> receiveChannel, E e, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$indexOf$1 channelsKt__Channels_commonKt$indexOf$1;
        int i;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Throwable e$iv$iv;
        int $i$a$4$consume;
        Ref.IntRef index;
        int $i$a$4$consume2;
        ChannelIterator<E> channelIterator;
        Object element;
        Object element2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj;
        Object element3;
        int $i$a$4$consume3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$indexOf$1) {
                channelsKt__Channels_commonKt$indexOf$1 = (ChannelsKt__Channels_commonKt$indexOf$1) continuation;
                if ((channelsKt__Channels_commonKt$indexOf$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$indexOf$1.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$indexOf$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$indexOf$1.label;
                    int $i$a$4$consume4 = 0;
                    if (i == 0) {
                        if (i == 1) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$indexOf$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$6;
                            Throwable cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$indexOf$1.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$3;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$indexOf$1.L$2;
                            Object element4 = channelsKt__Channels_commonKt$indexOf$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    $i$a$4$consume3 = 0;
                                    element3 = element4;
                                    e$iv$iv = cause$iv$iv;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            $i$a$4$consume3 = 0;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$indexOf$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$6;
                            e$iv$iv = (Throwable) channelsKt__Channels_commonKt$indexOf$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$3;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$indexOf$1.L$2;
                            Object element5 = channelsKt__Channels_commonKt$indexOf$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOf$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    Object element6 = obj2;
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    element2 = element5;
                                    element = coroutine_suspended;
                                    $receiver = $receiver3;
                                    if (!Intrinsics.areEqual(element2, element6)) {
                                        return Boxing.boxInt(index.element);
                                    }
                                    try {
                                        index.element++;
                                        channelsKt__Channels_commonKt$indexOf$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$indexOf$1.L$1 = element2;
                                        channelsKt__Channels_commonKt$indexOf$1.L$2 = index;
                                        channelsKt__Channels_commonKt$indexOf$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$indexOf$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$indexOf$1.L$5 = e$iv$iv;
                                        channelsKt__Channels_commonKt$indexOf$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$indexOf$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$indexOf$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$indexOf$1);
                                        if (hasNext != element) {
                                            return element;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj = element;
                                        element3 = element2;
                                        $i$a$4$consume3 = $i$a$4$consume2;
                                        $i$a$4$consume4 = $i$a$4$consume;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$indexOf$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$indexOf$1.L$1 = element3;
                                                channelsKt__Channels_commonKt$indexOf$1.L$2 = index;
                                                channelsKt__Channels_commonKt$indexOf$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$indexOf$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$indexOf$1.L$5 = e$iv$iv;
                                                channelsKt__Channels_commonKt$indexOf$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$indexOf$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$indexOf$1.label = 2;
                                                element6 = channelIterator.next(channelsKt__Channels_commonKt$indexOf$1);
                                                if (element6 == obj) {
                                                    return obj;
                                                }
                                                element = obj;
                                                $receiver$iv5 = $receiver$iv3;
                                                element2 = element3;
                                                if (!Intrinsics.areEqual(element2, element6)) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                $receiver$iv$iv.cancel(e$iv$iv);
                                                return Boxing.boxInt(-1);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    $i$a$4$consume = $i$a$4$consume4;
                                    $i$a$4$consume2 = $i$a$4$consume3;
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        Ref.IntRef index2 = new Ref.IntRef();
                        index2.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        e$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            index = index2;
                            $i$a$4$consume = 0;
                            element2 = e;
                            $i$a$4$consume2 = 0;
                            element = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$indexOf$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$indexOf$1.L$1 = element2;
                            channelsKt__Channels_commonKt$indexOf$1.L$2 = index;
                            channelsKt__Channels_commonKt$indexOf$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$indexOf$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$indexOf$1.L$5 = e$iv$iv;
                            channelsKt__Channels_commonKt$indexOf$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$indexOf$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$indexOf$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$indexOf$1);
                            if (hasNext != element) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$indexOf$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$indexOf$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.indexOf(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$indexOf$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$indexOf$1.label;
        int $i$a$4$consume42 = 0;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r12v11 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r9v7 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0100 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0101  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0117 A[Catch: all -> 0x0186, TRY_LEAVE, TryCatch #1 {all -> 0x0186, blocks: (B:39:0x010f, B:41:0x0117, B:54:0x0173), top: B:71:0x010f }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x014f A[Catch: all -> 0x018b, TRY_LEAVE, TryCatch #3 {all -> 0x018b, blocks: (B:35:0x00e7, B:46:0x0143, B:48:0x014f, B:52:0x0165), top: B:75:0x00e7 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0173 A[Catch: all -> 0x0186, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0186, blocks: (B:39:0x010f, B:41:0x0117, B:54:0x0173), top: B:71:0x010f }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object indexOfFirst(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$indexOfFirst$1 channelsKt__Channels_commonKt$indexOfFirst$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Object obj;
        Ref.IntRef index;
        Throwable cause$iv$iv;
        Function1 predicate;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z2;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Ref.IntRef index2;
        Function1 predicate2;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$indexOfFirst$1) {
                channelsKt__Channels_commonKt$indexOfFirst$1 = (ChannelsKt__Channels_commonKt$indexOfFirst$1) continuation;
                if ((channelsKt__Channels_commonKt$indexOfFirst$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$indexOfFirst$1.label -= Integer.MIN_VALUE;
                    Object e$iv = channelsKt__Channels_commonKt$indexOfFirst$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$indexOfFirst$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$indexOfFirst$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$6;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$indexOfFirst$1.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$3;
                            Ref.IntRef index3 = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfFirst$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$indexOfFirst$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    hasNext = e$iv;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    index2 = index3;
                                    predicate2 = predicate3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$indexOfFirst$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$indexOfFirst$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$3;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfFirst$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$indexOfFirst$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfFirst$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    predicate = predicate4;
                                    z2 = false;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                        Integer boxInt = Boxing.boxInt(index.element);
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return boxInt;
                                    }
                                    try {
                                        index.element++;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$1 = predicate;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$2 = index;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$indexOfFirst$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$indexOfFirst$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        z2 = z;
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        index2 = index;
                                        predicate2 = predicate;
                                        cause$iv$iv2 = cause$iv$iv;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$2 = index2;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$5 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$indexOfFirst$1.label = 2;
                                                Object next = channelIterator2.next(channelsKt__Channels_commonKt$indexOfFirst$1);
                                                if (next == obj2) {
                                                    return obj2;
                                                }
                                                obj3 = obj2;
                                                e$iv = next;
                                                $receiver$iv5 = $receiver$iv3;
                                                predicate = predicate2;
                                                index = index2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                if (!predicate.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv2);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxInt(-1);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    obj = obj3;
                                    z = z2;
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        Ref.IntRef index4 = new Ref.IntRef();
                        index4.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            obj = coroutine_suspended;
                            index = index4;
                            $receiver = receiveChannel;
                            predicate = function1;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$1 = predicate;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$2 = index;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$indexOfFirst$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$indexOfFirst$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$indexOfFirst$1);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$indexOfFirst$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$indexOfFirst$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.indexOfFirst(null, null, this);
            }
        };
        Object e$iv2 = channelsKt__Channels_commonKt$indexOfFirst$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$indexOfFirst$1.label;
        if (i == 0) {
        }
    }

    private static final Object indexOfFirst$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        int index = 0;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            ChannelIterator it = $receiver.iterator();
            while (true) {
                InlineMarker.mark(i);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(i2);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(i);
                    Object e$iv = it.next(continuation);
                    InlineMarker.mark(i2);
                    try {
                        if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                            i2 = 2;
                            return Integer.valueOf(index);
                        }
                        index++;
                        i = 0;
                    } catch (Throwable th) {
                        e$iv$iv = th;
                        try {
                            throw e$iv$iv;
                        } finally {
                            InlineMarker.finallyStart(i2);
                            $receiver.cancel(e$iv$iv);
                            InlineMarker.finallyEnd(i2);
                        }
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    InlineMarker.finallyStart(i2);
                    $receiver.cancel(e$iv$iv);
                    InlineMarker.finallyEnd(i2);
                    return -1;
                }
            }
        } catch (Throwable th2) {
            e$iv$iv = th2;
        }
    }

    /* JADX INFO: Multiple debug info for r14v9 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('lastIndex' kotlin.jvm.internal.Ref$IntRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0121 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0122  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x013a A[Catch: all -> 0x019f, TRY_LEAVE, TryCatch #7 {all -> 0x019f, blocks: (B:41:0x0132, B:43:0x013a, B:56:0x018b), top: B:87:0x0132 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0170 A[Catch: all -> 0x0187, TryCatch #3 {all -> 0x0187, blocks: (B:48:0x0164, B:50:0x0170, B:52:0x0179), top: B:79:0x0164 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0177  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x018b A[Catch: all -> 0x019f, TRY_ENTER, TRY_LEAVE, TryCatch #7 {all -> 0x019f, blocks: (B:41:0x0132, B:43:0x013a, B:56:0x018b), top: B:87:0x0132 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object indexOfLast(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$indexOfLast$1 channelsKt__Channels_commonKt$indexOfLast$1;
        int i;
        boolean z;
        Object obj;
        Ref.IntRef index;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Ref.IntRef lastIndex;
        ReceiveChannel $receiver$iv$iv2;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        ReceiveChannel $receiver;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$indexOfLast$1) {
                channelsKt__Channels_commonKt$indexOfLast$1 = (ChannelsKt__Channels_commonKt$indexOfLast$1) continuation;
                if ((channelsKt__Channels_commonKt$indexOfLast$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$indexOfLast$1.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$indexOfLast$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$indexOfLast$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$indexOfLast$1.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$indexOfLast$1.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfLast$1.L$3;
                            lastIndex = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfLast$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$indexOfLast$1.L$1;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    z = false;
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate3;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv3 = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$indexOfLast$1.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$7;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$indexOfLast$1.L$6;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfLast$1.L$3;
                            lastIndex = (Ref.IntRef) channelsKt__Channels_commonKt$indexOfLast$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$indexOfLast$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$indexOfLast$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver = $receiver2;
                                    z = false;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    predicate2 = predicate4;
                                    obj = coroutine_suspended;
                                    try {
                                        try {
                                            try {
                                                if (!predicate2.invoke(it).booleanValue()) {
                                                    lastIndex.element = index.element;
                                                }
                                                index.element++;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$2 = lastIndex;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$3 = index;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$4 = $receiver$iv;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$5 = $receiver$iv$iv3;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$6 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$7 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$indexOfLast$1.L$8 = channelIterator2;
                                                channelsKt__Channels_commonKt$indexOfLast$1.label = 1;
                                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$indexOfLast$1);
                                                if (hasNext == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                it = hasNext;
                                                predicate = predicate2;
                                                obj = obj2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                $receiver$iv$iv2 = $receiver$iv$iv3;
                                                $receiver$iv$iv = $receiver;
                                                z = z2;
                                                try {
                                                    if (!((Boolean) it).booleanValue()) {
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$0 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$1 = predicate;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$2 = lastIndex;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$3 = index;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$5 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.label = 2;
                                                        it = channelIterator.next(channelsKt__Channels_commonKt$indexOfLast$1);
                                                        if (it == obj) {
                                                            return obj;
                                                        }
                                                        predicate2 = predicate;
                                                        $receiver = $receiver$iv$iv;
                                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                                        cause$iv$iv2 = cause$iv$iv;
                                                        channelIterator2 = channelIterator;
                                                        $receiver$iv6 = $receiver$iv2;
                                                        if (!predicate2.invoke(it).booleanValue()) {
                                                        }
                                                        index.element++;
                                                        $receiver$iv3 = $receiver$iv6;
                                                        obj2 = obj;
                                                        z2 = z;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$1 = predicate2;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$2 = lastIndex;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$3 = index;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$5 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$6 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$7 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$indexOfLast$1.label = 1;
                                                        hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$indexOfLast$1);
                                                        if (hasNext == obj2) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv2.cancel(cause$iv$iv);
                                                        InlineMarker.finallyEnd(1);
                                                        return Boxing.boxInt(lastIndex.element);
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                    $receiver$iv3 = $receiver$iv6;
                                    obj2 = obj;
                                    z2 = z;
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        Ref.IntRef lastIndex2 = new Ref.IntRef();
                        lastIndex2.element = -1;
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        index = intRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv3 = $receiver$iv;
                        cause$iv$iv2 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv3.iterator();
                            z2 = false;
                            lastIndex = lastIndex2;
                            $receiver$iv3 = $receiver$iv$iv3;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            predicate2 = function1;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$1 = predicate2;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$2 = lastIndex;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$3 = index;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$5 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$6 = cause$iv$iv2;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$7 = $receiver$iv3;
                            channelsKt__Channels_commonKt$indexOfLast$1.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$indexOfLast$1.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$indexOfLast$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv3.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$indexOfLast$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$indexOfLast$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.indexOfLast(null, null, this);
            }
        };
        Object it2 = channelsKt__Channels_commonKt$indexOfLast$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$indexOfLast$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object indexOfLast$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        int lastIndex = -1;
        int index = 0;
        int i = 0;
        Throwable cause$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        lastIndex = index;
                    }
                    index++;
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv);
                InlineMarker.finallyEnd(1);
                return Integer.valueOf(lastIndex);
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } catch (Throwable e$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv2;
            }
        }
    }

    /* JADX INFO: Multiple debug info for r9v10 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Can't wrap try/catch for region: R(7:2|(4:(2:4|(7:6|8|80|(1:(1:(1:(1:(3:14|15|(4:17|62|53|(1:55)(3:56|57|(5:59|(1:61)|62|53|(0)(0))(2:63|64)))(2:18|19))(2:20|21))(3:22|23|(3:25|57|(0)(0))(2:26|84)))(3:27|28|(3:30|53|(0)(0))(2:31|32)))(3:33|34|(1:36)(2:37|38)))(2:40|(4:42|82|43|(1:45)(1:46))(2:76|77))|81|47|(2:49|(1:51)(3:52|53|(0)(0)))(2:65|66)))|81|47|(0)(0))|7|8|80|(0)(0)|(2:(0)|(1:79))) */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x00e1, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00e4  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0115 A[Catch: all -> 0x0177, TRY_LEAVE, TryCatch #2 {all -> 0x0177, blocks: (B:47:0x010d, B:49:0x0115, B:65:0x016d, B:66:0x0176), top: B:81:0x010d }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0140 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x014f A[Catch: all -> 0x00e1, TRY_LEAVE, TryCatch #1 {all -> 0x00e1, blocks: (B:15:0x0052, B:18:0x0058, B:19:0x005c, B:23:0x0085, B:26:0x008b, B:28:0x00ac, B:31:0x00b2, B:32:0x00b6, B:34:0x00d4, B:37:0x00dc, B:38:0x00e0, B:53:0x012c, B:57:0x0147, B:59:0x014f), top: B:80:0x0028 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0168 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x016d A[Catch: all -> 0x0177, TRY_ENTER, TryCatch #2 {all -> 0x0177, blocks: (B:47:0x010d, B:49:0x0115, B:65:0x016d, B:66:0x0176), top: B:81:0x010d }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object last(ReceiveChannel<? extends E> receiveChannel, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$last$1 channelsKt__Channels_commonKt$last$1;
        Object last;
        int i;
        Throwable cause$iv;
        Throwable cause$iv2;
        boolean z;
        ReceiveChannel $receiver;
        ChannelIterator iterator;
        ReceiveChannel $receiver2;
        int $i$a$2$consume;
        int $i$a$2$consume2;
        ReceiveChannel $receiver3;
        ChannelIterator iterator2;
        Object last2;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$last$1) {
                channelsKt__Channels_commonKt$last$1 = (ChannelsKt__Channels_commonKt$last$1) continuation;
                if ((channelsKt__Channels_commonKt$last$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$last$1.label -= Integer.MIN_VALUE;
                    last = channelsKt__Channels_commonKt$last$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$last$1.label;
                    int $i$f$consume = 0;
                    ReceiveChannel $receiver$iv = null;
                    if (i == 0) {
                        if (i == 1) {
                            iterator = (ChannelIterator) channelsKt__Channels_commonKt$last$1.L$4;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$3;
                            cause$iv2 = (Throwable) channelsKt__Channels_commonKt$last$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$0;
                            if (!(last instanceof Result.Failure)) {
                                z = false;
                                $i$f$consume = 0;
                            } else {
                                throw ((Result.Failure) last).exception;
                            }
                        } else if (i == 2) {
                            $i$a$2$consume = 0;
                            iterator = (ChannelIterator) channelsKt__Channels_commonKt$last$1.L$4;
                            $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$3;
                            cause$iv2 = (Throwable) channelsKt__Channels_commonKt$last$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$0;
                            if (!(last instanceof Result.Failure)) {
                                channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                                channelsKt__Channels_commonKt$last$1.L$3 = $receiver2;
                                channelsKt__Channels_commonKt$last$1.L$4 = iterator;
                                channelsKt__Channels_commonKt$last$1.L$5 = last;
                                channelsKt__Channels_commonKt$last$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$last$1);
                                if (hasNext != coroutine_suspended) {
                                }
                            } else {
                                throw ((Result.Failure) last).exception;
                            }
                        } else if (i == 3) {
                            $i$a$2$consume2 = 0;
                            last2 = channelsKt__Channels_commonKt$last$1.L$5;
                            iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$last$1.L$4;
                            $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$3;
                            cause$iv2 = (Throwable) channelsKt__Channels_commonKt$last$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$0;
                            if (last instanceof Result.Failure) {
                                throw ((Result.Failure) last).exception;
                            }
                            if (((Boolean) last).booleanValue()) {
                            }
                        } else if (i == 4) {
                            $i$a$2$consume2 = 0;
                            Object last3 = channelsKt__Channels_commonKt$last$1.L$5;
                            iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$last$1.L$4;
                            $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$3;
                            cause$iv2 = (Throwable) channelsKt__Channels_commonKt$last$1.L$2;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$1;
                            receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$last$1.L$0;
                            if (!(last instanceof Result.Failure)) {
                                iterator = iterator2;
                                $receiver2 = $receiver3;
                                $i$a$2$consume = $i$a$2$consume2;
                                channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                                channelsKt__Channels_commonKt$last$1.L$3 = $receiver2;
                                channelsKt__Channels_commonKt$last$1.L$4 = iterator;
                                channelsKt__Channels_commonKt$last$1.L$5 = last;
                                channelsKt__Channels_commonKt$last$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$last$1);
                                if (hasNext != coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                last2 = last;
                                last = hasNext;
                                $i$a$2$consume2 = $i$a$2$consume;
                                $receiver3 = $receiver2;
                                iterator2 = iterator;
                                if (((Boolean) last).booleanValue()) {
                                    return last2;
                                }
                                channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$last$1.L$2 = cause$iv;
                                channelsKt__Channels_commonKt$last$1.L$3 = $receiver3;
                                channelsKt__Channels_commonKt$last$1.L$4 = iterator2;
                                channelsKt__Channels_commonKt$last$1.L$5 = last2;
                                channelsKt__Channels_commonKt$last$1.label = 4;
                                last = iterator2.next(channelsKt__Channels_commonKt$last$1);
                                if (last == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                iterator = iterator2;
                                $receiver2 = $receiver3;
                                $i$a$2$consume = $i$a$2$consume2;
                                channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                                channelsKt__Channels_commonKt$last$1.L$3 = $receiver2;
                                channelsKt__Channels_commonKt$last$1.L$4 = iterator;
                                channelsKt__Channels_commonKt$last$1.L$5 = last;
                                channelsKt__Channels_commonKt$last$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$last$1);
                                if (hasNext != coroutine_suspended) {
                                }
                            } else {
                                throw ((Result.Failure) last).exception;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(last instanceof Result.Failure)) {
                        cause$iv2 = null;
                        try {
                            ChannelIterator iterator3 = receiveChannel.iterator();
                            channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                            channelsKt__Channels_commonKt$last$1.L$1 = receiveChannel;
                            channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                            channelsKt__Channels_commonKt$last$1.L$3 = receiveChannel;
                            channelsKt__Channels_commonKt$last$1.L$4 = iterator3;
                            channelsKt__Channels_commonKt$last$1.label = 1;
                            Object hasNext2 = iterator3.hasNext(channelsKt__Channels_commonKt$last$1);
                            if (hasNext2 == coroutine_suspended) {
                                return coroutine_suspended;
                            }
                            $receiver$iv = receiveChannel;
                            last = hasNext2;
                            $receiver = receiveChannel;
                            z = false;
                            iterator = iterator3;
                        } catch (Throwable th) {
                            cause$iv = th;
                            $receiver$iv = receiveChannel;
                            try {
                                throw cause$iv;
                            } finally {
                                $receiver$iv.cancel(cause$iv);
                            }
                        }
                    } else {
                        throw ((Result.Failure) last).exception;
                    }
                    if (!((Boolean) last).booleanValue()) {
                        channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                        channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                        channelsKt__Channels_commonKt$last$1.L$3 = $receiver;
                        channelsKt__Channels_commonKt$last$1.L$4 = iterator;
                        channelsKt__Channels_commonKt$last$1.label = 2;
                        last = iterator.next(channelsKt__Channels_commonKt$last$1);
                        if (last == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver2 = $receiver;
                        $i$a$2$consume = $i$f$consume;
                        channelsKt__Channels_commonKt$last$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$last$1.L$1 = $receiver$iv;
                        channelsKt__Channels_commonKt$last$1.L$2 = cause$iv2;
                        channelsKt__Channels_commonKt$last$1.L$3 = $receiver2;
                        channelsKt__Channels_commonKt$last$1.L$4 = iterator;
                        channelsKt__Channels_commonKt$last$1.L$5 = last;
                        channelsKt__Channels_commonKt$last$1.label = 3;
                        hasNext = iterator.hasNext(channelsKt__Channels_commonKt$last$1);
                        if (hasNext != coroutine_suspended) {
                        }
                    } else {
                        throw new NoSuchElementException("ReceiveChannel is empty.");
                    }
                }
            }
            if (!((Boolean) last).booleanValue()) {
            }
        } catch (Throwable th2) {
            cause$iv = th2;
            throw cause$iv;
        }
        channelsKt__Channels_commonKt$last$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$last$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                this.result = obj;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.last(null, this);
            }
        };
        last = channelsKt__Channels_commonKt$last$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$last$1.label;
        int $i$f$consume2 = 0;
        ReceiveChannel $receiver$iv2 = null;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r14v9 java.lang.Object: [D('found' kotlin.jvm.internal.Ref$BooleanRef), D('last' kotlin.jvm.internal.Ref$ObjectRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0120 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0139 A[Catch: all -> 0x01ac, TRY_LEAVE, TryCatch #8 {all -> 0x01ac, blocks: (B:41:0x0131, B:43:0x0139, B:59:0x018d), top: B:96:0x0131 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x016f A[Catch: all -> 0x0187, TRY_LEAVE, TryCatch #5 {all -> 0x0187, blocks: (B:48:0x0163, B:50:0x016f), top: B:90:0x0163 }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x017d  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x018d A[Catch: all -> 0x01ac, TRY_ENTER, TRY_LEAVE, TryCatch #8 {all -> 0x01ac, blocks: (B:41:0x0131, B:43:0x0139, B:59:0x018d), top: B:96:0x0131 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object last(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$last$3 channelsKt__Channels_commonKt$last$3;
        int i;
        boolean z;
        Object obj;
        Ref.BooleanRef found;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Ref.ObjectRef last;
        ReceiveChannel $receiver$iv$iv2;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        ReceiveChannel $receiver;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        ChannelsKt__Channels_commonKt$last$3 channelsKt__Channels_commonKt$last$32;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$last$3) {
                channelsKt__Channels_commonKt$last$3 = (ChannelsKt__Channels_commonKt$last$3) continuation;
                if ((channelsKt__Channels_commonKt$last$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$last$3.label -= Integer.MIN_VALUE;
                    Object it = (Object) channelsKt__Channels_commonKt$last$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$last$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$last$3.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$last$3.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$4;
                            found = (Ref.BooleanRef) channelsKt__Channels_commonKt$last$3.L$3;
                            last = (Ref.ObjectRef) channelsKt__Channels_commonKt$last$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$last$3.L$1;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    z = false;
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate3;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv3 = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$last$3.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$7;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$last$3.L$6;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$4;
                            found = (Ref.BooleanRef) channelsKt__Channels_commonKt$last$3.L$3;
                            last = (Ref.ObjectRef) channelsKt__Channels_commonKt$last$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$last$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$last$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver = $receiver2;
                                    z = false;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    predicate2 = predicate4;
                                    obj = coroutine_suspended;
                                    try {
                                        try {
                                            try {
                                                if (!predicate2.invoke(it).booleanValue()) {
                                                    try {
                                                        last.element = (T) it;
                                                        found.element = true;
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                    channelsKt__Channels_commonKt$last$32 = channelsKt__Channels_commonKt$last$3;
                                                } else {
                                                    channelsKt__Channels_commonKt$last$32 = channelsKt__Channels_commonKt$last$3;
                                                }
                                                channelsKt__Channels_commonKt$last$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$last$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$last$3.L$2 = last;
                                                channelsKt__Channels_commonKt$last$3.L$3 = found;
                                                channelsKt__Channels_commonKt$last$3.L$4 = $receiver$iv;
                                                channelsKt__Channels_commonKt$last$3.L$5 = $receiver$iv$iv3;
                                                channelsKt__Channels_commonKt$last$3.L$6 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$last$3.L$7 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$last$3.L$8 = channelIterator2;
                                                channelsKt__Channels_commonKt$last$3.label = 1;
                                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$last$3);
                                                if (hasNext == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                it = (Object) hasNext;
                                                predicate = predicate2;
                                                obj = obj2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                $receiver$iv$iv2 = $receiver$iv$iv3;
                                                $receiver$iv$iv = $receiver;
                                                z = z2;
                                                try {
                                                    if (!((Boolean) it).booleanValue()) {
                                                        channelsKt__Channels_commonKt$last$3.L$0 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$last$3.L$1 = predicate;
                                                        channelsKt__Channels_commonKt$last$3.L$2 = last;
                                                        channelsKt__Channels_commonKt$last$3.L$3 = found;
                                                        channelsKt__Channels_commonKt$last$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$last$3.L$5 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$last$3.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$last$3.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$last$3.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$last$3.label = 2;
                                                        it = (Object) channelIterator.next(channelsKt__Channels_commonKt$last$3);
                                                        if (it == obj) {
                                                            return obj;
                                                        }
                                                        predicate2 = predicate;
                                                        $receiver = $receiver$iv$iv;
                                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                                        cause$iv$iv2 = cause$iv$iv;
                                                        channelIterator2 = channelIterator;
                                                        $receiver$iv6 = $receiver$iv2;
                                                        if (!predicate2.invoke(it).booleanValue()) {
                                                        }
                                                        channelsKt__Channels_commonKt$last$3 = channelsKt__Channels_commonKt$last$32;
                                                        $receiver$iv3 = $receiver$iv6;
                                                        obj2 = obj;
                                                        z2 = z;
                                                        channelsKt__Channels_commonKt$last$3.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$last$3.L$1 = predicate2;
                                                        channelsKt__Channels_commonKt$last$3.L$2 = last;
                                                        channelsKt__Channels_commonKt$last$3.L$3 = found;
                                                        channelsKt__Channels_commonKt$last$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$last$3.L$5 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$last$3.L$6 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$last$3.L$7 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$last$3.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$last$3.label = 1;
                                                        hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$last$3);
                                                        if (hasNext == obj2) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv2.cancel(cause$iv$iv);
                                                        InlineMarker.finallyEnd(1);
                                                        if (found.element) {
                                                            return last.element;
                                                        }
                                                        throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                        channelsKt__Channels_commonKt$last$3 = channelsKt__Channels_commonKt$last$32;
                                        $receiver$iv3 = $receiver$iv6;
                                        obj2 = obj;
                                        z2 = z;
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        Ref.ObjectRef last2 = new Ref.ObjectRef();
                        last2.element = null;
                        Ref.BooleanRef booleanRef = new Ref.BooleanRef();
                        booleanRef.element = false;
                        found = booleanRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv3 = $receiver$iv;
                        cause$iv$iv2 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv3.iterator();
                            z2 = false;
                            last = last2;
                            $receiver$iv3 = $receiver$iv$iv3;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            predicate2 = function1;
                            channelsKt__Channels_commonKt$last$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$last$3.L$1 = predicate2;
                            channelsKt__Channels_commonKt$last$3.L$2 = last;
                            channelsKt__Channels_commonKt$last$3.L$3 = found;
                            channelsKt__Channels_commonKt$last$3.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$last$3.L$5 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$last$3.L$6 = cause$iv$iv2;
                            channelsKt__Channels_commonKt$last$3.L$7 = $receiver$iv3;
                            channelsKt__Channels_commonKt$last$3.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$last$3.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$last$3);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv3.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$last$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$last$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.last(null, null, this);
            }
        };
        Object it2 = (Object) channelsKt__Channels_commonKt$last$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$last$3.label;
        if (i == 0) {
        }
    }

    private static final Object last$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Object last = null;
        boolean found = false;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (!((Boolean) hasNext).booleanValue()) {
                break;
            }
            InlineMarker.mark(i);
            Object e$iv = it.next(continuation);
            InlineMarker.mark(i2);
            try {
                if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                    last = e$iv;
                    found = true;
                }
                i = 0;
                i2 = 1;
            } catch (Throwable th2) {
                e$iv$iv = th2;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
        Unit unit = Unit.INSTANCE;
        if (found) {
            return last;
        }
        throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
    }

    /* JADX INFO: Multiple debug info for r14v13 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('lastIndex' kotlin.jvm.internal.Ref$IntRef)] */
    /* JADX INFO: Multiple debug info for r4v14 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('lastIndex' kotlin.jvm.internal.Ref$IntRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d5  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x011d A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x011e  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0130 A[Catch: all -> 0x0196, TRY_LEAVE, TryCatch #2 {all -> 0x0196, blocks: (B:39:0x0128, B:41:0x0130, B:54:0x0189), top: B:74:0x0128 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0166 A[Catch: all -> 0x017f, TryCatch #6 {all -> 0x017f, blocks: (B:46:0x0160, B:48:0x0166, B:50:0x016f), top: B:82:0x0160 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x016d  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0189 A[Catch: all -> 0x0196, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x0196, blocks: (B:39:0x0128, B:41:0x0130, B:54:0x0189), top: B:74:0x0128 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object lastIndexOf(ReceiveChannel<? extends E> receiveChannel, E e, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$lastIndexOf$1 channelsKt__Channels_commonKt$lastIndexOf$1;
        int i;
        int $i$f$consumeEach;
        Object $i$f$consumeEach2;
        Ref.IntRef index;
        int $i$f$consume;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        int $receiver$iv$iv2;
        ChannelIterator<E> channelIterator;
        Object obj;
        Throwable cause$iv$iv;
        Ref.IntRef lastIndex;
        Object element;
        Object element2;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        int i2;
        Object $receiver;
        Object element3;
        ReceiveChannel $receiver$iv3;
        Ref.IntRef lastIndex2;
        Throwable cause$iv$iv2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$lastIndexOf$1) {
                channelsKt__Channels_commonKt$lastIndexOf$1 = (ChannelsKt__Channels_commonKt$lastIndexOf$1) continuation;
                if ((channelsKt__Channels_commonKt$lastIndexOf$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$lastIndexOf$1.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$lastIndexOf$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$lastIndexOf$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach2 = null;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$lastIndexOf$1.L$8;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$7;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$lastIndexOf$1.L$6;
                            ReceiveChannel $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$5;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$lastIndexOf$1.L$3;
                            Ref.IntRef lastIndex3 = (Ref.IntRef) channelsKt__Channels_commonKt$lastIndexOf$1.L$2;
                            Object element4 = channelsKt__Channels_commonKt$lastIndexOf$1.L$1;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    i2 = 0;
                                    obj = coroutine_suspended;
                                    element3 = element4;
                                    cause$iv$iv2 = cause$iv$iv3;
                                    $receiver$iv$iv2 = 0;
                                    lastIndex2 = lastIndex3;
                                    $receiver$iv = $receiver$iv4;
                                    $receiver$iv$iv = $receiver$iv$iv3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv3;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$lastIndexOf$1.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$7;
                            Throwable cause$iv$iv4 = (Throwable) channelsKt__Channels_commonKt$lastIndexOf$1.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$lastIndexOf$1.L$3;
                            Ref.IntRef lastIndex4 = (Ref.IntRef) channelsKt__Channels_commonKt$lastIndexOf$1.L$2;
                            Object element5 = channelsKt__Channels_commonKt$lastIndexOf$1.L$1;
                            Object $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$lastIndexOf$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    element = element5;
                                    i2 = 0;
                                    Object element6 = null;
                                    int $i$f$consumeEach3 = 0;
                                    int $i$f$consume2 = 0;
                                    Object obj3 = coroutine_suspended;
                                    element2 = $receiver2;
                                    cause$iv$iv = cause$iv$iv4;
                                    lastIndex = lastIndex4;
                                    Object e$iv = obj2;
                                    try {
                                        try {
                                            if (!Intrinsics.areEqual(element, e$iv)) {
                                                lastIndex.element = index.element;
                                            }
                                            index.element++;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$0 = element2;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$1 = element;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$2 = lastIndex;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$3 = index;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$4 = $receiver$iv;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$5 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$6 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$7 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.L$8 = channelIterator;
                                            channelsKt__Channels_commonKt$lastIndexOf$1.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastIndexOf$1);
                                            if (hasNext == obj) {
                                                return obj;
                                            }
                                            i2 = $i$f$consumeEach;
                                            $receiver = element2;
                                            element3 = element;
                                            $receiver$iv3 = $receiver$iv2;
                                            lastIndex2 = lastIndex;
                                            cause$iv$iv2 = cause$iv$iv;
                                            try {
                                                if (!((Boolean) hasNext).booleanValue()) {
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$1 = element3;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$2 = lastIndex2;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$3 = index;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$4 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$6 = cause$iv$iv2;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$7 = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$lastIndexOf$1);
                                                    if (e$iv == obj) {
                                                        return obj;
                                                    }
                                                    element = element3;
                                                    element2 = $receiver;
                                                    element6 = $i$f$consumeEach2;
                                                    $i$f$consumeEach3 = $i$f$consume;
                                                    $i$f$consume2 = $receiver$iv$iv2;
                                                    obj3 = obj;
                                                    $receiver$iv6 = $receiver$iv3;
                                                    cause$iv$iv = cause$iv$iv2;
                                                    lastIndex = lastIndex2;
                                                    if (!Intrinsics.areEqual(element, e$iv)) {
                                                    }
                                                    index.element++;
                                                    $receiver$iv2 = $receiver$iv6;
                                                    obj = obj3;
                                                    $receiver$iv$iv2 = $i$f$consume2;
                                                    $i$f$consume = $i$f$consumeEach3;
                                                    $i$f$consumeEach2 = element6;
                                                    $i$f$consumeEach = i2;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$0 = element2;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$1 = element;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$2 = lastIndex;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$3 = index;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$4 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$7 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$lastIndexOf$1.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastIndexOf$1);
                                                    if (hasNext == obj) {
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    $receiver$iv$iv.cancel(cause$iv$iv2);
                                                    return Boxing.boxInt(lastIndex2.element);
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                        $receiver$iv2 = $receiver$iv6;
                                        obj = obj3;
                                        $receiver$iv$iv2 = $i$f$consume2;
                                        $i$f$consume = $i$f$consumeEach3;
                                        $i$f$consumeEach2 = element6;
                                        $i$f$consumeEach = i2;
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        Ref.IntRef lastIndex5 = new Ref.IntRef();
                        lastIndex5.element = -1;
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        index = intRef;
                        $receiver$iv = receiveChannel;
                        $i$f$consumeEach2 = null;
                        $receiver$iv$iv = $receiver$iv;
                        $i$f$consume = 0;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            $i$f$consumeEach = 0;
                            $receiver$iv$iv2 = 0;
                            obj = coroutine_suspended;
                            lastIndex = lastIndex5;
                            element2 = receiveChannel;
                            element = e;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$0 = element2;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$1 = element;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$2 = lastIndex;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$3 = index;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$7 = $receiver$iv2;
                            channelsKt__Channels_commonKt$lastIndexOf$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$lastIndexOf$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastIndexOf$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            $receiver$iv$iv.cancel(e$iv$iv);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$lastIndexOf$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$lastIndexOf$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.lastIndexOf(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$lastIndexOf$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$lastIndexOf$1.label;
        if (i == 0) {
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: SSATransform
        jadx.core.utils.exceptions.JadxRuntimeException: Not initialized variable reg: 12, insn: 0x009a: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$receiver' kotlinx.coroutines.channels.ReceiveChannel)]), block:B:28:0x0099
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVarsInBlock(SSATransform.java:171)
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVariables(SSATransform.java:143)
        	at jadx.core.dex.visitors.ssa.SSATransform.process(SSATransform.java:60)
        	at jadx.core.dex.visitors.ssa.SSATransform.visit(SSATransform.java:41)
        */
    public static final <E> java.lang.Object lastOrNull(
    /*  JADX ERROR: JadxRuntimeException in pass: SSATransform
        jadx.core.utils.exceptions.JadxRuntimeException: Not initialized variable reg: 12, insn: 0x009a: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$receiver' kotlinx.coroutines.channels.ReceiveChannel)]), block:B:28:0x0099
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVarsInBlock(SSATransform.java:171)
        	at jadx.core.dex.visitors.ssa.SSATransform.renameVariables(SSATransform.java:143)
        	at jadx.core.dex.visitors.ssa.SSATransform.process(SSATransform.java:60)
        */
    /*  JADX ERROR: Method generation error
        jadx.core.utils.exceptions.JadxRuntimeException: Code variable not set in r17v0 ??
        	at jadx.core.dex.instructions.args.SSAVar.getCodeVar(SSAVar.java:228)
        	at jadx.core.codegen.MethodGen.addMethodArguments(MethodGen.java:198)
        	at jadx.core.codegen.MethodGen.addDefinition(MethodGen.java:151)
        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:364)
        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:304)
        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:270)
        	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
        	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
        */

    /* JADX INFO: Multiple debug info for r12v9 java.lang.Object: [D('last' kotlin.jvm.internal.Ref$ObjectRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('last' kotlin.jvm.internal.Ref$ObjectRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0109 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x010a  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x011f A[Catch: all -> 0x016a, TRY_LEAVE, TryCatch #4 {all -> 0x016a, blocks: (B:39:0x0117, B:41:0x011f, B:50:0x015a), top: B:74:0x0117 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0155 A[Catch: all -> 0x016d, TRY_LEAVE, TryCatch #5 {all -> 0x016d, blocks: (B:35:0x00f0, B:46:0x0149, B:48:0x0155), top: B:76:0x00f0 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x015a A[Catch: all -> 0x016a, TRY_ENTER, TRY_LEAVE, TryCatch #4 {all -> 0x016a, blocks: (B:39:0x0117, B:41:0x011f, B:50:0x015a), top: B:74:0x0117 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object lastOrNull(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$lastOrNull$3 channelsKt__Channels_commonKt$lastOrNull$3;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Object obj;
        Throwable cause$iv$iv;
        Ref.ObjectRef last;
        Function1 predicate;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z2;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 predicate2;
        Ref.ObjectRef last2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$lastOrNull$3) {
                channelsKt__Channels_commonKt$lastOrNull$3 = (ChannelsKt__Channels_commonKt$lastOrNull$3) continuation;
                if ((channelsKt__Channels_commonKt$lastOrNull$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$lastOrNull$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$lastOrNull$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$lastOrNull$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$lastOrNull$3.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$6;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$lastOrNull$3.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$3;
                            last2 = (Ref.ObjectRef) channelsKt__Channels_commonKt$lastOrNull$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$lastOrNull$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    cause$iv$iv = cause$iv$iv2;
                                    predicate2 = predicate3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$lastOrNull$3.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$6;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$lastOrNull$3.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$3;
                            Ref.ObjectRef last3 = (Ref.ObjectRef) channelsKt__Channels_commonKt$lastOrNull$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$lastOrNull$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$lastOrNull$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    cause$iv$iv = cause$iv$iv3;
                                    last = last3;
                                    z2 = false;
                                    Object e$iv = (Object) obj3;
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate4;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        if (predicate.invoke(e$iv).booleanValue()) {
                                            last.element = (T) e$iv;
                                        }
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$1 = predicate;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$2 = last;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$lastOrNull$3.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$lastOrNull$3.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastOrNull$3);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        z2 = z;
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        predicate2 = predicate;
                                        last2 = last;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$2 = last2;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$lastOrNull$3.label = 2;
                                                e$iv = (Object) channelIterator2.next(channelsKt__Channels_commonKt$lastOrNull$3);
                                                if (e$iv == obj2) {
                                                    return obj2;
                                                }
                                                obj = obj2;
                                                $receiver$iv2 = $receiver$iv3;
                                                predicate = predicate2;
                                                channelIterator = channelIterator2;
                                                last = last2;
                                                if (predicate.invoke(e$iv).booleanValue()) {
                                                }
                                                z = z2;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$1 = predicate;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$2 = last;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$lastOrNull$3.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$lastOrNull$3.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastOrNull$3);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                return last2.element;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    z = z2;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        Ref.ObjectRef last4 = new Ref.ObjectRef();
                        last4.element = null;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        Throwable cause$iv$iv4 = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            obj = coroutine_suspended;
                            cause$iv$iv = cause$iv$iv4;
                            $receiver = receiveChannel;
                            last = last4;
                            predicate = function1;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$2 = last;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$lastOrNull$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$lastOrNull$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$lastOrNull$3);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$lastOrNull$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$lastOrNull$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.lastOrNull(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$lastOrNull$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$lastOrNull$3.label;
        if (i == 0) {
        }
    }

    private static final Object lastOrNull$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Object last = null;
        int i = 0;
        Throwable e$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        last = e$iv;
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return last;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(1:(4:13|83|14|(3:16|56|(2:58|59)(2:60|61))(2:17|18))(2:21|22))(4:23|76|24|(3:26|52|(1:54)(3:55|56|(0)(0)))(2:27|28)))(4:31|78|32|(1:34)(2:35|36))|67|74|68)(2:39|(4:41|81|42|(1:44)(1:45))(2:72|73))|80|46|(2:48|(1:50)(3:51|52|(0)(0)))(2:62|63)))|7|8|(0)(0)|80|46|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:64:0x0147, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0029  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00c7  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00f7 A[Catch: all -> 0x0147, TryCatch #3 {all -> 0x0147, blocks: (B:46:0x00ef, B:48:0x00f7, B:52:0x010b, B:62:0x013d, B:63:0x0146), top: B:80:0x00ef }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0120 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x012f A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0133 A[Catch: all -> 0x005a, TRY_ENTER, TryCatch #5 {all -> 0x005a, blocks: (B:14:0x004f, B:17:0x0055, B:18:0x0059, B:56:0x0126, B:60:0x0133, B:61:0x013c), top: B:83:0x004f }] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x013d A[Catch: all -> 0x0147, TRY_ENTER, TryCatch #3 {all -> 0x0147, blocks: (B:46:0x00ef, B:48:0x00f7, B:52:0x010b, B:62:0x013d, B:63:0x0146), top: B:80:0x00ef }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object single(ReceiveChannel<? extends E> receiveChannel, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$single$1 channelsKt__Channels_commonKt$single$1;
        Object single;
        int i;
        boolean z;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        ChannelIterator iterator;
        ReceiveChannel $receiver2;
        Object single2;
        Object hasNext;
        if (continuation instanceof ChannelsKt__Channels_commonKt$single$1) {
            channelsKt__Channels_commonKt$single$1 = (ChannelsKt__Channels_commonKt$single$1) continuation;
            if ((channelsKt__Channels_commonKt$single$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$single$1.label -= Integer.MIN_VALUE;
                single = channelsKt__Channels_commonKt$single$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$single$1.label;
                boolean z2 = false;
                if (i == 0) {
                    if (i == 1) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$single$1.L$4;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$3;
                        Throwable cause$iv2 = (Throwable) channelsKt__Channels_commonKt$single$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$0;
                        try {
                            if (!(single instanceof Result.Failure)) {
                                $receiver = $receiver3;
                                cause$iv = cause$iv2;
                                z = false;
                                z2 = false;
                            } else {
                                throw ((Result.Failure) single).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                        }
                    } else if (i == 2) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$single$1.L$4;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$3;
                        Throwable cause$iv3 = (Throwable) channelsKt__Channels_commonKt$single$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$0;
                        try {
                            if (!(single instanceof Result.Failure)) {
                                z = false;
                                z2 = false;
                                cause$iv = cause$iv3;
                                channelsKt__Channels_commonKt$single$1.L$0 = receiveChannel;
                                channelsKt__Channels_commonKt$single$1.L$1 = $receiver$iv;
                                channelsKt__Channels_commonKt$single$1.L$2 = cause$iv;
                                channelsKt__Channels_commonKt$single$1.L$3 = $receiver2;
                                channelsKt__Channels_commonKt$single$1.L$4 = iterator;
                                channelsKt__Channels_commonKt$single$1.L$5 = single;
                                channelsKt__Channels_commonKt$single$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$single$1);
                                if (hasNext != coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                single2 = single;
                                single = hasNext;
                                if (((Boolean) single).booleanValue()) {
                                }
                            } else {
                                throw ((Result.Failure) single).exception;
                            }
                        } catch (Throwable th2) {
                            cause$iv = th2;
                        }
                    } else if (i == 3) {
                        single2 = channelsKt__Channels_commonKt$single$1.L$5;
                        ChannelIterator iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$single$1.L$4;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$3;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$single$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$1;
                        ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$single$1.L$0;
                        try {
                            if (single instanceof Result.Failure) {
                                throw ((Result.Failure) single).exception;
                            } else if (((Boolean) single).booleanValue()) {
                                return single2;
                            } else {
                                throw new IllegalArgumentException("ReceiveChannel has more than one element.");
                            }
                        } catch (Throwable th3) {
                            cause$iv = th3;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw cause$iv;
                    } finally {
                        $receiver$iv.cancel(cause$iv);
                    }
                } else if (!(single instanceof Result.Failure)) {
                    Throwable cause$iv4 = null;
                    $receiver = receiveChannel;
                    try {
                        ChannelIterator iterator3 = $receiver.iterator();
                        channelsKt__Channels_commonKt$single$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$single$1.L$1 = receiveChannel;
                        channelsKt__Channels_commonKt$single$1.L$2 = cause$iv4;
                        channelsKt__Channels_commonKt$single$1.L$3 = $receiver;
                        channelsKt__Channels_commonKt$single$1.L$4 = iterator3;
                        channelsKt__Channels_commonKt$single$1.label = 1;
                        Object hasNext2 = iterator3.hasNext(channelsKt__Channels_commonKt$single$1);
                        if (hasNext2 == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv = receiveChannel;
                        single = hasNext2;
                        cause$iv = cause$iv4;
                        z = false;
                        iterator = iterator3;
                    } catch (Throwable th4) {
                        cause$iv = th4;
                        $receiver$iv = receiveChannel;
                    }
                } else {
                    throw ((Result.Failure) single).exception;
                }
                if (!((Boolean) single).booleanValue()) {
                    channelsKt__Channels_commonKt$single$1.L$0 = receiveChannel;
                    channelsKt__Channels_commonKt$single$1.L$1 = $receiver$iv;
                    channelsKt__Channels_commonKt$single$1.L$2 = cause$iv;
                    channelsKt__Channels_commonKt$single$1.L$3 = $receiver;
                    channelsKt__Channels_commonKt$single$1.L$4 = iterator;
                    channelsKt__Channels_commonKt$single$1.label = 2;
                    single = iterator.next(channelsKt__Channels_commonKt$single$1);
                    if (single == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                    $receiver2 = $receiver;
                    channelsKt__Channels_commonKt$single$1.L$0 = receiveChannel;
                    channelsKt__Channels_commonKt$single$1.L$1 = $receiver$iv;
                    channelsKt__Channels_commonKt$single$1.L$2 = cause$iv;
                    channelsKt__Channels_commonKt$single$1.L$3 = $receiver2;
                    channelsKt__Channels_commonKt$single$1.L$4 = iterator;
                    channelsKt__Channels_commonKt$single$1.L$5 = single;
                    channelsKt__Channels_commonKt$single$1.label = 3;
                    hasNext = iterator.hasNext(channelsKt__Channels_commonKt$single$1);
                    if (hasNext != coroutine_suspended) {
                    }
                } else {
                    throw new NoSuchElementException("ReceiveChannel is empty.");
                }
            }
        }
        channelsKt__Channels_commonKt$single$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$single$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                this.result = obj;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.single(null, this);
            }
        };
        single = channelsKt__Channels_commonKt$single$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$single$1.label;
        boolean z22 = false;
        if (i == 0) {
        }
        if (!((Boolean) single).booleanValue()) {
        }
    }

    /* JADX INFO: Multiple debug info for r14v9 java.lang.Object: [D('found' kotlin.jvm.internal.Ref$BooleanRef), D('single' kotlin.jvm.internal.Ref$ObjectRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0120 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0139 A[Catch: all -> 0x01ba, TRY_LEAVE, TryCatch #7 {all -> 0x01ba, blocks: (B:41:0x0131, B:43:0x0139, B:62:0x019b), top: B:97:0x0131 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x018b  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x019b A[Catch: all -> 0x01ba, TRY_ENTER, TRY_LEAVE, TryCatch #7 {all -> 0x01ba, blocks: (B:41:0x0131, B:43:0x0139, B:62:0x019b), top: B:97:0x0131 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object single(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$single$3 channelsKt__Channels_commonKt$single$3;
        int i;
        boolean z;
        Object obj;
        Ref.BooleanRef found;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Ref.ObjectRef single;
        ReceiveChannel $receiver$iv$iv2;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        ReceiveChannel $receiver;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        ChannelsKt__Channels_commonKt$single$3 channelsKt__Channels_commonKt$single$32;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$single$3) {
                channelsKt__Channels_commonKt$single$3 = (ChannelsKt__Channels_commonKt$single$3) continuation;
                if ((channelsKt__Channels_commonKt$single$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$single$3.label -= Integer.MIN_VALUE;
                    Object it = (Object) channelsKt__Channels_commonKt$single$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$single$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$single$3.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$single$3.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$4;
                            found = (Ref.BooleanRef) channelsKt__Channels_commonKt$single$3.L$3;
                            single = (Ref.ObjectRef) channelsKt__Channels_commonKt$single$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$single$3.L$1;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    z = false;
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate3;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv3 = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$single$3.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$7;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$single$3.L$6;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$4;
                            found = (Ref.BooleanRef) channelsKt__Channels_commonKt$single$3.L$3;
                            single = (Ref.ObjectRef) channelsKt__Channels_commonKt$single$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$single$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$single$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver = $receiver2;
                                    z = false;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    predicate2 = predicate4;
                                    obj = coroutine_suspended;
                                    try {
                                        try {
                                            try {
                                                if (!predicate2.invoke(it).booleanValue()) {
                                                    channelsKt__Channels_commonKt$single$32 = channelsKt__Channels_commonKt$single$3;
                                                    try {
                                                        if (!found.element) {
                                                            single.element = (T) it;
                                                            found.element = true;
                                                        } else {
                                                            throw new IllegalArgumentException("ReceiveChannel contains more than one matching element.");
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } else {
                                                    channelsKt__Channels_commonKt$single$32 = channelsKt__Channels_commonKt$single$3;
                                                }
                                                channelsKt__Channels_commonKt$single$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$single$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$single$3.L$2 = single;
                                                channelsKt__Channels_commonKt$single$3.L$3 = found;
                                                channelsKt__Channels_commonKt$single$3.L$4 = $receiver$iv;
                                                channelsKt__Channels_commonKt$single$3.L$5 = $receiver$iv$iv3;
                                                channelsKt__Channels_commonKt$single$3.L$6 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$single$3.L$7 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$single$3.L$8 = channelIterator2;
                                                channelsKt__Channels_commonKt$single$3.label = 1;
                                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$single$3);
                                                if (hasNext == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                it = (Object) hasNext;
                                                predicate = predicate2;
                                                obj = obj2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                $receiver$iv$iv2 = $receiver$iv$iv3;
                                                $receiver$iv$iv = $receiver;
                                                z = z2;
                                                try {
                                                    if (!((Boolean) it).booleanValue()) {
                                                        channelsKt__Channels_commonKt$single$3.L$0 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$single$3.L$1 = predicate;
                                                        channelsKt__Channels_commonKt$single$3.L$2 = single;
                                                        channelsKt__Channels_commonKt$single$3.L$3 = found;
                                                        channelsKt__Channels_commonKt$single$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$single$3.L$5 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$single$3.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$single$3.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$single$3.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$single$3.label = 2;
                                                        it = (Object) channelIterator.next(channelsKt__Channels_commonKt$single$3);
                                                        if (it == obj) {
                                                            return obj;
                                                        }
                                                        predicate2 = predicate;
                                                        $receiver = $receiver$iv$iv;
                                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                                        cause$iv$iv2 = cause$iv$iv;
                                                        channelIterator2 = channelIterator;
                                                        $receiver$iv6 = $receiver$iv2;
                                                        if (!predicate2.invoke(it).booleanValue()) {
                                                        }
                                                        channelsKt__Channels_commonKt$single$3 = channelsKt__Channels_commonKt$single$32;
                                                        $receiver$iv3 = $receiver$iv6;
                                                        obj2 = obj;
                                                        z2 = z;
                                                        channelsKt__Channels_commonKt$single$3.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$single$3.L$1 = predicate2;
                                                        channelsKt__Channels_commonKt$single$3.L$2 = single;
                                                        channelsKt__Channels_commonKt$single$3.L$3 = found;
                                                        channelsKt__Channels_commonKt$single$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$single$3.L$5 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$single$3.L$6 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$single$3.L$7 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$single$3.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$single$3.label = 1;
                                                        hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$single$3);
                                                        if (hasNext == obj2) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv2.cancel(cause$iv$iv);
                                                        InlineMarker.finallyEnd(1);
                                                        if (found.element) {
                                                            return single.element;
                                                        }
                                                        throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                        channelsKt__Channels_commonKt$single$3 = channelsKt__Channels_commonKt$single$32;
                                        $receiver$iv3 = $receiver$iv6;
                                        obj2 = obj;
                                        z2 = z;
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        Ref.ObjectRef single2 = new Ref.ObjectRef();
                        single2.element = null;
                        Ref.BooleanRef booleanRef = new Ref.BooleanRef();
                        booleanRef.element = false;
                        found = booleanRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv3 = $receiver$iv;
                        cause$iv$iv2 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv3.iterator();
                            z2 = false;
                            single = single2;
                            $receiver$iv3 = $receiver$iv$iv3;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            predicate2 = function1;
                            channelsKt__Channels_commonKt$single$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$single$3.L$1 = predicate2;
                            channelsKt__Channels_commonKt$single$3.L$2 = single;
                            channelsKt__Channels_commonKt$single$3.L$3 = found;
                            channelsKt__Channels_commonKt$single$3.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$single$3.L$5 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$single$3.L$6 = cause$iv$iv2;
                            channelsKt__Channels_commonKt$single$3.L$7 = $receiver$iv3;
                            channelsKt__Channels_commonKt$single$3.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$single$3.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$single$3);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv3.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$single$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$single$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.single(null, null, this);
            }
        };
        Object it2 = (Object) channelsKt__Channels_commonKt$single$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$single$3.label;
        if (i == 0) {
        }
    }

    private static final Object single$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Object single = null;
        boolean found = false;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            ChannelIterator it = $receiver.iterator();
            while (true) {
                InlineMarker.mark(i);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(i2);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(i);
                    Object e$iv = it.next(continuation);
                    InlineMarker.mark(i2);
                    try {
                        if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                            if (!found) {
                                single = e$iv;
                                found = true;
                            } else {
                                throw new IllegalArgumentException("ReceiveChannel contains more than one matching element.");
                            }
                        }
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th) {
                        e$iv$iv = th;
                        try {
                            throw e$iv$iv;
                        } finally {
                            int i3 = 1;
                            InlineMarker.finallyStart(i3);
                            $receiver.cancel(e$iv$iv);
                            InlineMarker.finallyEnd(i3);
                        }
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    if (found) {
                        return single;
                    }
                    throw new NoSuchElementException("ReceiveChannel contains no element matching the predicate.");
                }
            }
        } catch (Throwable th2) {
            e$iv$iv = th2;
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(1:(4:13|89|14|(3:16|58|(2:60|61)(2:62|63))(2:17|18))(2:21|22))(4:23|81|24|(4:26|79|54|(1:56)(3:57|58|(0)(0)))(2:27|28)))(4:31|83|32|(1:34)(2:35|36))|70|77|71)(2:39|(4:41|87|42|(1:44)(1:45))(2:75|76))|85|46|(2:48|49)(2:50|(1:52)(4:53|79|54|(0)(0)))))|7|8|(0)(0)|85|46|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x0147, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0029  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00cb  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00fc A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0100 A[Catch: all -> 0x0147, TRY_ENTER, TRY_LEAVE, TryCatch #4 {all -> 0x0147, blocks: (B:46:0x00f3, B:50:0x0100), top: B:85:0x00f3 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x012d A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x012e  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x013b A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x013f A[DONT_GENERATE] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object singleOrNull(ReceiveChannel<? extends E> receiveChannel, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$singleOrNull$1 channelsKt__Channels_commonKt$singleOrNull$1;
        Object single;
        int i;
        ReceiveChannel $receiver$iv;
        boolean z;
        ReceiveChannel $receiver;
        ChannelIterator iterator;
        ReceiveChannel $receiver$iv2;
        ChannelIterator iterator2;
        Throwable cause$iv;
        ReceiveChannel $receiver2;
        Object hasNext;
        Object single2;
        ReceiveChannel $receiver$iv3;
        Throwable cause$iv2;
        if (continuation instanceof ChannelsKt__Channels_commonKt$singleOrNull$1) {
            channelsKt__Channels_commonKt$singleOrNull$1 = (ChannelsKt__Channels_commonKt$singleOrNull$1) continuation;
            if ((channelsKt__Channels_commonKt$singleOrNull$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$singleOrNull$1.label -= Integer.MIN_VALUE;
                single = channelsKt__Channels_commonKt$singleOrNull$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$singleOrNull$1.label;
                if (i == 0) {
                    if (i == 1) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$singleOrNull$1.L$4;
                        $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$3;
                        Throwable cause$iv3 = (Throwable) channelsKt__Channels_commonKt$singleOrNull$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$0;
                        try {
                            if (!(single instanceof Result.Failure)) {
                                z = false;
                                cause$iv2 = cause$iv3;
                            } else {
                                throw ((Result.Failure) single).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                        }
                    } else if (i == 2) {
                        ChannelIterator iterator3 = (ChannelIterator) channelsKt__Channels_commonKt$singleOrNull$1.L$4;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$3;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$singleOrNull$1.L$2;
                        $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$1;
                        receiveChannel = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$0;
                        try {
                            if (!(single instanceof Result.Failure)) {
                                z = false;
                                iterator2 = iterator3;
                                $receiver2 = $receiver3;
                                try {
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$0 = receiveChannel;
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$1 = $receiver$iv2;
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$2 = cause$iv;
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$3 = $receiver2;
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$4 = iterator2;
                                    channelsKt__Channels_commonKt$singleOrNull$1.L$5 = single;
                                    channelsKt__Channels_commonKt$singleOrNull$1.label = 3;
                                    hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$singleOrNull$1);
                                    if (hasNext != coroutine_suspended) {
                                        return coroutine_suspended;
                                    }
                                    single2 = single;
                                    single = hasNext;
                                    $receiver$iv3 = $receiver$iv2;
                                    if (!((Boolean) single).booleanValue()) {
                                    }
                                } catch (Throwable th2) {
                                    cause$iv = th2;
                                    $receiver$iv = $receiver$iv2;
                                }
                            } else {
                                throw ((Result.Failure) single).exception;
                            }
                        } catch (Throwable th3) {
                            cause$iv = th3;
                            $receiver$iv = $receiver$iv2;
                        }
                    } else if (i == 3) {
                        single2 = channelsKt__Channels_commonKt$singleOrNull$1.L$5;
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$singleOrNull$1.L$4;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$3;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$singleOrNull$1.L$2;
                        $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$1;
                        ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$1.L$0;
                        try {
                            if (single instanceof Result.Failure) {
                                throw ((Result.Failure) single).exception;
                            } else if (!((Boolean) single).booleanValue()) {
                                return null;
                            } else {
                                return single2;
                            }
                        } catch (Throwable th4) {
                            cause$iv = th4;
                            $receiver$iv = $receiver$iv3;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw cause$iv;
                    } finally {
                        $receiver$iv.cancel(cause$iv);
                    }
                } else if (!(single instanceof Result.Failure)) {
                    cause$iv2 = null;
                    try {
                        ChannelIterator iterator5 = receiveChannel.iterator();
                        channelsKt__Channels_commonKt$singleOrNull$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$singleOrNull$1.L$1 = receiveChannel;
                        channelsKt__Channels_commonKt$singleOrNull$1.L$2 = cause$iv2;
                        channelsKt__Channels_commonKt$singleOrNull$1.L$3 = receiveChannel;
                        channelsKt__Channels_commonKt$singleOrNull$1.L$4 = iterator5;
                        channelsKt__Channels_commonKt$singleOrNull$1.label = 1;
                        Object hasNext2 = iterator5.hasNext(channelsKt__Channels_commonKt$singleOrNull$1);
                        if (hasNext2 == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv = receiveChannel;
                        single = hasNext2;
                        $receiver = receiveChannel;
                        z = false;
                        iterator = iterator5;
                    } catch (Throwable th5) {
                        cause$iv = th5;
                        $receiver$iv = receiveChannel;
                    }
                } else {
                    throw ((Result.Failure) single).exception;
                }
                if (((Boolean) single).booleanValue()) {
                    return null;
                }
                channelsKt__Channels_commonKt$singleOrNull$1.L$0 = receiveChannel;
                channelsKt__Channels_commonKt$singleOrNull$1.L$1 = $receiver$iv;
                channelsKt__Channels_commonKt$singleOrNull$1.L$2 = cause$iv;
                channelsKt__Channels_commonKt$singleOrNull$1.L$3 = $receiver;
                channelsKt__Channels_commonKt$singleOrNull$1.L$4 = iterator;
                channelsKt__Channels_commonKt$singleOrNull$1.label = 2;
                single = iterator.next(channelsKt__Channels_commonKt$singleOrNull$1);
                if (single == coroutine_suspended) {
                    return coroutine_suspended;
                }
                $receiver$iv2 = $receiver$iv;
                iterator2 = iterator;
                cause$iv = cause$iv;
                $receiver2 = $receiver;
                channelsKt__Channels_commonKt$singleOrNull$1.L$0 = receiveChannel;
                channelsKt__Channels_commonKt$singleOrNull$1.L$1 = $receiver$iv2;
                channelsKt__Channels_commonKt$singleOrNull$1.L$2 = cause$iv;
                channelsKt__Channels_commonKt$singleOrNull$1.L$3 = $receiver2;
                channelsKt__Channels_commonKt$singleOrNull$1.L$4 = iterator2;
                channelsKt__Channels_commonKt$singleOrNull$1.L$5 = single;
                channelsKt__Channels_commonKt$singleOrNull$1.label = 3;
                hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$singleOrNull$1);
                if (hasNext != coroutine_suspended) {
                }
            }
        }
        channelsKt__Channels_commonKt$singleOrNull$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$singleOrNull$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                this.result = obj;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.singleOrNull(null, this);
            }
        };
        single = channelsKt__Channels_commonKt$singleOrNull$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$singleOrNull$1.label;
        if (i == 0) {
        }
        if (((Boolean) single).booleanValue()) {
        }
    }

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0123 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0124  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0137 A[Catch: all -> 0x01b2, TRY_LEAVE, TryCatch #2 {all -> 0x01b2, blocks: (B:39:0x012f, B:41:0x0137, B:58:0x019c), top: B:80:0x012f }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x016f A[Catch: all -> 0x0197, TRY_LEAVE, TryCatch #5 {all -> 0x0197, blocks: (B:46:0x0163, B:48:0x016f, B:53:0x0182), top: B:86:0x0163 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x018a  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x019c A[Catch: all -> 0x01b2, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x01b2, blocks: (B:39:0x012f, B:41:0x0137, B:58:0x019c), top: B:80:0x012f }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object singleOrNull(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$singleOrNull$3 channelsKt__Channels_commonKt$singleOrNull$3;
        int i;
        Ref.ObjectRef single;
        Ref.BooleanRef found;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        boolean z;
        int $i$a$4$consume;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        Object obj;
        Function1 predicate;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z2;
        int $receiver$iv3;
        ReceiveChannel $receiver$iv4;
        Object obj2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv5;
        Function1 predicate2;
        ReceiveChannel $receiver$iv6;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$singleOrNull$3) {
                channelsKt__Channels_commonKt$singleOrNull$3 = (ChannelsKt__Channels_commonKt$singleOrNull$3) continuation;
                if ((channelsKt__Channels_commonKt$singleOrNull$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$singleOrNull$3.label -= Integer.MIN_VALUE;
                    Object e$iv = (Object) channelsKt__Channels_commonKt$singleOrNull$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$singleOrNull$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$singleOrNull$3.L$8;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$7;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$singleOrNull$3.L$6;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$5;
                            ReceiveChannel $receiver$iv8 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$4;
                            Ref.BooleanRef found2 = (Ref.BooleanRef) channelsKt__Channels_commonKt$singleOrNull$3.L$3;
                            single = (Ref.ObjectRef) channelsKt__Channels_commonKt$singleOrNull$3.L$2;
                            predicate2 = (Function1) channelsKt__Channels_commonKt$singleOrNull$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    hasNext = e$iv;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    found = found2;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    $receiver$iv4 = $receiver$iv7;
                                    cause$iv$iv = cause$iv$iv2;
                                    $receiver$iv5 = $receiver$iv8;
                                    $receiver$iv3 = 0;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$singleOrNull$3.L$8;
                            ReceiveChannel $receiver$iv9 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$singleOrNull$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$4;
                            found = (Ref.BooleanRef) channelsKt__Channels_commonKt$singleOrNull$3.L$3;
                            single = (Ref.ObjectRef) channelsKt__Channels_commonKt$singleOrNull$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$singleOrNull$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$singleOrNull$3.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    $i$a$4$consume = 0;
                                    z2 = false;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    ChannelsKt__Channels_commonKt$singleOrNull$3 channelsKt__Channels_commonKt$singleOrNull$32 = channelsKt__Channels_commonKt$singleOrNull$3;
                                    ReceiveChannel $receiver$iv10 = $receiver$iv9;
                                    predicate = predicate3;
                                    try {
                                        try {
                                            if (!predicate.invoke(e$iv).booleanValue()) {
                                                $receiver$iv6 = $receiver$iv10;
                                            } else if (found.element) {
                                                InlineMarker.finallyStart(2);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(2);
                                                return null;
                                            } else {
                                                single.element = (T) e$iv;
                                                $receiver$iv6 = $receiver$iv10;
                                                found.element = true;
                                            }
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$1 = predicate;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$2 = single;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$3 = found;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$4 = $receiver$iv;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$5 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$6 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$7 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$singleOrNull$3.L$8 = channelIterator;
                                            channelsKt__Channels_commonKt$singleOrNull$3.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$singleOrNull$3);
                                            if (hasNext == obj) {
                                                return obj;
                                            }
                                            z2 = z;
                                            $receiver$iv3 = $i$a$4$consume;
                                            $receiver$iv4 = $receiver$iv2;
                                            obj2 = obj;
                                            channelIterator2 = channelIterator;
                                            $receiver$iv5 = $receiver$iv;
                                            predicate2 = predicate;
                                            try {
                                                if (!((Boolean) hasNext).booleanValue()) {
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$1 = predicate2;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$2 = single;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$3 = found;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$4 = $receiver$iv5;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$7 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$8 = channelIterator2;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.label = 2;
                                                    Object next = channelIterator2.next(channelsKt__Channels_commonKt$singleOrNull$3);
                                                    if (next == obj2) {
                                                        return obj2;
                                                    }
                                                    obj3 = obj2;
                                                    e$iv = (Object) next;
                                                    $i$a$4$consume = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$singleOrNull$32 = channelsKt__Channels_commonKt$singleOrNull$3;
                                                    $receiver$iv10 = $receiver$iv4;
                                                    predicate = predicate2;
                                                    $receiver$iv = $receiver$iv5;
                                                    channelIterator = channelIterator2;
                                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                                    }
                                                    $receiver$iv2 = $receiver$iv6;
                                                    channelsKt__Channels_commonKt$singleOrNull$3 = channelsKt__Channels_commonKt$singleOrNull$32;
                                                    obj = obj3;
                                                    z = z2;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$1 = predicate;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$2 = single;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$3 = found;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$4 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$7 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$singleOrNull$3.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$singleOrNull$3);
                                                    if (hasNext == obj) {
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    InlineMarker.finallyStart(1);
                                                    $receiver$iv$iv.cancel(cause$iv$iv);
                                                    InlineMarker.finallyEnd(1);
                                                    if (!found.element) {
                                                        return null;
                                                    }
                                                    return single.element;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                        $receiver$iv2 = $receiver$iv6;
                                        channelsKt__Channels_commonKt$singleOrNull$3 = channelsKt__Channels_commonKt$singleOrNull$32;
                                        obj = obj3;
                                        z = z2;
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        Ref.ObjectRef objectRef = new Ref.ObjectRef();
                        objectRef.element = null;
                        single = objectRef;
                        Ref.BooleanRef booleanRef = new Ref.BooleanRef();
                        booleanRef.element = false;
                        found = booleanRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            $i$a$4$consume = 0;
                            predicate = function1;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$2 = single;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$3 = found;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$7 = $receiver$iv2;
                            channelsKt__Channels_commonKt$singleOrNull$3.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$singleOrNull$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$singleOrNull$3);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$singleOrNull$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$singleOrNull$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.singleOrNull(null, null, this);
            }
        };
        Object e$iv2 = (Object) channelsKt__Channels_commonKt$singleOrNull$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$singleOrNull$3.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x005a, code lost:
        r0 = kotlin.Unit.INSTANCE;
     */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x0067, code lost:
        if (r3 != false) goto L_0x006a;
     */
    /* JADX WARN: Code restructure failed: missing block: B:19:0x0069, code lost:
        return null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:20:0x006a, code lost:
        return r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump */
    private static final Object singleOrNull$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Object single = null;
        boolean found = false;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (!((Boolean) hasNext).booleanValue()) {
                break;
            }
            InlineMarker.mark(i);
            Object e$iv = it.next(continuation);
            InlineMarker.mark(i2);
            try {
                if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                    if (found) {
                        InlineMarker.finallyStart(2);
                        $receiver.cancel(e$iv$iv);
                        InlineMarker.finallyEnd(2);
                        return null;
                    }
                    single = e$iv;
                    found = true;
                }
                i = 0;
                i2 = 1;
            } catch (Throwable th2) {
                e$iv$iv = th2;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel drop$default(ReceiveChannel receiveChannel, int i, CoroutineContext coroutineContext, int i2, Object obj) {
        if ((i2 & 2) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.drop(receiveChannel, i, coroutineContext);
    }

    public static final <E> ReceiveChannel<E> drop(ReceiveChannel<? extends E> receiveChannel, int n, CoroutineContext context) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$drop$1(receiveChannel, n, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel dropWhile$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.dropWhile(receiveChannel, coroutineContext, function2);
    }

    public static final <E> ReceiveChannel<E> dropWhile(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super Boolean>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$dropWhile$1(receiveChannel, function2, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel filter$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.filter(receiveChannel, coroutineContext, function2);
    }

    public static final <E> ReceiveChannel<E> filter(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super Boolean>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$filter$1(receiveChannel, function2, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel filterIndexed$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function3 function3, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.filterIndexed(receiveChannel, coroutineContext, function3);
    }

    public static final <E> ReceiveChannel<E> filterIndexed(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function3<? super Integer, ? super E, ? super Continuation<? super Boolean>, ? extends Object> function3) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function3, "predicate");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$filterIndexed$1(receiveChannel, function3, null), 2, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00fb  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x014f A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0150  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x016f A[Catch: all -> 0x0234, TRY_LEAVE, TryCatch #0 {all -> 0x0234, blocks: (B:41:0x0167, B:43:0x016f, B:62:0x0225), top: B:80:0x0167 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x01db A[Catch: all -> 0x01f7, TRY_LEAVE, TryCatch #5 {all -> 0x01f7, blocks: (B:52:0x01b4, B:54:0x01db), top: B:90:0x01b4 }] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0225 A[Catch: all -> 0x0234, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x0234, blocks: (B:41:0x0167, B:43:0x016f, B:62:0x0225), top: B:80:0x0167 }] */
    /* JADX WARN: Type inference failed for: r9v7, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends Collection<? super E>> Object filterIndexedTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, Boolean> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterIndexedTo$1 channelsKt__Channels_commonKt$filterIndexedTo$1;
        int i;
        Object obj;
        boolean z;
        boolean z2;
        int $i$f$consumeEachIndexed;
        int i2;
        ReceiveChannel $receiver$iv;
        int $i$f$consumeEach;
        Ref.IntRef index$iv;
        int $i$f$consume;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv$iv;
        int predicate;
        Object obj2;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        Function2 predicate2;
        Collection collection;
        ReceiveChannel $receiver2;
        ReceiveChannel $receiver$iv$iv;
        Object hasNext;
        Object obj3;
        boolean z3;
        boolean z4;
        int i3;
        Object obj4;
        ReceiveChannel $receiver$iv$iv2;
        ReceiveChannel $receiver$iv$iv3;
        ReceiveChannel $receiver$iv$iv4;
        C c2;
        Function2 predicate3;
        ChannelIterator<E> channelIterator2;
        int index;
        Object element;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterIndexedTo$1) {
                channelsKt__Channels_commonKt$filterIndexedTo$1 = (ChannelsKt__Channels_commonKt$filterIndexedTo$1) continuation;
                if ((channelsKt__Channels_commonKt$filterIndexedTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterIndexedTo$1.label -= Integer.MIN_VALUE;
                    Object e$iv$iv = channelsKt__Channels_commonKt$filterIndexedTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterIndexedTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$consumeEachIndexed = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterIndexedTo$1.L$9;
                            $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$8;
                            Throwable cause$iv$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$filterIndexedTo$1.L$7;
                            ReceiveChannel $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$filterIndexedTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$3;
                            Function2 predicate4 = (Function2) channelsKt__Channels_commonKt$filterIndexedTo$1.L$2;
                            ?? r9 = (Collection) channelsKt__Channels_commonKt$filterIndexedTo$1.L$1;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    obj4 = coroutine_suspended;
                                    i3 = 0;
                                    z4 = false;
                                    z3 = false;
                                    obj3 = null;
                                    c2 = r9;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                    predicate3 = predicate4;
                                    predicate = 0;
                                    cause$iv$iv$iv = cause$iv$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) e$iv$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$filterIndexedTo$1.L$9;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterIndexedTo$1.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$6;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$filterIndexedTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$3;
                            Function2 predicate5 = (Function2) channelsKt__Channels_commonKt$filterIndexedTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$filterIndexedTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$1.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    int $i$f$consumeEachIndexed2 = 0;
                                    boolean z5 = false;
                                    boolean z6 = false;
                                    Object obj5 = null;
                                    int $i$f$consumeEachIndexed3 = 0;
                                    ChannelsKt__Channels_commonKt$filterIndexedTo$1 channelsKt__Channels_commonKt$filterIndexedTo$12 = channelsKt__Channels_commonKt$filterIndexedTo$1;
                                    ReceiveChannel $receiver$iv$iv6 = $receiver$iv$iv5;
                                    collection = destination;
                                    predicate2 = predicate5;
                                    obj4 = coroutine_suspended;
                                    int $i$f$consumeEach2 = 0;
                                    int $i$f$consumeEach3 = 0;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    try {
                                                        int i4 = index$iv.element;
                                                        index$iv.element = i4 + 1;
                                                        IndexedValue $index_element = new IndexedValue(i4, e$iv$iv);
                                                        index = $index_element.component1();
                                                        element = (Object) $index_element.component2();
                                                        if (predicate2.invoke(Boxing.boxInt(index), element).booleanValue()) {
                                                            collection.add(element);
                                                        }
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$0 = $receiver2;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$1 = collection;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$2 = predicate2;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$4 = index$iv;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$5 = $receiver;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$6 = $receiver$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$7 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$8 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.L$9 = channelIterator;
                                                        channelsKt__Channels_commonKt$filterIndexedTo$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$1);
                                                        if (hasNext == obj2) {
                                                            return obj2;
                                                        }
                                                        obj3 = obj;
                                                        z3 = z;
                                                        z4 = z2;
                                                        i3 = i2;
                                                        obj4 = obj2;
                                                        $receiver$iv$iv2 = $receiver;
                                                        $receiver$iv$iv3 = $receiver2;
                                                        $receiver$iv$iv4 = $receiver$iv$iv;
                                                        e$iv$iv = hasNext;
                                                        c2 = collection;
                                                        predicate3 = predicate2;
                                                        channelIterator2 = channelIterator;
                                                        try {
                                                            if (!((Boolean) e$iv$iv).booleanValue()) {
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$0 = $receiver$iv$iv3;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$1 = c2;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$2 = predicate3;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$4 = index$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$5 = $receiver$iv$iv2;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$6 = $receiver$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$7 = cause$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$8 = $receiver$iv$iv4;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$9 = channelIterator2;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.label = 2;
                                                                e$iv$iv = channelIterator2.next(channelsKt__Channels_commonKt$filterIndexedTo$1);
                                                                if (e$iv$iv == obj4) {
                                                                    return obj4;
                                                                }
                                                                channelsKt__Channels_commonKt$filterIndexedTo$12 = channelsKt__Channels_commonKt$filterIndexedTo$1;
                                                                z6 = z3;
                                                                $i$f$consumeEach2 = $i$f$consumeEach;
                                                                $i$f$consumeEach3 = predicate;
                                                                channelIterator4 = channelIterator2;
                                                                predicate2 = predicate3;
                                                                $receiver3 = $receiver$iv$iv3;
                                                                $receiver = $receiver$iv$iv2;
                                                                $receiver$iv$iv6 = $receiver$iv$iv4;
                                                                collection = c2;
                                                                z5 = z4;
                                                                obj5 = obj3;
                                                                $i$f$consumeEachIndexed2 = $i$f$consumeEachIndexed;
                                                                $i$f$consumeEachIndexed3 = $i$f$consume;
                                                                int i42 = index$iv.element;
                                                                index$iv.element = i42 + 1;
                                                                IndexedValue $index_element2 = new IndexedValue(i42, e$iv$iv);
                                                                index = $index_element2.component1();
                                                                element = (Object) $index_element2.component2();
                                                                if (predicate2.invoke(Boxing.boxInt(index), element).booleanValue()) {
                                                                }
                                                                $receiver$iv$iv = $receiver$iv$iv6;
                                                                channelIterator = channelIterator4;
                                                                predicate = $i$f$consumeEach3;
                                                                obj2 = obj4;
                                                                z = z6;
                                                                $i$f$consumeEach = $i$f$consumeEach2;
                                                                i2 = index;
                                                                z2 = z5;
                                                                obj = element;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1 = channelsKt__Channels_commonKt$filterIndexedTo$12;
                                                                $i$f$consume = $i$f$consumeEachIndexed3;
                                                                $i$f$consumeEachIndexed = $i$f$consumeEachIndexed2;
                                                                $receiver2 = $receiver3;
                                                                cause$iv$iv$iv = cause$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$0 = $receiver2;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$1 = collection;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$2 = predicate2;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$4 = index$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$5 = $receiver;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$6 = $receiver$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$7 = cause$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$8 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.L$9 = channelIterator;
                                                                channelsKt__Channels_commonKt$filterIndexedTo$1.label = 1;
                                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$1);
                                                                if (hasNext == obj2) {
                                                                }
                                                            } else {
                                                                Unit unit = Unit.INSTANCE;
                                                                return c2;
                                                            }
                                                        } catch (Throwable th2) {
                                                            e$iv$iv$iv = th2;
                                                        }
                                                    } catch (Throwable th3) {
                                                        e$iv$iv$iv = th3;
                                                    }
                                                } catch (Throwable th4) {
                                                    e$iv$iv$iv = th4;
                                                }
                                            } catch (Throwable th5) {
                                                e$iv$iv$iv = th5;
                                            }
                                        } catch (Throwable th6) {
                                            e$iv$iv$iv = th6;
                                        }
                                    } catch (Throwable th7) {
                                        e$iv$iv$iv = th7;
                                    }
                                    $receiver$iv$iv = $receiver$iv$iv6;
                                    channelIterator = channelIterator4;
                                    predicate = $i$f$consumeEach3;
                                    obj2 = obj4;
                                    z = z6;
                                    $i$f$consumeEach = $i$f$consumeEach2;
                                    i2 = index;
                                    z2 = z5;
                                    obj = element;
                                    channelsKt__Channels_commonKt$filterIndexedTo$1 = channelsKt__Channels_commonKt$filterIndexedTo$12;
                                    $i$f$consume = $i$f$consumeEachIndexed3;
                                    $i$f$consumeEachIndexed = $i$f$consumeEachIndexed2;
                                    $receiver2 = $receiver3;
                                    cause$iv$iv$iv = cause$iv$iv$iv;
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th8) {
                                e$iv$iv$iv = th8;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv$iv instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        $i$f$consumeEachIndexed = 0;
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        index$iv = intRef;
                        $receiver = $receiver$iv;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv$iv = $receiver;
                        $i$f$consume = 0;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            i2 = 0;
                            z2 = false;
                            z = false;
                            $receiver$iv$iv = $receiver$iv$iv$iv;
                            predicate = 0;
                            obj2 = coroutine_suspended;
                            collection = c;
                            predicate2 = function2;
                            obj = null;
                            $receiver2 = receiveChannel;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$1 = collection;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$2 = predicate2;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$4 = index$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$5 = $receiver;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$6 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$7 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$8 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.L$9 = channelIterator;
                            channelsKt__Channels_commonKt$filterIndexedTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th9) {
                            e$iv$iv$iv = th9;
                        }
                    } else {
                        throw ((Result.Failure) e$iv$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i5 = 1;
            InlineMarker.finallyStart(i5);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i5);
        }
        channelsKt__Channels_commonKt$filterIndexedTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterIndexedTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj6) {
                this.result = obj6;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterIndexedTo((ReceiveChannel) null, (Collection) null, (Function2) null, this);
            }
        };
        Object e$iv$iv2 = channelsKt__Channels_commonKt$filterIndexedTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterIndexedTo$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object filterIndexedTo$$forInline(ReceiveChannel $receiver, Collection destination, Function2 predicate, Continuation continuation) {
        ChannelIterator it;
        int $i$f$filterIndexedTo;
        Object obj;
        Continuation continuation2 = continuation;
        int $i$f$filterIndexedTo2 = 0;
        ReceiveChannel $receiver$iv = $receiver;
        int i = 0;
        int index$iv = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv.iterator();
            $i$f$filterIndexedTo = 0;
            obj = null;
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                int index$iv2 = index$iv + 1;
                try {
                    IndexedValue $index_element = new IndexedValue(index$iv, e$iv$iv);
                    int index = $index_element.component1();
                    Object element = $index_element.component2();
                    try {
                        if (((Boolean) predicate.invoke(Integer.valueOf(index), element)).booleanValue()) {
                            destination.add(element);
                        }
                        continuation2 = continuation;
                        $i$f$filterIndexedTo2 = $i$f$filterIndexedTo2;
                        i = 0;
                        i2 = 1;
                        $i$f$filterIndexedTo = index;
                        index$iv = index$iv2;
                        obj = element;
                        $receiver$iv = $receiver$iv;
                    } catch (Throwable th2) {
                        e$iv$iv$iv = th2;
                    }
                } catch (Throwable th3) {
                    e$iv$iv$iv = th3;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th4) {
                    e$iv$iv$iv = th4;
                }
            }
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v17 java.lang.Object: [D('e$iv$iv' java.lang.Object), D('it$iv' java.lang.Object)] */
    /* JADX INFO: Multiple debug info for r5v16 java.lang.Object: [D('cause$iv$iv$iv' java.lang.Throwable), D('$receiver$iv$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002b  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x01cc A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x01cd  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x01ef A[Catch: all -> 0x02f3, TRY_LEAVE, TryCatch #2 {all -> 0x02f3, blocks: (B:50:0x01e7, B:52:0x01ef, B:69:0x02e4), top: B:90:0x01e7 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0251 A[Catch: all -> 0x02de, TRY_LEAVE, TryCatch #8 {all -> 0x02de, blocks: (B:57:0x021f, B:59:0x0251), top: B:102:0x021f }] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x02b2  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x02e4 A[Catch: all -> 0x02f3, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x02f3, blocks: (B:50:0x01e7, B:52:0x01ef, B:69:0x02e4), top: B:90:0x01e7 }] */
    /* JADX WARN: Type inference failed for: r12v12, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r2v31, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 2 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends SendChannel<? super E>> Object filterIndexedTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, Boolean> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterIndexedTo$3 channelsKt__Channels_commonKt$filterIndexedTo$3;
        int i;
        Ref.IntRef $i$f$consumeEach;
        Object obj;
        int $i$f$consume;
        boolean z;
        int i2;
        Throwable cause$iv$iv$iv;
        boolean z2;
        ReceiveChannel $receiver;
        int destination;
        Object $i$f$filterIndexedTo;
        Function2 predicate;
        ReceiveChannel $receiver$iv;
        Object obj2;
        Ref.IntRef index$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        ReceiveChannel $receiver$iv$iv;
        C c2;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv$iv2;
        ChannelsKt__Channels_commonKt$filterIndexedTo$3 channelsKt__Channels_commonKt$filterIndexedTo$32;
        boolean z3;
        int $i$a$4$consume;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv$iv3;
        Ref.IntRef index$iv2;
        Object obj3;
        int i3;
        Object obj4;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv$iv4;
        ReceiveChannel $receiver$iv$iv$iv2;
        Function2 predicate2;
        C c3;
        ChannelIterator<E> channelIterator3;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver$iv$iv5;
        Object hasNext;
        Object obj5;
        boolean z4;
        ReceiveChannel element;
        Ref.IntRef index$iv3;
        SendChannel sendChannel;
        int index;
        Object element2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterIndexedTo$3) {
                channelsKt__Channels_commonKt$filterIndexedTo$3 = (ChannelsKt__Channels_commonKt$filterIndexedTo$3) continuation;
                if ((channelsKt__Channels_commonKt$filterIndexedTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterIndexedTo$3.label -= Integer.MIN_VALUE;
                    Object e$iv$iv = channelsKt__Channels_commonKt$filterIndexedTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterIndexedTo$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = null;
                            $i$f$filterIndexedTo = null;
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$filterIndexedTo$3.L$9;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterIndexedTo$3.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$filterIndexedTo$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$3;
                            predicate = (Function2) channelsKt__Channels_commonKt$filterIndexedTo$3.L$2;
                            ?? r12 = (SendChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$1;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    obj = null;
                                    obj2 = coroutine_suspended;
                                    z2 = false;
                                    i2 = 0;
                                    z = false;
                                    destination = 0;
                                    c2 = r12;
                                    channelIterator = channelIterator4;
                                    if (!((Boolean) e$iv$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                            }
                        } else if (i == 2) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = null;
                            $i$f$filterIndexedTo = null;
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$filterIndexedTo$3.L$9;
                            ReceiveChannel $receiver$iv$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterIndexedTo$3.L$7;
                            ReceiveChannel $receiver$iv$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$5;
                            Ref.IntRef index$iv4 = (Ref.IntRef) channelsKt__Channels_commonKt$filterIndexedTo$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$3;
                            predicate = (Function2) channelsKt__Channels_commonKt$filterIndexedTo$3.L$2;
                            SendChannel destination2 = (SendChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    channelsKt__Channels_commonKt$filterIndexedTo$32 = channelsKt__Channels_commonKt$filterIndexedTo$3;
                                    obj = null;
                                    obj2 = coroutine_suspended;
                                    z3 = false;
                                    $i$a$4$consume = 0;
                                    $receiver$iv$iv3 = $receiver$iv$iv6;
                                    index$iv2 = index$iv4;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv3;
                                    sendChannel = destination2;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    int i4 = index$iv2.element;
                                    index$iv2.element = i4 + 1;
                                    IndexedValue $index_element = new IndexedValue(i4, e$iv$iv);
                                    index = $index_element.component1();
                                    element2 = $index_element.component2();
                                    if (!predicate.invoke(Boxing.boxInt(index), element2).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th2) {
                                e$iv$iv$iv = th2;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv3;
                            }
                        } else if (i == 3) {
                            boolean z5 = false;
                            Object element3 = channelsKt__Channels_commonKt$filterIndexedTo$3.L$13;
                            int index2 = channelsKt__Channels_commonKt$filterIndexedTo$3.I$0;
                            IndexedValue $index_element2 = (IndexedValue) channelsKt__Channels_commonKt$filterIndexedTo$3.L$12;
                            Object obj6 = channelsKt__Channels_commonKt$filterIndexedTo$3.L$11;
                            Object it$iv = channelsKt__Channels_commonKt$filterIndexedTo$3.L$10;
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$filterIndexedTo$3.L$9;
                            ReceiveChannel $receiver$iv$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterIndexedTo$3.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$6;
                            Object obj7 = coroutine_suspended;
                            ReceiveChannel $receiver$iv$iv8 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$5;
                            Ref.IntRef index$iv5 = (Ref.IntRef) channelsKt__Channels_commonKt$filterIndexedTo$3.L$4;
                            Function2 predicate3 = (Function2) channelsKt__Channels_commonKt$filterIndexedTo$3.L$2;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$3;
                            ?? r2 = (SendChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterIndexedTo$3.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    Object e$iv$iv2 = it$iv;
                                    index$iv2 = index$iv5;
                                    Object e$iv$iv3 = null;
                                    Ref.IntRef index$iv6 = null;
                                    channelsKt__Channels_commonKt$filterIndexedTo$32 = channelsKt__Channels_commonKt$filterIndexedTo$3;
                                    int $i$f$consumeEach2 = 0;
                                    C c4 = r2;
                                    int $i$f$consume2 = 0;
                                    z3 = false;
                                    $receiver = $receiver3;
                                    try {
                                        try {
                                            channelIterator3 = channelIterator2;
                                            destination = $i$f$consume2;
                                            $i$f$consume = $i$f$consumeEach2;
                                            $i$f$consumeEach = index$iv6;
                                            obj5 = element3;
                                            element = $receiver$iv$iv7;
                                            predicate2 = predicate3;
                                            $receiver$iv$iv4 = $receiver$iv$iv8;
                                            z4 = z5;
                                            $i$f$filterIndexedTo = e$iv$iv3;
                                            index$iv3 = index$iv2;
                                            $receiver$iv3 = $receiver;
                                            i3 = index2;
                                            $receiver$iv2 = $receiver$iv$iv$iv;
                                            $receiver$iv$iv$iv2 = $receiver$iv4;
                                            c3 = c4;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$0 = $receiver$iv3;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$1 = c3;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$2 = predicate2;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$3 = $receiver$iv$iv$iv2;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$4 = index$iv;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$5 = $receiver$iv$iv4;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$6 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$7 = cause$iv$iv$iv;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$8 = $receiver$iv$iv5;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$9 = channelIterator3;
                                            channelsKt__Channels_commonKt$filterIndexedTo$3.label = 1;
                                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$3);
                                            if (hasNext != obj4) {
                                                return obj4;
                                            }
                                            $receiver$iv$iv2 = $receiver$iv$iv5;
                                            e$iv$iv = hasNext;
                                            predicate = predicate2;
                                            $receiver$iv$iv = $receiver$iv$iv4;
                                            obj2 = obj4;
                                            $receiver$iv = $receiver$iv$iv$iv2;
                                            $receiver$iv$iv$iv = $receiver$iv2;
                                            i2 = i3;
                                            $receiver = $receiver$iv3;
                                            obj = obj3;
                                            z = z3;
                                            channelIterator = channelIterator3;
                                            c2 = c3;
                                            try {
                                                if (!((Boolean) e$iv$iv).booleanValue()) {
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$1 = c2;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$2 = predicate;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$4 = index$iv;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$6 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$7 = cause$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$8 = $receiver$iv$iv2;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.L$9 = channelIterator;
                                                    channelsKt__Channels_commonKt$filterIndexedTo$3.label = 2;
                                                    e$iv$iv = channelIterator.next(channelsKt__Channels_commonKt$filterIndexedTo$3);
                                                    if (e$iv$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        channelsKt__Channels_commonKt$filterIndexedTo$32 = channelsKt__Channels_commonKt$filterIndexedTo$3;
                                                        z3 = z;
                                                        $i$a$4$consume = destination;
                                                        channelIterator2 = channelIterator;
                                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                                        index$iv2 = index$iv;
                                                        sendChannel = c2;
                                                        int i42 = index$iv2.element;
                                                        index$iv2.element = i42 + 1;
                                                        IndexedValue $index_element3 = new IndexedValue(i42, e$iv$iv);
                                                        index = $index_element3.component1();
                                                        element2 = $index_element3.component2();
                                                        if (!predicate.invoke(Boxing.boxInt(index), element2).booleanValue()) {
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$1 = sendChannel;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$2 = predicate;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$4 = index$iv2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$6 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$7 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$8 = $receiver$iv$iv3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$9 = channelIterator2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$10 = e$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$11 = e$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$12 = $index_element3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.I$0 = index;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.L$13 = element2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$32.label = 3;
                                                            if (sendChannel.send(element2, channelsKt__Channels_commonKt$filterIndexedTo$32) == obj2) {
                                                                return obj2;
                                                            }
                                                            $receiver$iv4 = $receiver$iv;
                                                            e$iv$iv2 = e$iv$iv;
                                                            index$iv6 = $i$f$consumeEach;
                                                            e$iv$iv3 = $i$f$filterIndexedTo;
                                                            index2 = index;
                                                            $i$f$consumeEach2 = $i$f$consume;
                                                            $i$f$consume2 = $i$a$4$consume;
                                                            obj7 = obj2;
                                                            $receiver$iv$iv8 = $receiver$iv$iv;
                                                            $receiver$iv$iv7 = $receiver$iv$iv3;
                                                            predicate3 = predicate;
                                                            element3 = element2;
                                                            z5 = z2;
                                                            c4 = sendChannel;
                                                            channelIterator3 = channelIterator2;
                                                            destination = $i$f$consume2;
                                                            $i$f$consume = $i$f$consumeEach2;
                                                            $i$f$consumeEach = index$iv6;
                                                            obj5 = element3;
                                                            element = $receiver$iv$iv7;
                                                            predicate2 = predicate3;
                                                            $receiver$iv$iv4 = $receiver$iv$iv8;
                                                            z4 = z5;
                                                            $i$f$filterIndexedTo = e$iv$iv3;
                                                            index$iv3 = index$iv2;
                                                            $receiver$iv3 = $receiver;
                                                            i3 = index2;
                                                            $receiver$iv2 = $receiver$iv$iv$iv;
                                                            $receiver$iv$iv$iv2 = $receiver$iv4;
                                                            c3 = c4;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3 = channelsKt__Channels_commonKt$filterIndexedTo$32;
                                                            z2 = z4;
                                                            index$iv = index$iv3;
                                                            $receiver$iv$iv5 = element;
                                                            obj4 = obj7;
                                                            obj3 = obj5;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$0 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$1 = c3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$2 = predicate2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$3 = $receiver$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$4 = index$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$5 = $receiver$iv$iv4;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$6 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$7 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$8 = $receiver$iv$iv5;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$9 = channelIterator3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.label = 1;
                                                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$3);
                                                            if (hasNext != obj4) {
                                                            }
                                                        } else {
                                                            index$iv3 = index$iv2;
                                                            $receiver$iv$iv4 = $receiver$iv$iv;
                                                            predicate2 = predicate;
                                                            obj5 = element2;
                                                            $receiver$iv3 = $receiver;
                                                            $i$f$filterIndexedTo = $i$f$filterIndexedTo;
                                                            i3 = index;
                                                            element = $receiver$iv$iv3;
                                                            channelIterator3 = channelIterator2;
                                                            destination = $i$a$4$consume;
                                                            obj7 = obj2;
                                                            z4 = z2;
                                                            $receiver$iv2 = $receiver$iv$iv$iv;
                                                            $receiver$iv$iv$iv2 = $receiver$iv;
                                                            c3 = sendChannel;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3 = channelsKt__Channels_commonKt$filterIndexedTo$32;
                                                            z2 = z4;
                                                            index$iv = index$iv3;
                                                            $receiver$iv$iv5 = element;
                                                            obj4 = obj7;
                                                            obj3 = obj5;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$0 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$1 = c3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$2 = predicate2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$3 = $receiver$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$4 = index$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$5 = $receiver$iv$iv4;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$6 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$7 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$8 = $receiver$iv$iv5;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$9 = channelIterator3;
                                                            channelsKt__Channels_commonKt$filterIndexedTo$3.label = 1;
                                                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$3);
                                                            if (hasNext != obj4) {
                                                            }
                                                        }
                                                    } catch (Throwable th3) {
                                                        e$iv$iv$iv = th3;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c2;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv$iv = th5;
                                            $receiver$iv$iv$iv = $receiver$iv2;
                                        }
                                        channelsKt__Channels_commonKt$filterIndexedTo$3 = channelsKt__Channels_commonKt$filterIndexedTo$32;
                                        z2 = z4;
                                        index$iv = index$iv3;
                                        $receiver$iv$iv5 = element;
                                        obj4 = obj7;
                                        obj3 = obj5;
                                    } catch (Throwable th6) {
                                        e$iv$iv$iv = th6;
                                        $receiver$iv$iv$iv = $receiver$iv2;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv$iv instanceof Result.Failure)) {
                        Ref.IntRef index$iv7 = new Ref.IntRef();
                        index$iv7.element = 0;
                        $i$f$consumeEach = null;
                        $receiver$iv$iv$iv = receiveChannel;
                        $i$f$consume = 0;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator3 = $receiver$iv$iv$iv.iterator();
                            i3 = 0;
                            z2 = false;
                            z3 = false;
                            $receiver$iv$iv5 = $receiver$iv$iv$iv;
                            $i$f$filterIndexedTo = null;
                            destination = 0;
                            predicate2 = function2;
                            index$iv = index$iv7;
                            $receiver$iv2 = $receiver$iv$iv$iv;
                            obj4 = coroutine_suspended;
                            $receiver$iv$iv$iv2 = receiveChannel;
                            obj3 = null;
                            $receiver$iv3 = receiveChannel;
                            $receiver$iv$iv4 = receiveChannel;
                            c3 = c;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$0 = $receiver$iv3;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$1 = c3;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$2 = predicate2;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$3 = $receiver$iv$iv$iv2;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$4 = index$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$5 = $receiver$iv$iv4;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$7 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$8 = $receiver$iv$iv5;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.L$9 = channelIterator3;
                            channelsKt__Channels_commonKt$filterIndexedTo$3.label = 1;
                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$filterIndexedTo$3);
                            if (hasNext != obj4) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) e$iv$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i5 = 1;
            InlineMarker.finallyStart(i5);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i5);
        }
        channelsKt__Channels_commonKt$filterIndexedTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterIndexedTo$3
            int I$0;
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$11;
            Object L$12;
            Object L$13;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj8) {
                this.result = obj8;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterIndexedTo((ReceiveChannel) null, (SendChannel) null, (Function2) null, this);
            }
        };
        Object e$iv$iv4 = channelsKt__Channels_commonKt$filterIndexedTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterIndexedTo$3.label;
        if (i == 0) {
        }
    }

    private static final Object filterIndexedTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function2 predicate, Continuation continuation) {
        ChannelIterator it;
        int $i$f$filterIndexedTo;
        Object obj;
        int i;
        int $i$f$filterIndexedTo2 = 0;
        ReceiveChannel $receiver$iv = $receiver;
        int i2 = 0;
        int index$iv = 0;
        Throwable e$iv$iv$iv = null;
        int i3 = 1;
        try {
            it = $receiver$iv.iterator();
            $i$f$filterIndexedTo = 0;
            obj = null;
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i2);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i3);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i2);
                Object e$iv$iv = it.next(continuation);
                InlineMarker.mark(i3);
                int index$iv2 = index$iv + 1;
                try {
                    IndexedValue $index_element = new IndexedValue(index$iv, e$iv$iv);
                    int index = $index_element.component1();
                    Object element = $index_element.component2();
                    try {
                        try {
                            if (((Boolean) predicate.invoke(Integer.valueOf(index), element)).booleanValue()) {
                                i = 0;
                                InlineMarker.mark(0);
                                destination.send(element, continuation);
                                InlineMarker.mark(2);
                                InlineMarker.mark(1);
                            } else {
                                i = 0;
                            }
                            $receiver$iv = $receiver$iv;
                            index$iv = index$iv2;
                            obj = element;
                            i2 = i;
                            $i$f$filterIndexedTo2 = $i$f$filterIndexedTo2;
                            $i$f$filterIndexedTo = index;
                            i3 = 1;
                        } catch (Throwable th2) {
                            e$iv$iv$iv = th2;
                        }
                    } catch (Throwable th3) {
                        e$iv$iv$iv = th3;
                    }
                } catch (Throwable th4) {
                    e$iv$iv$iv = th4;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th5) {
                    e$iv$iv$iv = th5;
                }
            }
            try {
                throw e$iv$iv$iv;
            } finally {
                int i4 = 1;
                InlineMarker.finallyStart(i4);
                $receiver$iv.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i4);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel filterNot$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.filterNot(receiveChannel, coroutineContext, function2);
    }

    public static final <E> ReceiveChannel<E> filterNot(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super Boolean>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        return ChannelsKt.filter(receiveChannel, context, new ChannelsKt__Channels_commonKt$filterNot$1(function2, null));
    }

    public static final <E> ReceiveChannel<E> filterNotNull(ReceiveChannel<? extends E> receiveChannel) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        ReceiveChannel<E> receiveChannel2 = filter$default(receiveChannel, null, new ChannelsKt__Channels_commonKt$filterNotNull$1(null), 1, null);
        if (receiveChannel2 != null) {
            return receiveChannel2;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlinx.coroutines.channels.ReceiveChannel<E>");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bd  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ee A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00ef  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00ff A[Catch: all -> 0x0142, TRY_LEAVE, TryCatch #1 {all -> 0x0142, blocks: (B:39:0x00f7, B:41:0x00ff, B:51:0x013b), top: B:68:0x00f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x013b A[Catch: all -> 0x0142, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0142, blocks: (B:39:0x00f7, B:41:0x00ff, B:51:0x013b), top: B:68:0x00f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0128 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v12, types: [java.util.Collection] */
    /* JADX WARN: Type inference failed for: r3v6, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends Collection<? super E>> Object filterNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterNotNullTo$1 channelsKt__Channels_commonKt$filterNotNullTo$1;
        int i;
        ReceiveChannel $i$f$consume;
        int $i$f$consume2;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int cause$iv$iv2;
        ChannelIterator<E> channelIterator;
        Object obj;
        ReceiveChannel $receiver$iv;
        C c2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver$iv4;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv5;
        C c3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterNotNullTo$1) {
                channelsKt__Channels_commonKt$filterNotNullTo$1 = (ChannelsKt__Channels_commonKt$filterNotNullTo$1) continuation;
                if ((channelsKt__Channels_commonKt$filterNotNullTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterNotNullTo$1.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$filterNotNullTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterNotNullTo$1.label;
                    int i2 = 1;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume2 = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotNullTo$1.L$6;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$5;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$filterNotNullTo$1.L$4;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$3;
                            $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$2;
                            ?? r13 = (Collection) channelsKt__Channels_commonKt$filterNotNullTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    $receiver$iv4 = null;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    cause$iv$iv2 = 0;
                                    c3 = r13;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    cause$iv$iv = cause$iv$iv3;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterNotNullTo$1.L$6;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotNullTo$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$3;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$filterNotNullTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    $receiver$iv = $receiver$iv7;
                                    int $i$f$consume3 = 0;
                                    int $i$f$consume4 = 0;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    Object e$iv = obj2;
                                    $receiver$iv4 = null;
                                    ReceiveChannel $receiver$iv8 = $receiver$iv6;
                                    Collection collection = destination;
                                    try {
                                        if (e$iv != null) {
                                            try {
                                                collection.add(e$iv);
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        }
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$1 = c2;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$5 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$filterNotNullTo$1.label = i2;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        $receiver$iv4 = $i$f$consume;
                                        channelIterator2 = channelIterator;
                                        $receiver$iv5 = $receiver$iv;
                                        c3 = c2;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$1 = c3;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$2 = $receiver$iv5;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$5 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$6 = channelIterator2;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.label = 2;
                                                e$iv = channelIterator2.next(channelsKt__Channels_commonKt$filterNotNullTo$1);
                                                if (e$iv == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv8 = $receiver$iv3;
                                                collection = c3;
                                                $receiver$iv = $receiver$iv5;
                                                channelIterator = channelIterator2;
                                                $i$f$consume3 = $i$f$consume2;
                                                $i$f$consume4 = cause$iv$iv2;
                                                obj3 = obj;
                                                if (e$iv != null) {
                                                }
                                                i2 = 1;
                                                $i$f$consume = $receiver$iv4;
                                                $receiver$iv2 = $receiver$iv8;
                                                obj = obj3;
                                                cause$iv$iv2 = $i$f$consume4;
                                                $i$f$consume2 = $i$f$consume3;
                                                c2 = collection;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$1 = c2;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.L$6 = channelIterator;
                                                channelsKt__Channels_commonKt$filterNotNullTo$1.label = i2;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                return c3;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                    i2 = 1;
                                    $i$f$consume = $receiver$iv4;
                                    $receiver$iv2 = $receiver$iv8;
                                    obj = obj3;
                                    cause$iv$iv2 = $i$f$consume4;
                                    $i$f$consume2 = $i$f$consume3;
                                    c2 = collection;
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        $i$f$consume2 = 0;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            cause$iv$iv2 = 0;
                            $i$f$consume = null;
                            obj = coroutine_suspended;
                            $receiver$iv = receiveChannel;
                            $receiver = receiveChannel;
                            c2 = c;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$1 = c2;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$5 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$filterNotNullTo$1.label = i2;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$filterNotNullTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterNotNullTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterNotNullTo((ReceiveChannel) null, (Collection) null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$filterNotNullTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterNotNullTo$1.label;
        int i22 = 1;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r14v3 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x012d A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x012e  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0142 A[Catch: all -> 0x01a8, TRY_LEAVE, TryCatch #3 {all -> 0x01a8, blocks: (B:45:0x013a, B:47:0x0142, B:61:0x01a1), top: B:82:0x013a }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0197  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x01a1 A[Catch: all -> 0x01a8, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x01a8, blocks: (B:45:0x013a, B:47:0x0142, B:61:0x01a1), top: B:82:0x013a }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0169 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r14v5, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r14v6 */
    /* JADX WARN: Type inference failed for: r14v9 */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v13, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Type inference failed for: r4v4 */
    /* JADX WARN: Type inference failed for: r5v10, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v7, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 4 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends SendChannel<? super E>> Object filterNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterNotNullTo$3 channelsKt__Channels_commonKt$filterNotNullTo$3;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        int $i$f$consumeEach;
        boolean z;
        int $i$a$4$consume;
        Object obj;
        C c2;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        ReceiveChannel $receiver$iv4;
        boolean z2;
        ReceiveChannel $receiver;
        C c3;
        int destination;
        ChannelIterator<E> channelIterator2;
        Object e$iv;
        int $i$a$4$consume2;
        Object obj2;
        ChannelIterator<E> channelIterator3;
        int $i$f$consumeEach2;
        C c4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterNotNullTo$3) {
                channelsKt__Channels_commonKt$filterNotNullTo$3 = (ChannelsKt__Channels_commonKt$filterNotNullTo$3) continuation;
                if ((channelsKt__Channels_commonKt$filterNotNullTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterNotNullTo$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$filterNotNullTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterNotNullTo$3.label;
                    ?? r4 = 3;
                    boolean z3 = false;
                    boolean z4 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                destination = 0;
                                ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotNullTo$3.L$6;
                                $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotNullTo$3.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$3;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$2;
                                ?? r5 = (SendChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$0;
                                if (obj3 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj3).exception;
                                }
                                z2 = false;
                                $i$f$consumeEach = 0;
                                $receiver$iv = $receiver$iv5;
                                obj = coroutine_suspended;
                                c3 = r5;
                                channelIterator2 = channelIterator4;
                                if (!((Boolean) obj3).booleanValue()) {
                                }
                            } else if (i == 2) {
                                z4 = false;
                                channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotNullTo$3.L$6;
                                $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotNullTo$3.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$3;
                                r4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$2;
                                ?? r52 = (SendChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$0;
                                if (!(obj3 instanceof Result.Failure)) {
                                    e$iv = obj3;
                                    $i$a$4$consume2 = 0;
                                    obj2 = coroutine_suspended;
                                    $receiver$iv = r4;
                                    $i$f$consumeEach2 = 0;
                                    c4 = r52;
                                    if (e$iv == null) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } else if (i == 3) {
                                $i$a$4$consume2 = 0;
                                Object it = channelsKt__Channels_commonKt$filterNotNullTo$3.L$8;
                                Object e$iv2 = channelsKt__Channels_commonKt$filterNotNullTo$3.L$7;
                                channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotNullTo$3.L$6;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotNullTo$3.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$3;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$2;
                                ?? r14 = (SendChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotNullTo$3.L$0;
                                Object obj4 = coroutine_suspended;
                                try {
                                    if (!(obj3 instanceof Result.Failure)) {
                                        $receiver$iv4 = $receiver$iv6;
                                        $i$f$consumeEach2 = 0;
                                        z3 = false;
                                        $receiver$iv3 = $receiver$iv4;
                                        $receiver$iv2 = $receiver;
                                        z = z3;
                                        $i$f$consumeEach = $i$f$consumeEach2;
                                        $i$a$4$consume = $i$a$4$consume2;
                                        c2 = r14;
                                        channelIterator = channelIterator3;
                                        obj = obj4;
                                        try {
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv3;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator;
                                            channelsKt__Channels_commonKt$filterNotNullTo$3.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$3);
                                            if (hasNext != obj) {
                                                return obj;
                                            }
                                            $receiver$iv4 = $receiver$iv3;
                                            obj3 = hasNext;
                                            z2 = z;
                                            $receiver = $receiver$iv2;
                                            c3 = c2;
                                            destination = $i$a$4$consume;
                                            channelIterator2 = channelIterator;
                                            try {
                                                if (!((Boolean) obj3).booleanValue()) {
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator2;
                                                    channelsKt__Channels_commonKt$filterNotNullTo$3.label = 2;
                                                    e$iv = channelIterator2.next(channelsKt__Channels_commonKt$filterNotNullTo$3);
                                                    if (e$iv == obj) {
                                                        return obj;
                                                    }
                                                    $i$a$4$consume2 = destination;
                                                    obj2 = obj;
                                                    channelIterator3 = channelIterator2;
                                                    $i$f$consumeEach2 = $i$f$consumeEach;
                                                    z3 = z2;
                                                    c4 = c3;
                                                    if (e$iv == null) {
                                                        try {
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c4;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv4;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator3;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$7 = e$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$8 = e$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.label = 3;
                                                            if (c4.send(e$iv, channelsKt__Channels_commonKt$filterNotNullTo$3) == obj2) {
                                                                return obj2;
                                                            }
                                                            obj4 = obj2;
                                                            e$iv2 = e$iv;
                                                            r14 = c4;
                                                            $receiver$iv3 = $receiver$iv4;
                                                            $receiver$iv2 = $receiver;
                                                            z = z3;
                                                            $i$f$consumeEach = $i$f$consumeEach2;
                                                            $i$a$4$consume = $i$a$4$consume2;
                                                            c2 = r14;
                                                            channelIterator = channelIterator3;
                                                            obj = obj4;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c2;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator;
                                                            channelsKt__Channels_commonKt$filterNotNullTo$3.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$3);
                                                            if (hasNext != obj) {
                                                            }
                                                        } catch (Throwable th) {
                                                            e$iv$iv = th;
                                                        }
                                                    } else {
                                                        $receiver$iv3 = $receiver$iv4;
                                                        $receiver$iv2 = $receiver;
                                                        z = z3;
                                                        $i$f$consumeEach = $i$f$consumeEach2;
                                                        channelIterator = channelIterator3;
                                                        obj = obj2;
                                                        c2 = c4;
                                                        $i$a$4$consume = $i$a$4$consume2;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c2;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator;
                                                        channelsKt__Channels_commonKt$filterNotNullTo$3.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$3);
                                                        if (hasNext != obj) {
                                                        }
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj3).exception;
                                    }
                                } catch (Throwable th4) {
                                    e$iv$iv = th4;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv3 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv3.iterator();
                            $receiver$iv = receiveChannel;
                            z = false;
                            $receiver$iv2 = receiveChannel;
                            $i$f$consumeEach = 0;
                            $i$a$4$consume = 0;
                            obj = coroutine_suspended;
                            c2 = c;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$0 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$5 = $receiver$iv3;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$filterNotNullTo$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotNullTo$3);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$filterNotNullTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterNotNullTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterNotNullTo((ReceiveChannel) null, (SendChannel) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$filterNotNullTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterNotNullTo$3.label;
        ?? r42 = 3;
        boolean z32 = false;
        boolean z42 = false;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0110 A[Catch: all -> 0x0155, TRY_LEAVE, TryCatch #1 {all -> 0x0155, blocks: (B:39:0x0108, B:41:0x0110, B:50:0x0147), top: B:67:0x0108 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0141 A[Catch: all -> 0x0157, TRY_LEAVE, TryCatch #3 {all -> 0x0157, blocks: (B:35:0x00e2, B:46:0x0135, B:48:0x0141), top: B:71:0x00e2 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0147 A[Catch: all -> 0x0155, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0155, blocks: (B:39:0x0108, B:41:0x0110, B:50:0x0147), top: B:67:0x0108 }] */
    /* JADX WARN: Type inference failed for: r8v4, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends Collection<? super E>> Object filterNotTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, Boolean> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterNotTo$1 channelsKt__Channels_commonKt$filterNotTo$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 predicate;
        Collection collection;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 predicate2;
        C c2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterNotTo$1) {
                channelsKt__Channels_commonKt$filterNotTo$1 = (ChannelsKt__Channels_commonKt$filterNotTo$1) continuation;
                if ((channelsKt__Channels_commonKt$filterNotTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterNotTo$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$filterNotTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterNotTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$3;
                            predicate2 = (Function1) channelsKt__Channels_commonKt$filterNotTo$1.L$2;
                            ?? r8 = (Collection) channelsKt__Channels_commonKt$filterNotTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    c2 = r8;
                                    z2 = false;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterNotTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$3;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$filterNotTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$filterNotTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    boolean z3 = false;
                                    Object it = obj3;
                                    $receiver$iv2 = $receiver$iv4;
                                    collection = destination;
                                    predicate = predicate3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        if (!predicate.invoke(it).booleanValue()) {
                                            collection.add(it);
                                        }
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$1 = collection;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$2 = predicate;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$filterNotTo$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$filterNotTo$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        predicate2 = predicate;
                                        c2 = collection;
                                        channelIterator2 = channelIterator;
                                        z2 = z;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$1 = c2;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$2 = predicate2;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$filterNotTo$1.label = 2;
                                                it = channelIterator2.next(channelsKt__Channels_commonKt$filterNotTo$1);
                                                if (it == obj2) {
                                                    return obj2;
                                                }
                                                z3 = z2;
                                                channelIterator = channelIterator2;
                                                obj = obj2;
                                                $receiver$iv2 = $receiver$iv3;
                                                collection = c2;
                                                predicate = predicate2;
                                                if (!predicate.invoke(it).booleanValue()) {
                                                }
                                                z = z3;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$1 = collection;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$2 = predicate;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$filterNotTo$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$filterNotTo$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                return c2;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    z = z3;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            $receiver = receiveChannel;
                            predicate = function1;
                            $receiver$iv = receiveChannel;
                            collection = c;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$1 = collection;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$2 = predicate;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterNotTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$filterNotTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$filterNotTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterNotTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterNotTo((ReceiveChannel) null, (Collection) null, (Function1) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$filterNotTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterNotTo$1.label;
        if (i == 0) {
        }
    }

    private static final Object filterNotTo$$forInline(ReceiveChannel $receiver, Collection destination, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    if (!((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        destination.add(e$iv);
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0116  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0153 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0154  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0162 A[Catch: all -> 0x01f2, TRY_LEAVE, TryCatch #0 {all -> 0x01f2, blocks: (B:45:0x015a, B:47:0x0162, B:66:0x01e4), top: B:81:0x015a }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0197 A[Catch: all -> 0x01df, TRY_LEAVE, TryCatch #6 {all -> 0x01df, blocks: (B:52:0x018b, B:54:0x0197), top: B:93:0x018b }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01cf  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01e4 A[Catch: all -> 0x01f2, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x01f2, blocks: (B:45:0x015a, B:47:0x0162, B:66:0x01e4), top: B:81:0x015a }] */
    /* JADX WARN: Removed duplicated region for block: B:95:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v11, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v1 */
    /* JADX WARN: Type inference failed for: r5v8, types: [kotlin.jvm.functions.Function1] */
    /* JADX WARN: Type inference failed for: r7v3, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v6, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v8, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 5 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends SendChannel<? super E>> Object filterNotTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, Boolean> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterNotTo$3 channelsKt__Channels_commonKt$filterNotTo$3;
        int i;
        int $i$a$4$consume;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv;
        ReceiveChannel $receiver$iv$iv;
        Object obj;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver;
        boolean z;
        int $i$f$filterNotTo;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        Object obj2;
        Object e$iv;
        Object obj3;
        ReceiveChannel $receiver$iv3;
        int $i$f$filterNotTo2;
        int $i$f$filterNotTo3;
        int $i$a$4$consume2;
        C c2;
        C c3;
        C c4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterNotTo$3) {
                channelsKt__Channels_commonKt$filterNotTo$3 = (ChannelsKt__Channels_commonKt$filterNotTo$3) continuation;
                if ((channelsKt__Channels_commonKt$filterNotTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterNotTo$3.label -= Integer.MIN_VALUE;
                    Object obj4 = channelsKt__Channels_commonKt$filterNotTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterNotTo$3.label;
                    ?? r4 = 3;
                    ?? r5 = 2;
                    boolean z2 = false;
                    boolean z3 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$4$consume = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterNotTo$3.L$7;
                                ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$4;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$3;
                                Function1 predicate2 = (Function1) channelsKt__Channels_commonKt$filterNotTo$3.L$2;
                                ?? r7 = (SendChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$1;
                                ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$0;
                                if (obj4 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj4).exception;
                                }
                                obj = obj4;
                                $receiver$iv = $receiver$iv4;
                                $receiver = $receiver2;
                                z = false;
                                $i$f$filterNotTo = 0;
                                $receiver$iv2 = $receiver$iv5;
                                predicate = predicate2;
                                obj2 = coroutine_suspended;
                                c3 = r7;
                                if (!((Boolean) obj).booleanValue()) {
                                }
                            } else if (i == 2) {
                                $i$a$4$consume = 0;
                                z3 = false;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterNotTo$3.L$7;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$4;
                                r4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$3;
                                r5 = (Function1) channelsKt__Channels_commonKt$filterNotTo$3.L$2;
                                ?? r72 = (SendChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$0;
                                if (!(obj4 instanceof Result.Failure)) {
                                    e$iv = obj4;
                                    obj3 = coroutine_suspended;
                                    $receiver$iv3 = $receiver$iv6;
                                    $receiver = $receiver3;
                                    $i$f$filterNotTo2 = 0;
                                    $receiver$iv2 = r4;
                                    predicate = r5;
                                    c4 = r72;
                                    if (predicate.invoke(e$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj4).exception;
                                }
                            } else if (i == 3) {
                                Object it = channelsKt__Channels_commonKt$filterNotTo$3.L$9;
                                Object e$iv2 = channelsKt__Channels_commonKt$filterNotTo$3.L$8;
                                ChannelIterator<E> channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$filterNotTo$3.L$7;
                                $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterNotTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$4;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$3;
                                Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$filterNotTo$3.L$2;
                                ?? r73 = (SendChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$1;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterNotTo$3.L$0;
                                try {
                                    if (!(obj4 instanceof Result.Failure)) {
                                        int $i$f$filterNotTo4 = 0;
                                        z2 = false;
                                        obj3 = coroutine_suspended;
                                        ReceiveChannel $receiver5 = $receiver4;
                                        $i$a$4$consume = 0;
                                        C c5 = r73;
                                        channelIterator = channelIterator2;
                                        predicate = predicate3;
                                        z = z2;
                                        $i$a$4$consume2 = $i$a$4$consume;
                                        c2 = c5;
                                        $i$f$filterNotTo3 = $i$f$filterNotTo4;
                                        $receiver = $receiver5;
                                        obj2 = obj3;
                                        $receiver$iv = $receiver$iv3;
                                        try {
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv;
                                            channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                                            channelsKt__Channels_commonKt$filterNotTo$3.label = 1;
                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$3);
                                            if (obj != obj2) {
                                                return obj2;
                                            }
                                            c3 = c2;
                                            $i$a$4$consume = $i$a$4$consume2;
                                            $i$f$filterNotTo = $i$f$filterNotTo3;
                                            try {
                                                if (!((Boolean) obj).booleanValue()) {
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$filterNotTo$3.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$filterNotTo$3);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        $receiver$iv3 = $receiver$iv;
                                                        obj3 = obj2;
                                                        $i$f$filterNotTo2 = $i$f$filterNotTo;
                                                        z2 = z;
                                                        c4 = c3;
                                                        if (predicate.invoke(e$iv).booleanValue()) {
                                                            try {
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c4;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv3;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$8 = e$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$9 = e$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.label = 3;
                                                                if (c4.send(e$iv, channelsKt__Channels_commonKt$filterNotTo$3) == obj3) {
                                                                    return obj3;
                                                                }
                                                                $i$f$filterNotTo4 = $i$f$filterNotTo2;
                                                                e$iv2 = e$iv;
                                                                predicate3 = predicate;
                                                                channelIterator2 = channelIterator;
                                                                c5 = c4;
                                                                channelIterator = channelIterator2;
                                                                predicate = predicate3;
                                                                z = z2;
                                                                $i$a$4$consume2 = $i$a$4$consume;
                                                                c2 = c5;
                                                                $i$f$filterNotTo3 = $i$f$filterNotTo4;
                                                                $receiver = $receiver5;
                                                                obj2 = obj3;
                                                                $receiver$iv = $receiver$iv3;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c2;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$filterNotTo$3.label = 1;
                                                                obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$3);
                                                                if (obj != obj2) {
                                                                }
                                                            } catch (Throwable th) {
                                                                e$iv$iv = th;
                                                            }
                                                            $receiver5 = $receiver;
                                                        } else {
                                                            obj2 = obj3;
                                                            $receiver$iv = $receiver$iv3;
                                                            $i$a$4$consume2 = $i$a$4$consume;
                                                            c2 = c4;
                                                            $i$f$filterNotTo3 = $i$f$filterNotTo2;
                                                            z = z2;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c2;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$filterNotTo$3.label = 1;
                                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$3);
                                                            if (obj != obj2) {
                                                            }
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj4).exception;
                                    }
                                } catch (Throwable th5) {
                                    e$iv$iv = th5;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else if (!(obj4 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            $i$f$filterNotTo3 = 0;
                            $receiver$iv2 = receiveChannel;
                            z = false;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            c2 = c;
                            $i$a$4$consume2 = 0;
                            predicate = function1;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$2 = predicate;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$3 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$6 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterNotTo$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$filterNotTo$3.label = 1;
                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterNotTo$3);
                            if (obj != obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj4).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$filterNotTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterNotTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterNotTo((ReceiveChannel) null, (SendChannel) null, (Function1) null, this);
            }
        };
        Object obj42 = channelsKt__Channels_commonKt$filterNotTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterNotTo$3.label;
        ?? r42 = 3;
        ?? r52 = 2;
        boolean z22 = false;
        boolean z32 = false;
        if (i == 0) {
        }
    }

    private static final Object filterNotTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Throwable e$iv$iv = null;
        int i = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(0);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(0);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i);
                try {
                    if (!((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        InlineMarker.mark(0);
                        destination.send(e$iv, continuation);
                        InlineMarker.mark(2);
                        InlineMarker.mark(1);
                    }
                    i = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i2 = 1;
                InlineMarker.finallyStart(i2);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i2);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0110 A[Catch: all -> 0x0155, TRY_LEAVE, TryCatch #1 {all -> 0x0155, blocks: (B:39:0x0108, B:41:0x0110, B:50:0x0147), top: B:67:0x0108 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0141 A[Catch: all -> 0x0157, TRY_LEAVE, TryCatch #3 {all -> 0x0157, blocks: (B:35:0x00e2, B:46:0x0135, B:48:0x0141), top: B:71:0x00e2 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0147 A[Catch: all -> 0x0155, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0155, blocks: (B:39:0x0108, B:41:0x0110, B:50:0x0147), top: B:67:0x0108 }] */
    /* JADX WARN: Type inference failed for: r8v4, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends Collection<? super E>> Object filterTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, Boolean> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterTo$1 channelsKt__Channels_commonKt$filterTo$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 predicate;
        Collection collection;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 predicate2;
        C c2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterTo$1) {
                channelsKt__Channels_commonKt$filterTo$1 = (ChannelsKt__Channels_commonKt$filterTo$1) continuation;
                if ((channelsKt__Channels_commonKt$filterTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterTo$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$filterTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$filterTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$3;
                            predicate2 = (Function1) channelsKt__Channels_commonKt$filterTo$1.L$2;
                            ?? r8 = (Collection) channelsKt__Channels_commonKt$filterTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    c2 = r8;
                                    z2 = false;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$3;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$filterTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$filterTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    boolean z3 = false;
                                    Object it = obj3;
                                    $receiver$iv2 = $receiver$iv4;
                                    collection = destination;
                                    predicate = predicate3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        if (predicate.invoke(it).booleanValue()) {
                                            collection.add(it);
                                        }
                                        channelsKt__Channels_commonKt$filterTo$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$filterTo$1.L$1 = collection;
                                        channelsKt__Channels_commonKt$filterTo$1.L$2 = predicate;
                                        channelsKt__Channels_commonKt$filterTo$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$filterTo$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$filterTo$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$filterTo$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$filterTo$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$filterTo$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        predicate2 = predicate;
                                        c2 = collection;
                                        channelIterator2 = channelIterator;
                                        z2 = z;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$filterTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterTo$1.L$1 = c2;
                                                channelsKt__Channels_commonKt$filterTo$1.L$2 = predicate2;
                                                channelsKt__Channels_commonKt$filterTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$filterTo$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$filterTo$1.label = 2;
                                                it = channelIterator2.next(channelsKt__Channels_commonKt$filterTo$1);
                                                if (it == obj2) {
                                                    return obj2;
                                                }
                                                z3 = z2;
                                                channelIterator = channelIterator2;
                                                obj = obj2;
                                                $receiver$iv2 = $receiver$iv3;
                                                collection = c2;
                                                predicate = predicate2;
                                                if (predicate.invoke(it).booleanValue()) {
                                                }
                                                z = z3;
                                                channelsKt__Channels_commonKt$filterTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$filterTo$1.L$1 = collection;
                                                channelsKt__Channels_commonKt$filterTo$1.L$2 = predicate;
                                                channelsKt__Channels_commonKt$filterTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$filterTo$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$filterTo$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$filterTo$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                return c2;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    z = z3;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            $receiver = receiveChannel;
                            predicate = function1;
                            $receiver$iv = receiveChannel;
                            collection = c;
                            channelsKt__Channels_commonKt$filterTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$filterTo$1.L$1 = collection;
                            channelsKt__Channels_commonKt$filterTo$1.L$2 = predicate;
                            channelsKt__Channels_commonKt$filterTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$filterTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$filterTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterTo((ReceiveChannel) null, (Collection) null, (Function1) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$filterTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterTo$1.label;
        if (i == 0) {
        }
    }

    private static final Object filterTo$$forInline(ReceiveChannel $receiver, Collection destination, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        destination.add(e$iv);
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0116  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0153 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0154  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0162 A[Catch: all -> 0x01f2, TRY_LEAVE, TryCatch #0 {all -> 0x01f2, blocks: (B:45:0x015a, B:47:0x0162, B:66:0x01e4), top: B:81:0x015a }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0197 A[Catch: all -> 0x01df, TRY_LEAVE, TryCatch #6 {all -> 0x01df, blocks: (B:52:0x018b, B:54:0x0197), top: B:93:0x018b }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01cf  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01e4 A[Catch: all -> 0x01f2, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x01f2, blocks: (B:45:0x015a, B:47:0x0162, B:66:0x01e4), top: B:81:0x015a }] */
    /* JADX WARN: Removed duplicated region for block: B:95:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v11, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v1 */
    /* JADX WARN: Type inference failed for: r5v8, types: [kotlin.jvm.functions.Function1] */
    /* JADX WARN: Type inference failed for: r7v3, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v6, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v8, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 5 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends SendChannel<? super E>> Object filterTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, Boolean> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$filterTo$3 channelsKt__Channels_commonKt$filterTo$3;
        int i;
        int $i$a$4$consume;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv;
        ReceiveChannel $receiver$iv$iv;
        Object obj;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver;
        boolean z;
        int $i$f$filterTo;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        Object obj2;
        Object e$iv;
        Object obj3;
        ReceiveChannel $receiver$iv3;
        int $i$f$filterTo2;
        int $i$f$filterTo3;
        int $i$a$4$consume2;
        C c2;
        C c3;
        C c4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$filterTo$3) {
                channelsKt__Channels_commonKt$filterTo$3 = (ChannelsKt__Channels_commonKt$filterTo$3) continuation;
                if ((channelsKt__Channels_commonKt$filterTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$filterTo$3.label -= Integer.MIN_VALUE;
                    Object obj4 = channelsKt__Channels_commonKt$filterTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$filterTo$3.label;
                    ?? r4 = 3;
                    ?? r5 = 2;
                    boolean z2 = false;
                    boolean z3 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$4$consume = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterTo$3.L$7;
                                ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$4;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$3;
                                Function1 predicate2 = (Function1) channelsKt__Channels_commonKt$filterTo$3.L$2;
                                ?? r7 = (SendChannel) channelsKt__Channels_commonKt$filterTo$3.L$1;
                                ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$0;
                                if (obj4 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj4).exception;
                                }
                                obj = obj4;
                                $receiver$iv = $receiver$iv4;
                                $receiver = $receiver2;
                                z = false;
                                $i$f$filterTo = 0;
                                $receiver$iv2 = $receiver$iv5;
                                predicate = predicate2;
                                obj2 = coroutine_suspended;
                                c3 = r7;
                                if (!((Boolean) obj).booleanValue()) {
                                }
                            } else if (i == 2) {
                                $i$a$4$consume = 0;
                                z3 = false;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$filterTo$3.L$7;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$4;
                                r4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$3;
                                r5 = (Function1) channelsKt__Channels_commonKt$filterTo$3.L$2;
                                ?? r72 = (SendChannel) channelsKt__Channels_commonKt$filterTo$3.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$0;
                                if (!(obj4 instanceof Result.Failure)) {
                                    e$iv = obj4;
                                    obj3 = coroutine_suspended;
                                    $receiver$iv3 = $receiver$iv6;
                                    $receiver = $receiver3;
                                    $i$f$filterTo2 = 0;
                                    $receiver$iv2 = r4;
                                    predicate = r5;
                                    c4 = r72;
                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj4).exception;
                                }
                            } else if (i == 3) {
                                Object it = channelsKt__Channels_commonKt$filterTo$3.L$9;
                                Object e$iv2 = channelsKt__Channels_commonKt$filterTo$3.L$8;
                                ChannelIterator<E> channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$filterTo$3.L$7;
                                $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$filterTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$4;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$3;
                                Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$filterTo$3.L$2;
                                ?? r73 = (SendChannel) channelsKt__Channels_commonKt$filterTo$3.L$1;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$filterTo$3.L$0;
                                try {
                                    if (!(obj4 instanceof Result.Failure)) {
                                        int $i$f$filterTo4 = 0;
                                        z2 = false;
                                        obj3 = coroutine_suspended;
                                        ReceiveChannel $receiver5 = $receiver4;
                                        $i$a$4$consume = 0;
                                        C c5 = r73;
                                        channelIterator = channelIterator2;
                                        predicate = predicate3;
                                        z = z2;
                                        $i$a$4$consume2 = $i$a$4$consume;
                                        c2 = c5;
                                        $i$f$filterTo3 = $i$f$filterTo4;
                                        $receiver = $receiver5;
                                        obj2 = obj3;
                                        $receiver$iv = $receiver$iv3;
                                        try {
                                            channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$filterTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                                            channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv;
                                            channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                                            channelsKt__Channels_commonKt$filterTo$3.label = 1;
                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$3);
                                            if (obj != obj2) {
                                                return obj2;
                                            }
                                            c3 = c2;
                                            $i$a$4$consume = $i$a$4$consume2;
                                            $i$f$filterTo = $i$f$filterTo3;
                                            try {
                                                if (!((Boolean) obj).booleanValue()) {
                                                    channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$filterTo$3.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$filterTo$3);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        $receiver$iv3 = $receiver$iv;
                                                        obj3 = obj2;
                                                        $i$f$filterTo2 = $i$f$filterTo;
                                                        z2 = z;
                                                        c4 = c3;
                                                        if (!predicate.invoke(e$iv).booleanValue()) {
                                                            try {
                                                                channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$1 = c4;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv3;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$8 = e$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$9 = e$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.label = 3;
                                                                if (c4.send(e$iv, channelsKt__Channels_commonKt$filterTo$3) == obj3) {
                                                                    return obj3;
                                                                }
                                                                $i$f$filterTo4 = $i$f$filterTo2;
                                                                e$iv2 = e$iv;
                                                                predicate3 = predicate;
                                                                channelIterator2 = channelIterator;
                                                                c5 = c4;
                                                                channelIterator = channelIterator2;
                                                                predicate = predicate3;
                                                                z = z2;
                                                                $i$a$4$consume2 = $i$a$4$consume;
                                                                c2 = c5;
                                                                $i$f$filterTo3 = $i$f$filterTo4;
                                                                $receiver = $receiver5;
                                                                obj2 = obj3;
                                                                $receiver$iv = $receiver$iv3;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$1 = c2;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$filterTo$3.label = 1;
                                                                obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$3);
                                                                if (obj != obj2) {
                                                                }
                                                            } catch (Throwable th) {
                                                                e$iv$iv = th;
                                                            }
                                                            $receiver5 = $receiver;
                                                        } else {
                                                            obj2 = obj3;
                                                            $receiver$iv = $receiver$iv3;
                                                            $i$a$4$consume2 = $i$a$4$consume;
                                                            c2 = c4;
                                                            $i$f$filterTo3 = $i$f$filterTo2;
                                                            z = z2;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$1 = c2;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$filterTo$3.label = 1;
                                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$3);
                                                            if (obj != obj2) {
                                                            }
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj4).exception;
                                    }
                                } catch (Throwable th5) {
                                    e$iv$iv = th5;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else if (!(obj4 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            $i$f$filterTo3 = 0;
                            $receiver$iv2 = receiveChannel;
                            z = false;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            c2 = c;
                            $i$a$4$consume2 = 0;
                            predicate = function1;
                            channelsKt__Channels_commonKt$filterTo$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$filterTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$filterTo$3.L$2 = predicate;
                            channelsKt__Channels_commonKt$filterTo$3.L$3 = $receiver$iv2;
                            channelsKt__Channels_commonKt$filterTo$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$filterTo$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$filterTo$3.L$6 = $receiver$iv;
                            channelsKt__Channels_commonKt$filterTo$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$filterTo$3.label = 1;
                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$filterTo$3);
                            if (obj != obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj4).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$filterTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$filterTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.filterTo((ReceiveChannel) null, (SendChannel) null, (Function1) null, this);
            }
        };
        Object obj42 = channelsKt__Channels_commonKt$filterTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$filterTo$3.label;
        ?? r42 = 3;
        ?? r52 = 2;
        boolean z22 = false;
        boolean z32 = false;
        if (i == 0) {
        }
    }

    private static final Object filterTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function1 predicate, Continuation continuation) {
        ChannelIterator it;
        Throwable e$iv$iv = null;
        int i = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(0);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(0);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        InlineMarker.mark(0);
                        destination.send(e$iv, continuation);
                        InlineMarker.mark(2);
                        InlineMarker.mark(1);
                    }
                    i = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i2 = 1;
                InlineMarker.finallyStart(i2);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i2);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel take$default(ReceiveChannel receiveChannel, int i, CoroutineContext coroutineContext, int i2, Object obj) {
        if ((i2 & 2) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.take(receiveChannel, i, coroutineContext);
    }

    public static final <E> ReceiveChannel<E> take(ReceiveChannel<? extends E> receiveChannel, int n, CoroutineContext context) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$take$1(receiveChannel, n, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel takeWhile$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.takeWhile(receiveChannel, coroutineContext, function2);
    }

    public static final <E> ReceiveChannel<E> takeWhile(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super Boolean>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$takeWhile$1(receiveChannel, function2, null), 2, null);
    }

    /* JADX INFO: Multiple debug info for r12v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v2 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d6  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x011e A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011f  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0136 A[Catch: all -> 0x0196, TRY_LEAVE, TryCatch #3 {all -> 0x0196, blocks: (B:41:0x012e, B:43:0x0136, B:56:0x0187), top: B:79:0x012e }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0187 A[Catch: all -> 0x0196, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x0196, blocks: (B:41:0x012e, B:43:0x0136, B:56:0x0187), top: B:79:0x012e }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V> Object associate(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends Pair<? extends K, ? extends V>> function1, Continuation<? super Map<K, ? extends V>> continuation) {
        ChannelsKt__Channels_commonKt$associate$1 channelsKt__Channels_commonKt$associate$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        Map destination$iv;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        Object obj;
        Function1 transform;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv$iv3;
        Function1 transform2;
        Object obj2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv$iv$iv2;
        ReceiveChannel $receiver$iv$iv$iv3;
        boolean z2;
        Map destination$iv2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associate$1) {
                channelsKt__Channels_commonKt$associate$1 = (ChannelsKt__Channels_commonKt$associate$1) continuation;
                if ((channelsKt__Channels_commonKt$associate$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associate$1.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$associate$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associate$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$associate$1.L$8;
                            ReceiveChannel $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$associate$1.L$6;
                            $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$4;
                            Map destination$iv3 = (Map) channelsKt__Channels_commonKt$associate$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$2;
                            Function1 transform3 = (Function1) channelsKt__Channels_commonKt$associate$1.L$1;
                            $receiver$iv$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    z2 = false;
                                    $receiver$iv$iv3 = $receiver$iv$iv4;
                                    transform2 = transform3;
                                    channelIterator2 = channelIterator3;
                                    destination$iv2 = destination$iv3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associate$1.L$8;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$associate$1.L$6;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$4;
                            Map destination$iv4 = (Map) channelsKt__Channels_commonKt$associate$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$2;
                            Function1 transform4 = (Function1) channelsKt__Channels_commonKt$associate$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associate$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    $receiver = $receiver2;
                                    z2 = false;
                                    ReceiveChannel $receiver$iv$iv6 = $receiver$iv$iv5;
                                    transform = transform4;
                                    obj2 = coroutine_suspended;
                                    Map destination$iv5 = destination$iv4;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    Pair pair = (Pair) transform.invoke(it$iv);
                                                    destination$iv5.put(pair.getFirst(), pair.getSecond());
                                                    channelsKt__Channels_commonKt$associate$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$associate$1.L$1 = transform;
                                                    channelsKt__Channels_commonKt$associate$1.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$associate$1.L$3 = destination$iv;
                                                    channelsKt__Channels_commonKt$associate$1.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$associate$1.L$5 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$associate$1.L$6 = cause$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$associate$1.L$7 = $receiver$iv$iv2;
                                                    channelsKt__Channels_commonKt$associate$1.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$associate$1.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associate$1);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                    it$iv = hasNext;
                                                    transform2 = transform;
                                                    obj2 = obj;
                                                    channelIterator2 = channelIterator;
                                                    $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                                                    $receiver$iv$iv$iv3 = $receiver;
                                                    z2 = z;
                                                    destination$iv2 = destination$iv;
                                                    try {
                                                        if (!((Boolean) it$iv).booleanValue()) {
                                                            channelsKt__Channels_commonKt$associate$1.L$0 = $receiver$iv$iv$iv3;
                                                            channelsKt__Channels_commonKt$associate$1.L$1 = transform2;
                                                            channelsKt__Channels_commonKt$associate$1.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$3 = destination$iv2;
                                                            channelsKt__Channels_commonKt$associate$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$5 = $receiver$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$associate$1.L$6 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$7 = $receiver$iv$iv3;
                                                            channelsKt__Channels_commonKt$associate$1.L$8 = channelIterator2;
                                                            channelsKt__Channels_commonKt$associate$1.label = 2;
                                                            it$iv = channelIterator2.next(channelsKt__Channels_commonKt$associate$1);
                                                            if (it$iv == obj2) {
                                                                return obj2;
                                                            }
                                                            transform = transform2;
                                                            $receiver = $receiver$iv$iv$iv3;
                                                            $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                            channelIterator = channelIterator2;
                                                            $receiver$iv$iv6 = $receiver$iv$iv3;
                                                            destination$iv5 = destination$iv2;
                                                            Pair pair2 = (Pair) transform.invoke(it$iv);
                                                            destination$iv5.put(pair2.getFirst(), pair2.getSecond());
                                                            $receiver$iv$iv2 = $receiver$iv$iv6;
                                                            obj = obj2;
                                                            z = z2;
                                                            channelsKt__Channels_commonKt$associate$1 = channelsKt__Channels_commonKt$associate$1;
                                                            destination$iv = destination$iv5;
                                                            channelsKt__Channels_commonKt$associate$1.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$associate$1.L$1 = transform;
                                                            channelsKt__Channels_commonKt$associate$1.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$3 = destination$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$5 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$6 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associate$1.L$7 = $receiver$iv$iv2;
                                                            channelsKt__Channels_commonKt$associate$1.L$8 = channelIterator;
                                                            channelsKt__Channels_commonKt$associate$1.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associate$1);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return destination$iv2;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv$iv = th2;
                                                        $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv$iv = th6;
                                    }
                                    $receiver$iv$iv2 = $receiver$iv$iv6;
                                    obj = obj2;
                                    z = z2;
                                    channelsKt__Channels_commonKt$associate$1 = channelsKt__Channels_commonKt$associate$1;
                                    destination$iv = destination$iv5;
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        Map destination$iv6 = new LinkedHashMap();
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            z = false;
                            destination$iv = destination$iv6;
                            $receiver$iv$iv2 = $receiver$iv$iv$iv;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            transform = function1;
                            channelsKt__Channels_commonKt$associate$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$associate$1.L$1 = transform;
                            channelsKt__Channels_commonKt$associate$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$associate$1.L$3 = destination$iv;
                            channelsKt__Channels_commonKt$associate$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associate$1.L$5 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$associate$1.L$6 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$associate$1.L$7 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$associate$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$associate$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associate$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associate$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associate$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associate(null, null, this);
            }
        };
        Object it$iv2 = channelsKt__Channels_commonKt$associate$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associate$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object associate$$forInline(ReceiveChannel $receiver, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        int $i$f$associate = 0;
        Map destination$iv = new LinkedHashMap();
        int i = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Pair pair = (Pair) transform.invoke(e$iv$iv);
                    try {
                        destination$iv.put(pair.getFirst(), pair.getSecond());
                        continuation2 = continuation;
                        $i$f$associate = $i$f$associate;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv$iv = th2;
                    }
                } catch (Throwable th3) {
                    e$iv$iv$iv = th3;
                    throw e$iv$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination$iv;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v2 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d6  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x011e A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011f  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0136 A[Catch: all -> 0x0185, TRY_LEAVE, TryCatch #2 {all -> 0x0185, blocks: (B:41:0x012e, B:43:0x0136, B:52:0x0176), top: B:73:0x012e }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0176 A[Catch: all -> 0x0185, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x0185, blocks: (B:41:0x012e, B:43:0x0136, B:52:0x0176), top: B:73:0x012e }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K> Object associateBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends K> function1, Continuation<? super Map<K, ? extends E>> continuation) {
        ChannelsKt__Channels_commonKt$associateBy$1 channelsKt__Channels_commonKt$associateBy$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        Map destination$iv;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        Object obj;
        Function1 keySelector;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv2;
        ReceiveChannel $receiver2;
        Object hasNext;
        ReceiveChannel $receiver$iv$iv3;
        Function1 keySelector2;
        Object obj2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv$iv$iv2;
        boolean z2;
        Map destination$iv2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associateBy$1) {
                channelsKt__Channels_commonKt$associateBy$1 = (ChannelsKt__Channels_commonKt$associateBy$1) continuation;
                if ((channelsKt__Channels_commonKt$associateBy$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associateBy$1.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$associateBy$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associateBy$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$associateBy$1.L$8;
                            ReceiveChannel $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateBy$1.L$6;
                            $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$4;
                            Map destination$iv3 = (Map) channelsKt__Channels_commonKt$associateBy$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$2;
                            Function1 keySelector3 = (Function1) channelsKt__Channels_commonKt$associateBy$1.L$1;
                            $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    z2 = false;
                                    $receiver$iv$iv3 = $receiver$iv$iv4;
                                    keySelector2 = keySelector3;
                                    channelIterator2 = channelIterator3;
                                    destination$iv2 = destination$iv3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associateBy$1.L$8;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateBy$1.L$6;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$4;
                            Map destination$iv4 = (Map) channelsKt__Channels_commonKt$associateBy$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$2;
                            Function1 keySelector4 = (Function1) channelsKt__Channels_commonKt$associateBy$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    $receiver = $receiver3;
                                    z2 = false;
                                    ReceiveChannel $receiver$iv$iv6 = $receiver$iv$iv5;
                                    keySelector = keySelector4;
                                    obj2 = coroutine_suspended;
                                    Map destination$iv5 = destination$iv4;
                                    try {
                                        try {
                                            try {
                                                destination$iv5.put(keySelector.invoke(it$iv), it$iv);
                                                channelsKt__Channels_commonKt$associateBy$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$associateBy$1.L$1 = keySelector;
                                                channelsKt__Channels_commonKt$associateBy$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$associateBy$1.L$3 = destination$iv;
                                                channelsKt__Channels_commonKt$associateBy$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$associateBy$1.L$5 = $receiver$iv$iv$iv;
                                                channelsKt__Channels_commonKt$associateBy$1.L$6 = cause$iv$iv$iv;
                                                channelsKt__Channels_commonKt$associateBy$1.L$7 = $receiver$iv$iv2;
                                                channelsKt__Channels_commonKt$associateBy$1.L$8 = channelIterator;
                                                channelsKt__Channels_commonKt$associateBy$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$1);
                                                if (hasNext == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv$iv3 = $receiver$iv$iv2;
                                                it$iv = hasNext;
                                                keySelector2 = keySelector;
                                                obj2 = obj;
                                                channelIterator2 = channelIterator;
                                                $receiver2 = $receiver$iv$iv$iv;
                                                $receiver$iv$iv$iv2 = $receiver;
                                                z2 = z;
                                                destination$iv2 = destination$iv;
                                                try {
                                                    if (!((Boolean) it$iv).booleanValue()) {
                                                        channelsKt__Channels_commonKt$associateBy$1.L$0 = $receiver$iv$iv$iv2;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$1 = keySelector2;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$3 = destination$iv2;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$5 = $receiver2;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$6 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$7 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$associateBy$1.label = 2;
                                                        it$iv = channelIterator2.next(channelsKt__Channels_commonKt$associateBy$1);
                                                        if (it$iv == obj2) {
                                                            return obj2;
                                                        }
                                                        keySelector = keySelector2;
                                                        $receiver = $receiver$iv$iv$iv2;
                                                        $receiver$iv$iv$iv = $receiver2;
                                                        channelIterator = channelIterator2;
                                                        $receiver$iv$iv6 = $receiver$iv$iv3;
                                                        destination$iv5 = destination$iv2;
                                                        destination$iv5.put(keySelector.invoke(it$iv), it$iv);
                                                        channelsKt__Channels_commonKt$associateBy$1 = channelsKt__Channels_commonKt$associateBy$1;
                                                        $receiver$iv$iv2 = $receiver$iv$iv6;
                                                        obj = obj2;
                                                        z = z2;
                                                        destination$iv = destination$iv5;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$1 = keySelector;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$3 = destination$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$5 = $receiver$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$6 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$7 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$associateBy$1.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$associateBy$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        return destination$iv2;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv$iv = th2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv$iv = th3;
                                                $receiver2 = $receiver$iv$iv$iv;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv$iv = th4;
                                            $receiver2 = $receiver$iv$iv$iv;
                                        }
                                        channelsKt__Channels_commonKt$associateBy$1 = channelsKt__Channels_commonKt$associateBy$1;
                                        $receiver$iv$iv2 = $receiver$iv$iv6;
                                        obj = obj2;
                                        z = z2;
                                        destination$iv = destination$iv5;
                                    } catch (Throwable th5) {
                                        e$iv$iv$iv = th5;
                                        $receiver2 = $receiver$iv$iv$iv;
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv$iv = th6;
                                $receiver2 = $receiver$iv$iv$iv;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        Map destination$iv6 = new LinkedHashMap();
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            z = false;
                            destination$iv = destination$iv6;
                            $receiver$iv$iv2 = $receiver$iv$iv$iv;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            keySelector = function1;
                            channelsKt__Channels_commonKt$associateBy$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$associateBy$1.L$1 = keySelector;
                            channelsKt__Channels_commonKt$associateBy$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$associateBy$1.L$3 = destination$iv;
                            channelsKt__Channels_commonKt$associateBy$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$1.L$5 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$1.L$6 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$1.L$7 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$associateBy$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$associateBy$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv$iv = th7;
                            $receiver2 = $receiver$iv$iv$iv;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver2.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associateBy$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associateBy$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associateBy(null, null, this);
            }
        };
        Object it$iv2 = channelsKt__Channels_commonKt$associateBy$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associateBy$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object associateBy$$forInline(ReceiveChannel $receiver, Function1 keySelector, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        Map destination$iv = new LinkedHashMap();
        int i = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    destination$iv.put(keySelector.invoke(e$iv$iv), e$iv$iv);
                    continuation2 = continuation;
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination$iv;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0140 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x015a A[Catch: all -> 0x01d0, TRY_LEAVE, TryCatch #0 {all -> 0x01d0, blocks: (B:41:0x0152, B:43:0x015a, B:56:0x01c1), top: B:73:0x0152 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01c1 A[Catch: all -> 0x01d0, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x01d0, blocks: (B:41:0x0152, B:43:0x015a, B:56:0x01c1), top: B:73:0x0152 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V> Object associateBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends K> function1, Function1<? super E, ? extends V> function12, Continuation<? super Map<K, ? extends V>> continuation) {
        ChannelsKt__Channels_commonKt$associateBy$2 channelsKt__Channels_commonKt$associateBy$2;
        int i;
        Function1 valueTransform;
        int $i$f$consumeEach;
        ReceiveChannel $receiver$iv;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        Object obj;
        Map destination$iv;
        Throwable cause$iv$iv$iv;
        Function1 valueTransform2;
        ChannelIterator<E> channelIterator;
        Function1 keySelector;
        ReceiveChannel $receiver$iv$iv2;
        ReceiveChannel $receiver$iv$iv3;
        Object hasNext;
        int $i$a$4$consume;
        int $i$a$4$consume2;
        Function1 $i$f$consume2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv4;
        Function1 keySelector2;
        Function1 valueTransform3;
        Throwable cause$iv$iv$iv2;
        Map destination$iv2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associateBy$2) {
                channelsKt__Channels_commonKt$associateBy$2 = (ChannelsKt__Channels_commonKt$associateBy$2) continuation;
                if ((channelsKt__Channels_commonKt$associateBy$2.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associateBy$2.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$associateBy$2.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associateBy$2.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume2 = 0;
                            $i$f$consume2 = null;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associateBy$2.L$9;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$8;
                            cause$iv$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$associateBy$2.L$7;
                            ReceiveChannel $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$5;
                            Map destination$iv3 = (Map) channelsKt__Channels_commonKt$associateBy$2.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$3;
                            Function1 valueTransform4 = (Function1) channelsKt__Channels_commonKt$associateBy$2.L$2;
                            Function1 keySelector3 = (Function1) channelsKt__Channels_commonKt$associateBy$2.L$1;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    $i$a$4$consume = 0;
                                    channelsKt__Channels_commonKt$associateBy$2 = channelsKt__Channels_commonKt$associateBy$2;
                                    $receiver$iv$iv4 = $receiver$iv$iv5;
                                    keySelector2 = keySelector3;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                    valueTransform3 = valueTransform4;
                                    obj = coroutine_suspended;
                                    destination$iv2 = destination$iv3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associateBy$2.L$9;
                            ReceiveChannel $receiver$iv$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$8;
                            Throwable cause$iv$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$associateBy$2.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$5;
                            Map destination$iv4 = (Map) channelsKt__Channels_commonKt$associateBy$2.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$3;
                            Function1 valueTransform5 = (Function1) channelsKt__Channels_commonKt$associateBy$2.L$2;
                            Function1 keySelector4 = (Function1) channelsKt__Channels_commonKt$associateBy$2.L$1;
                            Object obj2 = coroutine_suspended;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateBy$2.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver3 = $receiver2;
                                    ReceiveChannel $receiver$iv$iv7 = $receiver$iv$iv6;
                                    keySelector = keySelector4;
                                    cause$iv$iv$iv = cause$iv$iv$iv3;
                                    valueTransform2 = valueTransform5;
                                    valueTransform = null;
                                    $i$f$consumeEach = 0;
                                    $i$f$consume = 0;
                                    Map destination$iv5 = destination$iv4;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    destination$iv5.put(keySelector.invoke(it$iv), valueTransform2.invoke(it$iv));
                                                    channelsKt__Channels_commonKt$associateBy$2.L$0 = $receiver$iv$iv2;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$1 = keySelector;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$2 = valueTransform2;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$4 = destination$iv;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$6 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$7 = cause$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$8 = $receiver$iv$iv3;
                                                    channelsKt__Channels_commonKt$associateBy$2.L$9 = channelIterator;
                                                    channelsKt__Channels_commonKt$associateBy$2.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$2);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    $i$a$4$consume = $i$f$consume;
                                                    $i$a$4$consume2 = $i$f$consumeEach;
                                                    $i$f$consume2 = valueTransform;
                                                    $receiver = $receiver$iv$iv2;
                                                    $receiver$iv$iv4 = $receiver$iv$iv3;
                                                    it$iv = hasNext;
                                                    keySelector2 = keySelector;
                                                    valueTransform3 = valueTransform2;
                                                    cause$iv$iv$iv2 = cause$iv$iv$iv;
                                                    destination$iv2 = destination$iv;
                                                    try {
                                                        if (!((Boolean) it$iv).booleanValue()) {
                                                            channelsKt__Channels_commonKt$associateBy$2.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$1 = keySelector2;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$2 = valueTransform3;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$4 = destination$iv2;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$6 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$7 = cause$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$8 = $receiver$iv$iv4;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$9 = channelIterator;
                                                            channelsKt__Channels_commonKt$associateBy$2.label = 2;
                                                            it$iv = channelIterator.next(channelsKt__Channels_commonKt$associateBy$2);
                                                            if (it$iv == obj) {
                                                                return obj;
                                                            }
                                                            obj2 = obj;
                                                            $receiver$iv$iv7 = $receiver$iv$iv4;
                                                            keySelector = keySelector2;
                                                            $receiver3 = $receiver;
                                                            valueTransform = $i$f$consume2;
                                                            $i$f$consumeEach = $i$a$4$consume2;
                                                            $i$f$consume = $i$a$4$consume;
                                                            cause$iv$iv$iv = cause$iv$iv$iv2;
                                                            valueTransform2 = valueTransform3;
                                                            destination$iv5 = destination$iv2;
                                                            destination$iv5.put(keySelector.invoke(it$iv), valueTransform2.invoke(it$iv));
                                                            channelsKt__Channels_commonKt$associateBy$2 = channelsKt__Channels_commonKt$associateBy$2;
                                                            $receiver$iv$iv2 = $receiver3;
                                                            $receiver$iv$iv3 = $receiver$iv$iv7;
                                                            obj = obj2;
                                                            destination$iv = destination$iv5;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$0 = $receiver$iv$iv2;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$1 = keySelector;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$2 = valueTransform2;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$4 = destination$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$6 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$7 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$8 = $receiver$iv$iv3;
                                                            channelsKt__Channels_commonKt$associateBy$2.L$9 = channelIterator;
                                                            channelsKt__Channels_commonKt$associateBy$2.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$2);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return destination$iv2;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv$iv = th6;
                                    }
                                    channelsKt__Channels_commonKt$associateBy$2 = channelsKt__Channels_commonKt$associateBy$2;
                                    $receiver$iv$iv2 = $receiver3;
                                    $receiver$iv$iv3 = $receiver$iv$iv7;
                                    obj = obj2;
                                    destination$iv = destination$iv5;
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        Map destination$iv6 = new LinkedHashMap();
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        Throwable cause$iv$iv$iv4 = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            destination$iv = destination$iv6;
                            $receiver$iv$iv3 = $receiver$iv$iv$iv;
                            cause$iv$iv$iv = cause$iv$iv$iv4;
                            valueTransform = null;
                            obj = coroutine_suspended;
                            channelsKt__Channels_commonKt$associateBy$2 = channelsKt__Channels_commonKt$associateBy$2;
                            $receiver$iv$iv2 = receiveChannel;
                            valueTransform2 = function12;
                            $i$f$consumeEach = 0;
                            $i$f$consume = 0;
                            keySelector = function1;
                            channelsKt__Channels_commonKt$associateBy$2.L$0 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$associateBy$2.L$1 = keySelector;
                            channelsKt__Channels_commonKt$associateBy$2.L$2 = valueTransform2;
                            channelsKt__Channels_commonKt$associateBy$2.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$associateBy$2.L$4 = destination$iv;
                            channelsKt__Channels_commonKt$associateBy$2.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$2.L$6 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$2.L$7 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$associateBy$2.L$8 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$associateBy$2.L$9 = channelIterator;
                            channelsKt__Channels_commonKt$associateBy$2.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateBy$2);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associateBy$2 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associateBy$2
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associateBy(null, null, null, this);
            }
        };
        Object it$iv2 = channelsKt__Channels_commonKt$associateBy$2.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associateBy$2.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object associateBy$$forInline(ReceiveChannel $receiver, Function1 keySelector, Function1 valueTransform, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        int $i$f$associateBy = 0;
        Map destination$iv = new LinkedHashMap();
        ReceiveChannel $receiver$iv = $receiver;
        int i = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    try {
                        destination$iv.put(keySelector.invoke(e$iv$iv), valueTransform.invoke(e$iv$iv));
                        continuation2 = continuation;
                        $i$f$associateBy = $i$f$associateBy;
                        $receiver$iv = $receiver$iv;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv$iv = th2;
                    }
                } catch (Throwable th3) {
                    e$iv$iv$iv = th3;
                    throw e$iv$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination$iv;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0110 A[Catch: all -> 0x0151, TRY_LEAVE, TryCatch #0 {all -> 0x0151, blocks: (B:39:0x0108, B:41:0x0110, B:48:0x0143), top: B:63:0x0108 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0143 A[Catch: all -> 0x0151, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x0151, blocks: (B:39:0x0108, B:41:0x0110, B:48:0x0143), top: B:63:0x0108 }] */
    /* JADX WARN: Type inference failed for: r3v7, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r8v4, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, M extends Map<? super K, ? super E>> Object associateByTo(ReceiveChannel<? extends E> receiveChannel, M m, Function1<? super E, ? extends K> function1, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$associateByTo$1 channelsKt__Channels_commonKt$associateByTo$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 keySelector;
        M m2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 keySelector2;
        M m3;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associateByTo$1) {
                channelsKt__Channels_commonKt$associateByTo$1 = (ChannelsKt__Channels_commonKt$associateByTo$1) continuation;
                if ((channelsKt__Channels_commonKt$associateByTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associateByTo$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$associateByTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associateByTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$associateByTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateByTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$3;
                            keySelector2 = (Function1) channelsKt__Channels_commonKt$associateByTo$1.L$2;
                            ?? r8 = (Map) channelsKt__Channels_commonKt$associateByTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    m3 = r8;
                                    z2 = false;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associateByTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateByTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$3;
                            Function1 keySelector3 = (Function1) channelsKt__Channels_commonKt$associateByTo$1.L$2;
                            Map destination = (Map) channelsKt__Channels_commonKt$associateByTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    boolean z3 = false;
                                    Object it = obj3;
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    Map map = destination;
                                    keySelector = keySelector3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        map.put(keySelector.invoke(it), it);
                                        channelsKt__Channels_commonKt$associateByTo$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$1 = m2;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$2 = keySelector;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$associateByTo$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$associateByTo$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateByTo$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        keySelector2 = keySelector;
                                        m3 = m2;
                                        channelIterator2 = channelIterator;
                                        z2 = z;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$associateByTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$1 = m3;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$2 = keySelector2;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$associateByTo$1.label = 2;
                                                it = channelIterator2.next(channelsKt__Channels_commonKt$associateByTo$1);
                                                if (it == obj2) {
                                                    return obj2;
                                                }
                                                z3 = z2;
                                                channelIterator = channelIterator2;
                                                obj = obj2;
                                                $receiver$iv5 = $receiver$iv3;
                                                map = m3;
                                                keySelector = keySelector2;
                                                map.put(keySelector.invoke(it), it);
                                                $receiver$iv2 = $receiver$iv5;
                                                z = z3;
                                                m2 = map;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$1 = m2;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$2 = keySelector;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$associateByTo$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$associateByTo$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateByTo$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                return m3;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    z = z3;
                                    m2 = map;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            $receiver = receiveChannel;
                            keySelector = function1;
                            $receiver$iv = receiveChannel;
                            m2 = m;
                            channelsKt__Channels_commonKt$associateByTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$associateByTo$1.L$1 = m2;
                            channelsKt__Channels_commonKt$associateByTo$1.L$2 = keySelector;
                            channelsKt__Channels_commonKt$associateByTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$associateByTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associateByTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$associateByTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$associateByTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$associateByTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateByTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associateByTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associateByTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associateByTo(null, null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$associateByTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associateByTo$1.label;
        if (i == 0) {
        }
    }

    private static final Object associateByTo$$forInline(ReceiveChannel $receiver, Map destination, Function1 keySelector, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    destination.put(keySelector.invoke(e$iv), e$iv);
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x011d A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011e  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0139 A[Catch: all -> 0x01a3, TRY_LEAVE, TryCatch #2 {all -> 0x01a3, blocks: (B:41:0x0131, B:43:0x0139, B:56:0x0195), top: B:78:0x0131 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0195 A[Catch: all -> 0x01a3, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x01a3, blocks: (B:41:0x0131, B:43:0x0139, B:56:0x0195), top: B:78:0x0131 }] */
    /* JADX WARN: Type inference failed for: r3v7, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r8v11, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V, M extends Map<? super K, ? super V>> Object associateByTo(ReceiveChannel<? extends E> receiveChannel, M m, Function1<? super E, ? extends K> function1, Function1<? super E, ? extends V> function12, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$associateByTo$3 channelsKt__Channels_commonKt$associateByTo$3;
        int i;
        boolean z;
        Object obj;
        ChannelIterator<E> channelIterator;
        int $i$f$consumeEach;
        int $i$f$consume;
        int $i$a$4$consume;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int destination;
        Function1 keySelector;
        ReceiveChannel $receiver$iv;
        Function1 valueTransform;
        M m2;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver;
        Function1 keySelector2;
        ReceiveChannel $receiver$iv3;
        Function1 valueTransform2;
        ChannelIterator<E> channelIterator2;
        int $i$f$associateByTo;
        int $i$f$associateByTo2;
        int $i$f$consumeEach2;
        int $i$f$consume2;
        boolean z2;
        Object obj2;
        M m3;
        ReceiveChannel $receiver$iv4;
        ReceiveChannel $receiver$iv5;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associateByTo$3) {
                channelsKt__Channels_commonKt$associateByTo$3 = (ChannelsKt__Channels_commonKt$associateByTo$3) continuation;
                if ((channelsKt__Channels_commonKt$associateByTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associateByTo$3.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$associateByTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associateByTo$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = 0;
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$associateByTo$3.L$8;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateByTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$4;
                            valueTransform = (Function1) channelsKt__Channels_commonKt$associateByTo$3.L$3;
                            keySelector = (Function1) channelsKt__Channels_commonKt$associateByTo$3.L$2;
                            ?? r8 = (Map) channelsKt__Channels_commonKt$associateByTo$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    z = false;
                                    $receiver$iv2 = $receiver$iv6;
                                    $receiver = $receiver2;
                                    destination = 0;
                                    m2 = r8;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$associateByTo$3.L$8;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateByTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$5;
                            ReceiveChannel $receiver$iv8 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$4;
                            Function1 valueTransform3 = (Function1) channelsKt__Channels_commonKt$associateByTo$3.L$3;
                            keySelector2 = (Function1) channelsKt__Channels_commonKt$associateByTo$3.L$2;
                            Map destination2 = (Map) channelsKt__Channels_commonKt$associateByTo$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateByTo$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver = $receiver3;
                                    z = false;
                                    $i$f$associateByTo = 0;
                                    $i$f$associateByTo2 = 0;
                                    $i$f$consumeEach2 = 0;
                                    $i$f$consume2 = 0;
                                    ReceiveChannel $receiver$iv9 = $receiver$iv7;
                                    Map map = destination2;
                                    $receiver$iv3 = $receiver$iv8;
                                    valueTransform2 = valueTransform3;
                                    obj = coroutine_suspended;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    map.put(keySelector2.invoke(it), valueTransform2.invoke(it));
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$0 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$1 = m3;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$2 = keySelector2;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$3 = valueTransform2;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$4 = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$7 = $receiver$iv5;
                                                    channelsKt__Channels_commonKt$associateByTo$3.L$8 = channelIterator2;
                                                    channelsKt__Channels_commonKt$associateByTo$3.label = 1;
                                                    hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$associateByTo$3);
                                                    if (hasNext == obj2) {
                                                        return obj2;
                                                    }
                                                    $receiver$iv2 = $receiver$iv5;
                                                    it = hasNext;
                                                    $receiver = $receiver$iv4;
                                                    z = z2;
                                                    obj = obj2;
                                                    destination = $i$f$consume2;
                                                    $i$a$4$consume = $i$f$consumeEach2;
                                                    $i$f$consume = $i$f$associateByTo2;
                                                    $i$f$consumeEach = $i$f$associateByTo;
                                                    channelIterator = channelIterator2;
                                                    valueTransform = valueTransform2;
                                                    $receiver$iv = $receiver$iv3;
                                                    keySelector = keySelector2;
                                                    m2 = m3;
                                                    try {
                                                        if (!((Boolean) it).booleanValue()) {
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$1 = m2;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$2 = keySelector;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$3 = valueTransform;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$4 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$6 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$7 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$8 = channelIterator;
                                                            channelsKt__Channels_commonKt$associateByTo$3.label = 2;
                                                            it = channelIterator.next(channelsKt__Channels_commonKt$associateByTo$3);
                                                            if (it == obj) {
                                                                return obj;
                                                            }
                                                            $receiver$iv9 = $receiver$iv2;
                                                            map = m2;
                                                            keySelector2 = keySelector;
                                                            $receiver$iv3 = $receiver$iv;
                                                            valueTransform2 = valueTransform;
                                                            channelIterator2 = channelIterator;
                                                            $i$f$associateByTo = $i$f$consumeEach;
                                                            $i$f$associateByTo2 = $i$f$consume;
                                                            $i$f$consumeEach2 = $i$a$4$consume;
                                                            $i$f$consume2 = destination;
                                                            map.put(keySelector2.invoke(it), valueTransform2.invoke(it));
                                                            channelsKt__Channels_commonKt$associateByTo$3 = channelsKt__Channels_commonKt$associateByTo$3;
                                                            $receiver$iv4 = $receiver;
                                                            $receiver$iv5 = $receiver$iv9;
                                                            obj2 = obj;
                                                            z2 = z;
                                                            m3 = map;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$0 = $receiver$iv4;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$1 = m3;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$2 = keySelector2;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$3 = valueTransform2;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$4 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$6 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$7 = $receiver$iv5;
                                                            channelsKt__Channels_commonKt$associateByTo$3.L$8 = channelIterator2;
                                                            channelsKt__Channels_commonKt$associateByTo$3.label = 1;
                                                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$associateByTo$3);
                                                            if (hasNext == obj2) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return m2;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                }
                                                channelsKt__Channels_commonKt$associateByTo$3 = channelsKt__Channels_commonKt$associateByTo$3;
                                                $receiver$iv4 = $receiver;
                                                $receiver$iv5 = $receiver$iv9;
                                                obj2 = obj;
                                                z2 = z;
                                                m3 = map;
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator2 = $receiver$iv$iv.iterator();
                            valueTransform2 = function12;
                            z2 = false;
                            $receiver$iv3 = receiveChannel;
                            $receiver$iv5 = $receiver$iv$iv;
                            $i$f$associateByTo = 0;
                            obj2 = coroutine_suspended;
                            $receiver$iv4 = receiveChannel;
                            m3 = m;
                            $i$f$associateByTo2 = 0;
                            $i$f$consumeEach2 = 0;
                            $i$f$consume2 = 0;
                            keySelector2 = function1;
                            channelsKt__Channels_commonKt$associateByTo$3.L$0 = $receiver$iv4;
                            channelsKt__Channels_commonKt$associateByTo$3.L$1 = m3;
                            channelsKt__Channels_commonKt$associateByTo$3.L$2 = keySelector2;
                            channelsKt__Channels_commonKt$associateByTo$3.L$3 = valueTransform2;
                            channelsKt__Channels_commonKt$associateByTo$3.L$4 = $receiver$iv3;
                            channelsKt__Channels_commonKt$associateByTo$3.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associateByTo$3.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$associateByTo$3.L$7 = $receiver$iv5;
                            channelsKt__Channels_commonKt$associateByTo$3.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$associateByTo$3.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$associateByTo$3);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associateByTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associateByTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associateByTo(null, null, null, null, this);
            }
        };
        Object it2 = channelsKt__Channels_commonKt$associateByTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associateByTo$3.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object associateByTo$$forInline(ReceiveChannel $receiver, Map destination, Function1 keySelector, Function1 valueTransform, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        int $i$f$associateByTo = 0;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    try {
                        destination.put(keySelector.invoke(e$iv), valueTransform.invoke(e$iv));
                        continuation2 = continuation;
                        $i$f$associateByTo = $i$f$associateByTo;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv = th2;
                    }
                } catch (Throwable th3) {
                    e$iv$iv = th3;
                    throw e$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0110 A[Catch: all -> 0x016b, TRY_LEAVE, TryCatch #4 {all -> 0x016b, blocks: (B:39:0x0108, B:41:0x0110, B:54:0x015d), top: B:77:0x0108 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x015d A[Catch: all -> 0x016b, TRY_ENTER, TRY_LEAVE, TryCatch #4 {all -> 0x016b, blocks: (B:39:0x0108, B:41:0x0110, B:54:0x015d), top: B:77:0x0108 }] */
    /* JADX WARN: Type inference failed for: r3v7, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r8v4, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V, M extends Map<? super K, ? super V>> Object associateTo(ReceiveChannel<? extends E> receiveChannel, M m, Function1<? super E, ? extends Pair<? extends K, ? extends V>> function1, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$associateTo$1 channelsKt__Channels_commonKt$associateTo$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 transform;
        M m2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 transform2;
        M m3;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$associateTo$1) {
                channelsKt__Channels_commonKt$associateTo$1 = (ChannelsKt__Channels_commonKt$associateTo$1) continuation;
                if ((channelsKt__Channels_commonKt$associateTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$associateTo$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$associateTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$associateTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$associateTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$3;
                            transform2 = (Function1) channelsKt__Channels_commonKt$associateTo$1.L$2;
                            ?? r8 = (Map) channelsKt__Channels_commonKt$associateTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    m3 = r8;
                                    z2 = false;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$associateTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$associateTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$3;
                            Function1 transform3 = (Function1) channelsKt__Channels_commonKt$associateTo$1.L$2;
                            Map destination = (Map) channelsKt__Channels_commonKt$associateTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$associateTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    boolean z3 = false;
                                    Object it = obj3;
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    Map map = destination;
                                    transform = transform3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        try {
                                            try {
                                                Pair pair = (Pair) transform.invoke(it);
                                                map.put(pair.getFirst(), pair.getSecond());
                                                channelsKt__Channels_commonKt$associateTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$associateTo$1.L$1 = m2;
                                                channelsKt__Channels_commonKt$associateTo$1.L$2 = transform;
                                                channelsKt__Channels_commonKt$associateTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$associateTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$associateTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$associateTo$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$associateTo$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$associateTo$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateTo$1);
                                                if (hasNext == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv3 = $receiver$iv2;
                                                obj2 = obj;
                                                transform2 = transform;
                                                m3 = m2;
                                                channelIterator2 = channelIterator;
                                                z2 = z;
                                                try {
                                                    if (!((Boolean) hasNext).booleanValue()) {
                                                        channelsKt__Channels_commonKt$associateTo$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$1 = m3;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$2 = transform2;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$5 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$6 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$7 = channelIterator2;
                                                        channelsKt__Channels_commonKt$associateTo$1.label = 2;
                                                        it = channelIterator2.next(channelsKt__Channels_commonKt$associateTo$1);
                                                        if (it == obj2) {
                                                            return obj2;
                                                        }
                                                        z3 = z2;
                                                        channelIterator = channelIterator2;
                                                        obj = obj2;
                                                        $receiver$iv5 = $receiver$iv3;
                                                        map = m3;
                                                        transform = transform2;
                                                        Pair pair2 = (Pair) transform.invoke(it);
                                                        map.put(pair2.getFirst(), pair2.getSecond());
                                                        $receiver$iv2 = $receiver$iv5;
                                                        channelsKt__Channels_commonKt$associateTo$1 = channelsKt__Channels_commonKt$associateTo$1;
                                                        z = z3;
                                                        m2 = map;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$1 = m2;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$2 = transform;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$5 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$6 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$associateTo$1.L$7 = channelIterator;
                                                        channelsKt__Channels_commonKt$associateTo$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateTo$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        return m3;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    channelsKt__Channels_commonKt$associateTo$1 = channelsKt__Channels_commonKt$associateTo$1;
                                    z = z3;
                                    m2 = map;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            $receiver = receiveChannel;
                            transform = function1;
                            $receiver$iv = receiveChannel;
                            m2 = m;
                            channelsKt__Channels_commonKt$associateTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$associateTo$1.L$1 = m2;
                            channelsKt__Channels_commonKt$associateTo$1.L$2 = transform;
                            channelsKt__Channels_commonKt$associateTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$associateTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$associateTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$associateTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$associateTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$associateTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$associateTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$associateTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$associateTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.associateTo(null, null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$associateTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$associateTo$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object associateTo$$forInline(ReceiveChannel $receiver, Map destination, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Pair pair = (Pair) transform.invoke(e$iv);
                    destination.put(pair.getFirst(), pair.getSecond());
                    continuation2 = continuation;
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v3 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00f7  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x012e A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x012f  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0143 A[Catch: all -> 0x019b, TRY_LEAVE, TryCatch #4 {all -> 0x019b, blocks: (B:45:0x013b, B:47:0x0143, B:59:0x0194), top: B:82:0x013b }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0183 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0184  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0194 A[Catch: all -> 0x019b, TRY_ENTER, TRY_LEAVE, TryCatch #4 {all -> 0x019b, blocks: (B:45:0x013b, B:47:0x0143, B:59:0x0194), top: B:82:0x013b }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r14v5, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v13, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Type inference failed for: r4v4 */
    /* JADX WARN: Type inference failed for: r5v10, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v7, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 4 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends SendChannel<? super E>> Object toChannel(ReceiveChannel<? extends E> receiveChannel, C c, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$toChannel$1 channelsKt__Channels_commonKt$toChannel$1;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        boolean z;
        int $i$a$4$consume;
        Object obj;
        C c2;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        ReceiveChannel $receiver$iv4;
        boolean z2;
        ReceiveChannel $receiver;
        C c3;
        int destination;
        Object e$iv;
        int $i$a$4$consume2;
        Object obj2;
        ChannelIterator<E> channelIterator2;
        boolean z3;
        C c4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$toChannel$1) {
                channelsKt__Channels_commonKt$toChannel$1 = (ChannelsKt__Channels_commonKt$toChannel$1) continuation;
                if ((channelsKt__Channels_commonKt$toChannel$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$toChannel$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$toChannel$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$toChannel$1.label;
                    ?? r4 = 3;
                    boolean z4 = false;
                    boolean z5 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                destination = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$toChannel$1.L$6;
                                $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$toChannel$1.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$3;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$2;
                                ?? r5 = (SendChannel) channelsKt__Channels_commonKt$toChannel$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$0;
                                if (obj3 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj3).exception;
                                }
                                z2 = false;
                                z4 = false;
                                $receiver$iv = $receiver$iv5;
                                obj = coroutine_suspended;
                                c3 = r5;
                                if (!((Boolean) obj3).booleanValue()) {
                                }
                            } else if (i == 2) {
                                z5 = false;
                                channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$toChannel$1.L$6;
                                $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$toChannel$1.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$3;
                                r4 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$2;
                                ?? r52 = (SendChannel) channelsKt__Channels_commonKt$toChannel$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$0;
                                if (!(obj3 instanceof Result.Failure)) {
                                    e$iv = obj3;
                                    $i$a$4$consume2 = 0;
                                    obj2 = coroutine_suspended;
                                    $receiver$iv = r4;
                                    z3 = false;
                                    c4 = r52;
                                    channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver;
                                    channelsKt__Channels_commonKt$toChannel$1.L$1 = c4;
                                    channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                                    channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                                    channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv4;
                                    channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator2;
                                    channelsKt__Channels_commonKt$toChannel$1.L$7 = e$iv;
                                    channelsKt__Channels_commonKt$toChannel$1.L$8 = e$iv;
                                    channelsKt__Channels_commonKt$toChannel$1.label = 3;
                                    if (c4.send(e$iv, channelsKt__Channels_commonKt$toChannel$1) != obj2) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } else if (i == 3) {
                                $i$a$4$consume2 = 0;
                                Object it = channelsKt__Channels_commonKt$toChannel$1.L$8;
                                Object e$iv2 = channelsKt__Channels_commonKt$toChannel$1.L$7;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$toChannel$1.L$6;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$5;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$toChannel$1.L$4;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$3;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$2;
                                ?? r14 = (SendChannel) channelsKt__Channels_commonKt$toChannel$1.L$1;
                                ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$toChannel$1.L$0;
                                try {
                                    if (!(obj3 instanceof Result.Failure)) {
                                        $receiver$iv2 = $receiver2;
                                        z = false;
                                        c2 = r14;
                                        obj = coroutine_suspended;
                                        $receiver$iv3 = $receiver$iv6;
                                        $i$a$4$consume = $i$a$4$consume2;
                                        try {
                                            channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$toChannel$1.L$1 = c2;
                                            channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                                            channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv3;
                                            channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator;
                                            channelsKt__Channels_commonKt$toChannel$1.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toChannel$1);
                                            if (hasNext == obj) {
                                                return obj;
                                            }
                                            $receiver$iv4 = $receiver$iv3;
                                            obj3 = hasNext;
                                            z2 = z;
                                            $receiver = $receiver$iv2;
                                            c3 = c2;
                                            destination = $i$a$4$consume;
                                            try {
                                                if (!((Boolean) obj3).booleanValue()) {
                                                    channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$1 = c3;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator;
                                                    channelsKt__Channels_commonKt$toChannel$1.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$toChannel$1);
                                                    if (e$iv == obj) {
                                                        return obj;
                                                    }
                                                    try {
                                                        $i$a$4$consume2 = destination;
                                                        obj2 = obj;
                                                        channelIterator2 = channelIterator;
                                                        z3 = z4;
                                                        z4 = z2;
                                                        c4 = c3;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$1 = c4;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv4;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator2;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$7 = e$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$8 = e$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.label = 3;
                                                        if (c4.send(e$iv, channelsKt__Channels_commonKt$toChannel$1) != obj2) {
                                                            return obj2;
                                                        }
                                                        $receiver$iv6 = $receiver$iv4;
                                                        $receiver$iv2 = $receiver;
                                                        z = z4;
                                                        z4 = z3;
                                                        channelIterator = channelIterator2;
                                                        obj = obj2;
                                                        c2 = c4;
                                                        $receiver$iv3 = $receiver$iv6;
                                                        $i$a$4$consume = $i$a$4$consume2;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$1 = c2;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator;
                                                        channelsKt__Channels_commonKt$toChannel$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toChannel$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } catch (Throwable th) {
                                                        e$iv$iv = th;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj3).exception;
                                    }
                                } catch (Throwable th4) {
                                    e$iv$iv = th4;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv3 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv3.iterator();
                            $receiver$iv = receiveChannel;
                            z = false;
                            $receiver$iv2 = receiveChannel;
                            z4 = false;
                            $i$a$4$consume = 0;
                            obj = coroutine_suspended;
                            c2 = c;
                            channelsKt__Channels_commonKt$toChannel$1.L$0 = $receiver$iv2;
                            channelsKt__Channels_commonKt$toChannel$1.L$1 = c2;
                            channelsKt__Channels_commonKt$toChannel$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$toChannel$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$toChannel$1.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$toChannel$1.L$5 = $receiver$iv3;
                            channelsKt__Channels_commonKt$toChannel$1.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$toChannel$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toChannel$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$toChannel$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$toChannel$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.toChannel(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$toChannel$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$toChannel$1.label;
        ?? r42 = 3;
        boolean z42 = false;
        boolean z52 = false;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bd  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ee A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00ef  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00ff A[Catch: all -> 0x013f, TRY_LEAVE, TryCatch #6 {all -> 0x013f, blocks: (B:39:0x00f7, B:41:0x00ff, B:50:0x0138), top: B:77:0x00f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0138 A[Catch: all -> 0x013f, TRY_ENTER, TRY_LEAVE, TryCatch #6 {all -> 0x013f, blocks: (B:39:0x00f7, B:41:0x00ff, B:50:0x0138), top: B:77:0x00f7 }] */
    /* JADX WARN: Type inference failed for: r13v12, types: [java.util.Collection] */
    /* JADX WARN: Type inference failed for: r3v6, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, C extends Collection<? super E>> Object toCollection(ReceiveChannel<? extends E> receiveChannel, C c, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$toCollection$1 channelsKt__Channels_commonKt$toCollection$1;
        int i;
        Object obj;
        ChannelIterator<E> channelIterator;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int cause$iv$iv2;
        ReceiveChannel $receiver$iv;
        Object obj2;
        C c2;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver$iv4;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $i$f$consume2;
        C c3;
        ReceiveChannel $receiver$iv5;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$toCollection$1) {
                channelsKt__Channels_commonKt$toCollection$1 = (ChannelsKt__Channels_commonKt$toCollection$1) continuation;
                if ((channelsKt__Channels_commonKt$toCollection$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$toCollection$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$toCollection$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$toCollection$1.label;
                    int i2 = 1;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$toCollection$1.L$6;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$5;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$toCollection$1.L$4;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$2;
                            ?? r13 = (Collection) channelsKt__Channels_commonKt$toCollection$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    obj = obj3;
                                    $receiver$iv3 = null;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    cause$iv$iv2 = 0;
                                    c2 = r13;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    cause$iv$iv = cause$iv$iv3;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) obj).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$toCollection$1.L$6;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$toCollection$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$3;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$toCollection$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$toCollection$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    $receiver$iv4 = $receiver$iv7;
                                    int $i$f$consume3 = 0;
                                    int $i$f$consume4 = 0;
                                    Object obj4 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    Object e$iv = obj3;
                                    $receiver$iv3 = null;
                                    ReceiveChannel $receiver$iv8 = $receiver$iv6;
                                    Collection collection = destination;
                                    try {
                                        try {
                                            collection.add(e$iv);
                                            channelsKt__Channels_commonKt$toCollection$1.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$toCollection$1.L$1 = c3;
                                            channelsKt__Channels_commonKt$toCollection$1.L$2 = $receiver$iv4;
                                            channelsKt__Channels_commonKt$toCollection$1.L$3 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$toCollection$1.L$4 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$toCollection$1.L$5 = $receiver$iv5;
                                            channelsKt__Channels_commonKt$toCollection$1.L$6 = channelIterator2;
                                            channelsKt__Channels_commonKt$toCollection$1.label = i2;
                                            obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$toCollection$1);
                                            if (obj == obj2) {
                                                return obj2;
                                            }
                                            $receiver$iv2 = $receiver$iv5;
                                            $receiver$iv3 = $i$f$consume2;
                                            channelIterator = channelIterator2;
                                            $receiver$iv = $receiver$iv4;
                                            c2 = c3;
                                            try {
                                                if (!((Boolean) obj).booleanValue()) {
                                                    channelsKt__Channels_commonKt$toCollection$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$1 = c2;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$5 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$6 = channelIterator;
                                                    channelsKt__Channels_commonKt$toCollection$1.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$toCollection$1);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    $receiver$iv8 = $receiver$iv2;
                                                    collection = c2;
                                                    $receiver$iv4 = $receiver$iv;
                                                    channelIterator2 = channelIterator;
                                                    $i$f$consume3 = $i$f$consume;
                                                    $i$f$consume4 = cause$iv$iv2;
                                                    obj4 = obj2;
                                                    collection.add(e$iv);
                                                    i2 = 1;
                                                    $i$f$consume2 = $receiver$iv3;
                                                    $receiver$iv5 = $receiver$iv8;
                                                    obj2 = obj4;
                                                    cause$iv$iv2 = $i$f$consume4;
                                                    $i$f$consume = $i$f$consume3;
                                                    c3 = collection;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$1 = c3;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$2 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$5 = $receiver$iv5;
                                                    channelsKt__Channels_commonKt$toCollection$1.L$6 = channelIterator2;
                                                    channelsKt__Channels_commonKt$toCollection$1.label = i2;
                                                    obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$toCollection$1);
                                                    if (obj == obj2) {
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c2;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                        i2 = 1;
                                        $i$f$consume2 = $receiver$iv3;
                                        $receiver$iv5 = $receiver$iv8;
                                        obj2 = obj4;
                                        cause$iv$iv2 = $i$f$consume4;
                                        $i$f$consume = $i$f$consume3;
                                        c3 = collection;
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        $i$f$consume = 0;
                        cause$iv$iv = null;
                        $receiver$iv5 = $receiver$iv$iv;
                        try {
                            channelIterator2 = $receiver$iv5.iterator();
                            cause$iv$iv2 = 0;
                            $i$f$consume2 = null;
                            obj2 = coroutine_suspended;
                            $receiver$iv4 = receiveChannel;
                            $receiver = receiveChannel;
                            c3 = c;
                            channelsKt__Channels_commonKt$toCollection$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$toCollection$1.L$1 = c3;
                            channelsKt__Channels_commonKt$toCollection$1.L$2 = $receiver$iv4;
                            channelsKt__Channels_commonKt$toCollection$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$toCollection$1.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$toCollection$1.L$5 = $receiver$iv5;
                            channelsKt__Channels_commonKt$toCollection$1.L$6 = channelIterator2;
                            channelsKt__Channels_commonKt$toCollection$1.label = i2;
                            obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$toCollection$1);
                            if (obj == obj2) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$toCollection$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$toCollection$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.toCollection(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$toCollection$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$toCollection$1.label;
        int i22 = 1;
        if (i == 0) {
        }
    }

    public static final <E> Object toList(ReceiveChannel<? extends E> receiveChannel, Continuation<? super List<? extends E>> continuation) {
        return ChannelsKt.toMutableList(receiveChannel, continuation);
    }

    public static final <K, V> Object toMap(ReceiveChannel<? extends Pair<? extends K, ? extends V>> receiveChannel, Continuation<? super Map<K, ? extends V>> continuation) {
        return ChannelsKt.toMap(receiveChannel, new LinkedHashMap(), continuation);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00be  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ef A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0100 A[Catch: all -> 0x014a, TRY_LEAVE, TryCatch #3 {all -> 0x014a, blocks: (B:39:0x00f8, B:41:0x0100, B:49:0x0143), top: B:71:0x00f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0143 A[Catch: all -> 0x014a, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x014a, blocks: (B:39:0x00f8, B:41:0x0100, B:49:0x0143), top: B:71:0x00f8 }] */
    /* JADX WARN: Type inference failed for: r13v12, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <K, V, M extends Map<? super K, ? super V>> Object toMap(ReceiveChannel<? extends Pair<? extends K, ? extends V>> receiveChannel, M m, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$toMap$2 channelsKt__Channels_commonKt$toMap$2;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        ChannelIterator<? extends Pair<? extends K, ? extends V>> channelIterator;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $i$f$consumeEach;
        ReceiveChannel $receiver$iv3;
        Object obj;
        int cause$iv$iv2;
        int $i$f$consume;
        int $i$f$consumeEach2;
        M m2;
        Object hasNext;
        ReceiveChannel $receiver$iv4;
        ChannelIterator channelIterator2;
        ReceiveChannel $receiver$iv5;
        M m3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$toMap$2) {
                channelsKt__Channels_commonKt$toMap$2 = (ChannelsKt__Channels_commonKt$toMap$2) continuation;
                if ((channelsKt__Channels_commonKt$toMap$2.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$toMap$2.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$toMap$2.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$toMap$2.label;
                    int i2 = 1;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach2 = 0;
                            ChannelIterator channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$toMap$2.L$6;
                            $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$5;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$toMap$2.L$4;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$3;
                            $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$2;
                            ?? r13 = (Map) channelsKt__Channels_commonKt$toMap$2.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    $receiver$iv2 = null;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    cause$iv$iv2 = 0;
                                    m3 = r13;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    cause$iv$iv = cause$iv$iv3;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$toMap$2.L$6;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$toMap$2.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$3;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$2;
                            Map destination = (Map) channelsKt__Channels_commonKt$toMap$2.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$toMap$2.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    $receiver$iv = $receiver$iv7;
                                    int $i$f$consumeEach3 = 0;
                                    int $i$f$consumeEach4 = 0;
                                    int $i$f$consume2 = 0;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    Object e$iv = obj2;
                                    $receiver$iv2 = null;
                                    ReceiveChannel $receiver$iv8 = $receiver$iv6;
                                    Map map = destination;
                                    try {
                                        try {
                                            Pair it = (Pair) e$iv;
                                            map.put(it.getFirst(), it.getSecond());
                                            channelsKt__Channels_commonKt$toMap$2.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$toMap$2.L$1 = m2;
                                            channelsKt__Channels_commonKt$toMap$2.L$2 = $receiver$iv;
                                            channelsKt__Channels_commonKt$toMap$2.L$3 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$toMap$2.L$4 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$toMap$2.L$5 = $receiver$iv3;
                                            channelsKt__Channels_commonKt$toMap$2.L$6 = channelIterator;
                                            channelsKt__Channels_commonKt$toMap$2.label = i2;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toMap$2);
                                            if (hasNext == obj) {
                                                return obj;
                                            }
                                            $receiver$iv4 = $receiver$iv3;
                                            $receiver$iv2 = $i$f$consumeEach;
                                            channelIterator2 = channelIterator;
                                            $receiver$iv5 = $receiver$iv;
                                            m3 = m2;
                                            try {
                                                if (!((Boolean) hasNext).booleanValue()) {
                                                    channelsKt__Channels_commonKt$toMap$2.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$toMap$2.L$1 = m3;
                                                    channelsKt__Channels_commonKt$toMap$2.L$2 = $receiver$iv5;
                                                    channelsKt__Channels_commonKt$toMap$2.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$toMap$2.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$toMap$2.L$5 = $receiver$iv4;
                                                    channelsKt__Channels_commonKt$toMap$2.L$6 = channelIterator2;
                                                    channelsKt__Channels_commonKt$toMap$2.label = 2;
                                                    e$iv = channelIterator2.next(channelsKt__Channels_commonKt$toMap$2);
                                                    if (e$iv == obj) {
                                                        return obj;
                                                    }
                                                    $receiver$iv8 = $receiver$iv4;
                                                    map = m3;
                                                    $receiver$iv = $receiver$iv5;
                                                    channelIterator = channelIterator2;
                                                    $i$f$consumeEach3 = $i$f$consumeEach2;
                                                    $i$f$consumeEach4 = $i$f$consume;
                                                    $i$f$consume2 = cause$iv$iv2;
                                                    obj3 = obj;
                                                    Pair it2 = (Pair) e$iv;
                                                    map.put(it2.getFirst(), it2.getSecond());
                                                    i2 = 1;
                                                    $i$f$consumeEach = $receiver$iv2;
                                                    $receiver$iv3 = $receiver$iv8;
                                                    obj = obj3;
                                                    cause$iv$iv2 = $i$f$consume2;
                                                    $i$f$consume = $i$f$consumeEach4;
                                                    $i$f$consumeEach2 = $i$f$consumeEach3;
                                                    m2 = map;
                                                    channelsKt__Channels_commonKt$toMap$2.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$toMap$2.L$1 = m2;
                                                    channelsKt__Channels_commonKt$toMap$2.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$toMap$2.L$3 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$toMap$2.L$4 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$toMap$2.L$5 = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$toMap$2.L$6 = channelIterator;
                                                    channelsKt__Channels_commonKt$toMap$2.label = i2;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toMap$2);
                                                    if (hasNext == obj) {
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return m3;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                        i2 = 1;
                                        $i$f$consumeEach = $receiver$iv2;
                                        $receiver$iv3 = $receiver$iv8;
                                        obj = obj3;
                                        cause$iv$iv2 = $i$f$consume2;
                                        $i$f$consume = $i$f$consumeEach4;
                                        $i$f$consumeEach2 = $i$f$consumeEach3;
                                        m2 = map;
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        $i$f$consumeEach2 = 0;
                        $receiver$iv$iv = receiveChannel;
                        $i$f$consume = 0;
                        cause$iv$iv = null;
                        $receiver$iv3 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv3.iterator();
                            cause$iv$iv2 = 0;
                            $i$f$consumeEach = null;
                            obj = coroutine_suspended;
                            $receiver$iv = receiveChannel;
                            $receiver = receiveChannel;
                            m2 = m;
                            channelsKt__Channels_commonKt$toMap$2.L$0 = $receiver;
                            channelsKt__Channels_commonKt$toMap$2.L$1 = m2;
                            channelsKt__Channels_commonKt$toMap$2.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$toMap$2.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$toMap$2.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$toMap$2.L$5 = $receiver$iv3;
                            channelsKt__Channels_commonKt$toMap$2.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$toMap$2.label = i2;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$toMap$2);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            $receiver$iv$iv.cancel(e$iv$iv);
        }
        channelsKt__Channels_commonKt$toMap$2 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$toMap$2
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.toMap(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$toMap$2.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$toMap$2.label;
        int i22 = 1;
        if (i == 0) {
        }
    }

    public static final <E> Object toMutableList(ReceiveChannel<? extends E> receiveChannel, Continuation<? super List<E>> continuation) {
        return ChannelsKt.toCollection(receiveChannel, new ArrayList(), continuation);
    }

    public static final <E> Object toSet(ReceiveChannel<? extends E> receiveChannel, Continuation<? super Set<? extends E>> continuation) {
        return ChannelsKt.toMutableSet(receiveChannel, continuation);
    }

    public static /* synthetic */ ReceiveChannel flatMap$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.flatMap(receiveChannel, coroutineContext, function2);
    }

    public static final <E, R> ReceiveChannel<R> flatMap(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super ReceiveChannel<? extends R>>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$flatMap$1(receiveChannel, function2, null), 2, null);
    }

    /* JADX INFO: Multiple debug info for r12v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0135 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0153 A[Catch: all -> 0x0201, TRY_LEAVE, TryCatch #0 {all -> 0x0201, blocks: (B:41:0x014b, B:43:0x0153, B:60:0x01f2), top: B:78:0x014b }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x01a5 A[Catch: all -> 0x01d6, TryCatch #5 {all -> 0x01d6, blocks: (B:50:0x019e, B:52:0x01a5, B:54:0x01b8), top: B:88:0x019e }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01f2 A[Catch: all -> 0x0201, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x0201, blocks: (B:41:0x014b, B:43:0x0153, B:60:0x01f2), top: B:78:0x014b }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K> Object groupBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends K> function1, Continuation<? super Map<K, ? extends List<? extends E>>> continuation) {
        ChannelsKt__Channels_commonKt$groupBy$1 channelsKt__Channels_commonKt$groupBy$1;
        int i;
        boolean z;
        boolean z2;
        int $i$f$groupBy;
        int $i$f$groupByTo;
        boolean z3;
        int $i$f$consumeEach;
        ReceiveChannel $receiver$iv;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        int keySelector;
        Object obj;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        LinkedHashMap destination$iv;
        Function1 keySelector2;
        ReceiveChannel key$iv;
        ReceiveChannel $receiver$iv$iv2;
        Object hasNext;
        boolean z4;
        boolean z5;
        boolean z6;
        Object obj2;
        ReceiveChannel $receiver$iv$iv$iv2;
        ReceiveChannel $receiver$iv$iv$iv3;
        ReceiveChannel $receiver$iv$iv3;
        Function1 keySelector3;
        Map destination$iv2;
        ChannelIterator<E> channelIterator2;
        boolean z7;
        ArrayList arrayList;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$groupBy$1) {
                channelsKt__Channels_commonKt$groupBy$1 = (ChannelsKt__Channels_commonKt$groupBy$1) continuation;
                if ((channelsKt__Channels_commonKt$groupBy$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$groupBy$1.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$groupBy$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$groupBy$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$groupByTo = 0;
                            $i$f$groupBy = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$groupBy$1.L$8;
                            ReceiveChannel $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupBy$1.L$6;
                            $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$4;
                            destination$iv2 = (Map) channelsKt__Channels_commonKt$groupBy$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$2;
                            Function1 keySelector4 = (Function1) channelsKt__Channels_commonKt$groupBy$1.L$1;
                            $receiver$iv$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    z6 = false;
                                    z5 = false;
                                    z4 = false;
                                    $receiver$iv$iv3 = $receiver$iv$iv4;
                                    keySelector3 = keySelector4;
                                    keySelector = 0;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$groupBy$1.L$8;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$7;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupBy$1.L$6;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$4;
                            Map destination$iv3 = (Map) channelsKt__Channels_commonKt$groupBy$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$2;
                            Function1 keySelector5 = (Function1) channelsKt__Channels_commonKt$groupBy$1.L$1;
                            ReceiveChannel $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$1.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver2 = $receiver;
                                    int $i$f$groupBy2 = 0;
                                    boolean z8 = false;
                                    ChannelsKt__Channels_commonKt$groupBy$1 channelsKt__Channels_commonKt$groupBy$12 = channelsKt__Channels_commonKt$groupBy$1;
                                    int $i$f$groupBy3 = 0;
                                    boolean z9 = false;
                                    int $i$f$groupByTo2 = 0;
                                    int $i$f$consumeEach2 = 0;
                                    int $i$f$consume2 = 0;
                                    ReceiveChannel $receiver$iv$iv6 = $receiver$iv$iv5;
                                    Function1 keySelector6 = keySelector5;
                                    obj2 = coroutine_suspended;
                                    z5 = false;
                                    Map destination$iv4 = destination$iv3;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    Object key$iv2 = keySelector6.invoke(it$iv);
                                                    Object value$iv$iv = destination$iv4.get(key$iv2);
                                                    if (value$iv$iv != null) {
                                                        z7 = z9;
                                                        ArrayList arrayList2 = new ArrayList();
                                                        destination$iv4.put(key$iv2, arrayList2);
                                                        arrayList = arrayList2;
                                                    } else {
                                                        z7 = z9;
                                                        arrayList = value$iv$iv;
                                                    }
                                                    ((List) arrayList).add(it$iv);
                                                    channelsKt__Channels_commonKt$groupBy$1.L$0 = key$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$1 = keySelector2;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$2 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$3 = destination$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$5 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$6 = cause$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$7 = $receiver$iv$iv2;
                                                    channelsKt__Channels_commonKt$groupBy$1.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$groupBy$1.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$1);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    z4 = z;
                                                    z5 = z2;
                                                    z6 = z3;
                                                    obj2 = obj;
                                                    $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                                                    $receiver$iv$iv$iv3 = key$iv;
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                    it$iv = hasNext;
                                                    keySelector3 = keySelector2;
                                                    destination$iv2 = destination$iv;
                                                    channelIterator2 = channelIterator;
                                                    try {
                                                        if (!((Boolean) it$iv).booleanValue()) {
                                                            channelsKt__Channels_commonKt$groupBy$1.L$0 = $receiver$iv$iv$iv3;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$1 = keySelector3;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$3 = destination$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$5 = $receiver$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$6 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$7 = $receiver$iv$iv3;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$8 = channelIterator2;
                                                            channelsKt__Channels_commonKt$groupBy$1.label = 2;
                                                            it$iv = channelIterator2.next(channelsKt__Channels_commonKt$groupBy$1);
                                                            if (it$iv == obj2) {
                                                                return obj2;
                                                            }
                                                            channelsKt__Channels_commonKt$groupBy$12 = channelsKt__Channels_commonKt$groupBy$1;
                                                            z9 = z6;
                                                            z8 = z4;
                                                            $i$f$groupBy2 = $i$f$groupBy;
                                                            $i$f$groupBy3 = $i$f$groupByTo;
                                                            $i$f$groupByTo2 = $i$f$consumeEach;
                                                            $i$f$consumeEach2 = $i$f$consume;
                                                            $i$f$consume2 = keySelector;
                                                            $receiver$iv$iv6 = $receiver$iv$iv3;
                                                            keySelector6 = keySelector3;
                                                            $receiver2 = $receiver$iv$iv$iv3;
                                                            $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                            channelIterator = channelIterator2;
                                                            destination$iv4 = destination$iv2;
                                                            Object key$iv22 = keySelector6.invoke(it$iv);
                                                            Object value$iv$iv2 = destination$iv4.get(key$iv22);
                                                            if (value$iv$iv2 != null) {
                                                            }
                                                            ((List) arrayList).add(it$iv);
                                                            channelsKt__Channels_commonKt$groupBy$1 = channelsKt__Channels_commonKt$groupBy$12;
                                                            $receiver$iv$iv2 = $receiver$iv$iv6;
                                                            keySelector = $i$f$consume2;
                                                            $i$f$consume = $i$f$consumeEach2;
                                                            obj = obj2;
                                                            $i$f$consumeEach = $i$f$groupByTo2;
                                                            $i$f$groupByTo = $i$f$groupBy3;
                                                            $i$f$groupBy = $i$f$groupBy2;
                                                            keySelector2 = keySelector6;
                                                            key$iv = $receiver2;
                                                            z3 = z7;
                                                            z = z8;
                                                            z2 = z5;
                                                            destination$iv = destination$iv4;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$0 = key$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$1 = keySelector2;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$2 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$3 = destination$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$5 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$6 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$7 = $receiver$iv$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$1.L$8 = channelIterator;
                                                            channelsKt__Channels_commonKt$groupBy$1.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$1);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return destination$iv2;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv$iv = th2;
                                                        $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv$iv = th6;
                                    }
                                    channelsKt__Channels_commonKt$groupBy$1 = channelsKt__Channels_commonKt$groupBy$12;
                                    $receiver$iv$iv2 = $receiver$iv$iv6;
                                    keySelector = $i$f$consume2;
                                    $i$f$consume = $i$f$consumeEach2;
                                    obj = obj2;
                                    $i$f$consumeEach = $i$f$groupByTo2;
                                    $i$f$groupByTo = $i$f$groupBy3;
                                    $i$f$groupBy = $i$f$groupBy2;
                                    keySelector2 = keySelector6;
                                    key$iv = $receiver2;
                                    z3 = z7;
                                    z = z8;
                                    z2 = z5;
                                    destination$iv = destination$iv4;
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        $i$f$groupBy = 0;
                        LinkedHashMap linkedHashMap = new LinkedHashMap();
                        $receiver$iv = receiveChannel;
                        $i$f$groupByTo = 0;
                        $receiver$iv$iv = $receiver$iv;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        $i$f$consume = 0;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            z3 = false;
                            z2 = false;
                            keySelector = 0;
                            obj = coroutine_suspended;
                            z = false;
                            destination$iv = linkedHashMap;
                            $receiver$iv$iv2 = $receiver$iv$iv$iv;
                            key$iv = receiveChannel;
                            keySelector2 = function1;
                            channelsKt__Channels_commonKt$groupBy$1.L$0 = key$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$1 = keySelector2;
                            channelsKt__Channels_commonKt$groupBy$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$3 = destination$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$5 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$6 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$groupBy$1.L$7 = $receiver$iv$iv2;
                            channelsKt__Channels_commonKt$groupBy$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$groupBy$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$groupBy$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$groupBy$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.groupBy(null, null, this);
            }
        };
        Object it$iv2 = channelsKt__Channels_commonKt$groupBy$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$groupBy$1.label;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r3v9 java.util.ArrayList: [D('answer$iv$iv' java.lang.Object), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    private static final Object groupBy$$forInline(ReceiveChannel $receiver, Function1 keySelector, Continuation continuation) {
        ChannelIterator it;
        ReceiveChannel $receiver$iv;
        ArrayList arrayList;
        Continuation continuation2 = continuation;
        List list$iv = null;
        Map destination$iv = new LinkedHashMap();
        ReceiveChannel $receiver$iv2 = $receiver;
        int i = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv2.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Object key$iv = keySelector.invoke(e$iv$iv);
                    try {
                        Object value$iv$iv = destination$iv.get(key$iv);
                        if (value$iv$iv == null) {
                            $receiver$iv = $receiver$iv2;
                            arrayList = new ArrayList();
                            try {
                                destination$iv.put(key$iv, arrayList);
                            } catch (Throwable th2) {
                                e$iv$iv$iv = th2;
                            }
                        } else {
                            $receiver$iv = $receiver$iv2;
                            arrayList = value$iv$iv;
                        }
                        ((List) arrayList).add(e$iv$iv);
                        continuation2 = continuation;
                        list$iv = list$iv;
                        $receiver$iv2 = $receiver$iv;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th3) {
                        e$iv$iv$iv = th3;
                    }
                } catch (Throwable th4) {
                    e$iv$iv$iv = th4;
                    throw e$iv$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination$iv;
            }
            e$iv$iv$iv = th2;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv2.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v7 java.lang.Object: [D('destination$iv' java.util.Map), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x014e A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x014f  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x016b A[Catch: all -> 0x0223, TRY_LEAVE, TryCatch #1 {all -> 0x0223, blocks: (B:41:0x0163, B:43:0x016b, B:60:0x0214), top: B:79:0x0163 }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x01bd A[Catch: all -> 0x01ed, TryCatch #5 {all -> 0x01ed, blocks: (B:50:0x01b6, B:52:0x01bd, B:54:0x01d0), top: B:87:0x01b6 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0214 A[Catch: all -> 0x0223, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0223, blocks: (B:41:0x0163, B:43:0x016b, B:60:0x0214), top: B:79:0x0163 }] */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.util.List] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V> Object groupBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends K> function1, Function1<? super E, ? extends V> function12, Continuation<? super Map<K, ? extends List<? extends V>>> continuation) {
        ChannelsKt__Channels_commonKt$groupBy$2 channelsKt__Channels_commonKt$groupBy$2;
        int i;
        Function1 $receiver;
        boolean z;
        boolean z2;
        int $i$f$groupByTo;
        ReceiveChannel $receiver2;
        int $i$f$consume;
        ReceiveChannel $receiver$iv;
        int $i$a$4$consume;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        Object obj;
        Function1 valueTransform;
        Map destination$iv;
        Throwable cause$iv$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv$iv2;
        Function1 keySelector;
        ChannelsKt__Channels_commonKt$groupBy$2 channelsKt__Channels_commonKt$groupBy$22;
        Throwable cause$iv$iv$iv2;
        Function1 valueTransform2;
        int $i$f$consumeEach;
        int $i$f$consumeEach2;
        Function1 $i$f$consume2;
        Map destination$iv2;
        Function1 keySelector2;
        ReceiveChannel $receiver$iv$iv3;
        ReceiveChannel $receiver$iv$iv4;
        Object hasNext;
        boolean z3;
        ArrayList arrayList;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$groupBy$2) {
                channelsKt__Channels_commonKt$groupBy$2 = (ChannelsKt__Channels_commonKt$groupBy$2) continuation;
                if ((channelsKt__Channels_commonKt$groupBy$2.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$groupBy$2.label -= Integer.MIN_VALUE;
                    Object it$iv = channelsKt__Channels_commonKt$groupBy$2.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$groupBy$2.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = 0;
                            $i$f$consume = 0;
                            $i$f$groupByTo = 0;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$groupBy$2.L$9;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupBy$2.L$7;
                            ReceiveChannel $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$5;
                            Map destination$iv3 = (Map) channelsKt__Channels_commonKt$groupBy$2.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$3;
                            Function1 valueTransform3 = (Function1) channelsKt__Channels_commonKt$groupBy$2.L$2;
                            Function1 keySelector3 = (Function1) channelsKt__Channels_commonKt$groupBy$2.L$1;
                            $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    $receiver = null;
                                    channelsKt__Channels_commonKt$groupBy$22 = channelsKt__Channels_commonKt$groupBy$2;
                                    z2 = false;
                                    z = false;
                                    $receiver$iv$iv2 = $receiver$iv$iv5;
                                    keySelector = keySelector3;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                    valueTransform = valueTransform3;
                                    obj = coroutine_suspended;
                                    destination$iv = destination$iv3;
                                    if (!((Boolean) it$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$groupBy$2.L$9;
                            ReceiveChannel $receiver$iv$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$8;
                            Throwable cause$iv$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$groupBy$2.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$5;
                            Map destination$iv4 = (Map) channelsKt__Channels_commonKt$groupBy$2.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$3;
                            Function1 valueTransform4 = (Function1) channelsKt__Channels_commonKt$groupBy$2.L$2;
                            Function1 keySelector4 = (Function1) channelsKt__Channels_commonKt$groupBy$2.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupBy$2.L$0;
                            try {
                                if (!(it$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver4 = $receiver3;
                                    int $i$f$consumeEach3 = 0;
                                    int $i$f$groupByTo2 = 0;
                                    Object obj2 = coroutine_suspended;
                                    boolean z4 = false;
                                    int $i$f$groupByTo3 = 0;
                                    ReceiveChannel $receiver$iv$iv7 = $receiver$iv$iv6;
                                    Function1 keySelector5 = keySelector4;
                                    cause$iv$iv$iv2 = cause$iv$iv$iv3;
                                    valueTransform2 = valueTransform4;
                                    Function1 valueTransform5 = null;
                                    ChannelsKt__Channels_commonKt$groupBy$2 channelsKt__Channels_commonKt$groupBy$23 = channelsKt__Channels_commonKt$groupBy$2;
                                    boolean z5 = false;
                                    Map destination$iv5 = destination$iv4;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    Object key$iv = keySelector5.invoke(it$iv);
                                                    Object value$iv$iv = destination$iv5.get(key$iv);
                                                    if (value$iv$iv != null) {
                                                        z3 = z5;
                                                        ArrayList arrayList2 = new ArrayList();
                                                        destination$iv5.put(key$iv, arrayList2);
                                                        arrayList = arrayList2;
                                                    } else {
                                                        z3 = z5;
                                                        arrayList = value$iv$iv;
                                                    }
                                                    ((List) arrayList).add(valueTransform2.invoke(it$iv));
                                                    channelsKt__Channels_commonKt$groupBy$22.L$0 = $receiver$iv$iv3;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$1 = keySelector2;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$2 = valueTransform2;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$4 = destination$iv2;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$6 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$7 = cause$iv$iv$iv2;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$8 = $receiver$iv$iv4;
                                                    channelsKt__Channels_commonKt$groupBy$22.L$9 = channelIterator;
                                                    channelsKt__Channels_commonKt$groupBy$22.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$22);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    $receiver2 = $receiver$iv$iv3;
                                                    $receiver = $i$f$consume2;
                                                    $i$a$4$consume = $i$f$consumeEach2;
                                                    $i$f$consume = $i$f$consumeEach;
                                                    $receiver$iv$iv2 = $receiver$iv$iv4;
                                                    it$iv = hasNext;
                                                    keySelector = keySelector2;
                                                    valueTransform = valueTransform2;
                                                    cause$iv$iv$iv = cause$iv$iv$iv2;
                                                    destination$iv = destination$iv2;
                                                    try {
                                                        if (!((Boolean) it$iv).booleanValue()) {
                                                            channelsKt__Channels_commonKt$groupBy$22.L$0 = $receiver2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$1 = keySelector;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$2 = valueTransform;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$4 = destination$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$6 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$7 = cause$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$8 = $receiver$iv$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$9 = channelIterator;
                                                            channelsKt__Channels_commonKt$groupBy$22.label = 2;
                                                            it$iv = channelIterator.next(channelsKt__Channels_commonKt$groupBy$22);
                                                            if (it$iv == obj) {
                                                                return obj;
                                                            }
                                                            $i$f$groupByTo2 = $i$f$groupByTo;
                                                            $i$f$groupByTo3 = $i$a$4$consume;
                                                            $receiver$iv$iv7 = $receiver$iv$iv2;
                                                            keySelector5 = keySelector;
                                                            $receiver4 = $receiver2;
                                                            valueTransform5 = $receiver;
                                                            channelsKt__Channels_commonKt$groupBy$23 = channelsKt__Channels_commonKt$groupBy$22;
                                                            z5 = z2;
                                                            z4 = z;
                                                            $i$f$consumeEach3 = $i$f$consume;
                                                            obj2 = obj;
                                                            cause$iv$iv$iv2 = cause$iv$iv$iv;
                                                            valueTransform2 = valueTransform;
                                                            destination$iv5 = destination$iv;
                                                            Object key$iv2 = keySelector5.invoke(it$iv);
                                                            Object value$iv$iv2 = destination$iv5.get(key$iv2);
                                                            if (value$iv$iv2 != null) {
                                                            }
                                                            ((List) arrayList).add(valueTransform2.invoke(it$iv));
                                                            keySelector2 = keySelector5;
                                                            channelsKt__Channels_commonKt$groupBy$22 = channelsKt__Channels_commonKt$groupBy$23;
                                                            $receiver$iv$iv4 = $receiver$iv$iv7;
                                                            obj = obj2;
                                                            $i$f$consume2 = valueTransform5;
                                                            $i$f$consumeEach2 = $i$f$groupByTo3;
                                                            $i$f$consumeEach = $i$f$consumeEach3;
                                                            $i$f$groupByTo = $i$f$groupByTo2;
                                                            $receiver$iv$iv3 = $receiver4;
                                                            z = z4;
                                                            z2 = z3;
                                                            destination$iv2 = destination$iv5;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$0 = $receiver$iv$iv3;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$1 = keySelector2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$2 = valueTransform2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$4 = destination$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$6 = $receiver$iv$iv$iv;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$7 = cause$iv$iv$iv2;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$8 = $receiver$iv$iv4;
                                                            channelsKt__Channels_commonKt$groupBy$22.L$9 = channelIterator;
                                                            channelsKt__Channels_commonKt$groupBy$22.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$22);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return destination$iv;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv$iv = th3;
                                                }
                                                keySelector2 = keySelector5;
                                                channelsKt__Channels_commonKt$groupBy$22 = channelsKt__Channels_commonKt$groupBy$23;
                                                $receiver$iv$iv4 = $receiver$iv$iv7;
                                                obj = obj2;
                                                $i$f$consume2 = valueTransform5;
                                                $i$f$consumeEach2 = $i$f$groupByTo3;
                                                $i$f$consumeEach = $i$f$consumeEach3;
                                                $i$f$groupByTo = $i$f$groupByTo2;
                                                $receiver$iv$iv3 = $receiver4;
                                                z = z4;
                                                z2 = z3;
                                                destination$iv2 = destination$iv5;
                                            } catch (Throwable th4) {
                                                e$iv$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv$iv = th6;
                                    }
                                } else {
                                    throw ((Result.Failure) it$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it$iv instanceof Result.Failure)) {
                        Map destination$iv6 = new LinkedHashMap();
                        $receiver$iv = receiveChannel;
                        $i$f$groupByTo = 0;
                        $receiver$iv$iv = $receiver$iv;
                        $receiver$iv$iv$iv = $receiver$iv$iv;
                        Throwable cause$iv$iv$iv4 = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            z2 = false;
                            destination$iv2 = destination$iv6;
                            cause$iv$iv$iv2 = cause$iv$iv$iv4;
                            $i$f$consumeEach = 0;
                            obj = coroutine_suspended;
                            channelsKt__Channels_commonKt$groupBy$22 = channelsKt__Channels_commonKt$groupBy$2;
                            valueTransform2 = function12;
                            z = false;
                            $receiver$iv$iv4 = $receiver$iv$iv$iv;
                            $i$f$consumeEach2 = 0;
                            $receiver$iv$iv3 = receiveChannel;
                            $i$f$consume2 = null;
                            keySelector2 = function1;
                            channelsKt__Channels_commonKt$groupBy$22.L$0 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$groupBy$22.L$1 = keySelector2;
                            channelsKt__Channels_commonKt$groupBy$22.L$2 = valueTransform2;
                            channelsKt__Channels_commonKt$groupBy$22.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$groupBy$22.L$4 = destination$iv2;
                            channelsKt__Channels_commonKt$groupBy$22.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$groupBy$22.L$6 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$groupBy$22.L$7 = cause$iv$iv$iv2;
                            channelsKt__Channels_commonKt$groupBy$22.L$8 = $receiver$iv$iv4;
                            channelsKt__Channels_commonKt$groupBy$22.L$9 = channelIterator;
                            channelsKt__Channels_commonKt$groupBy$22.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupBy$22);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$groupBy$2 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$groupBy$2
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.groupBy(null, null, null, this);
            }
        };
        Object it$iv2 = channelsKt__Channels_commonKt$groupBy$2.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$groupBy$2.label;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r3v13 java.util.ArrayList: [D('answer$iv$iv' java.lang.Object), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    private static final Object groupBy$$forInline(ReceiveChannel $receiver, Function1 keySelector, Function1 valueTransform, Continuation continuation) {
        Throwable e$iv$iv$iv;
        ChannelIterator it;
        ReceiveChannel $receiver$iv;
        ArrayList arrayList;
        Continuation continuation2 = continuation;
        boolean z = false;
        Map destination$iv = new LinkedHashMap();
        ReceiveChannel $receiver$iv2 = $receiver;
        int i = 0;
        Throwable cause$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv2.iterator();
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Object key$iv = keySelector.invoke(e$iv$iv);
                    try {
                        Object value$iv$iv = destination$iv.get(key$iv);
                        if (value$iv$iv == null) {
                            $receiver$iv = $receiver$iv2;
                            ArrayList arrayList2 = new ArrayList();
                            try {
                                destination$iv.put(key$iv, arrayList2);
                                arrayList = arrayList2;
                            } catch (Throwable th2) {
                                e$iv$iv$iv = th2;
                            }
                        } else {
                            $receiver$iv = $receiver$iv2;
                            arrayList = value$iv$iv;
                        }
                        try {
                            ((List) arrayList).add(valueTransform.invoke(e$iv$iv));
                            continuation2 = continuation;
                            z = z;
                            $receiver$iv2 = $receiver$iv;
                            i = 0;
                            i2 = 1;
                        } catch (Throwable th3) {
                            e$iv$iv$iv = th3;
                        }
                    } catch (Throwable th4) {
                        e$iv$iv$iv = th4;
                    }
                } catch (Throwable th5) {
                    e$iv$iv$iv = th5;
                    throw e$iv$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination$iv;
            }
            e$iv$iv$iv = th3;
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv2.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r3v7 M extends java.util.Map<? super K, java.util.List<E>>: [D('destination' java.util.Map), D('$receiver$iv' java.util.Map)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c8  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0106 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0107  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x011b A[Catch: all -> 0x01b2, TRY_LEAVE, TryCatch #1 {all -> 0x01b2, blocks: (B:41:0x0113, B:43:0x011b, B:60:0x01a4), top: B:79:0x0113 }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0160 A[Catch: all -> 0x018a, TryCatch #6 {all -> 0x018a, blocks: (B:50:0x0159, B:52:0x0160, B:54:0x0173), top: B:89:0x0159 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01a4 A[Catch: all -> 0x01b2, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x01b2, blocks: (B:41:0x0113, B:43:0x011b, B:60:0x01a4), top: B:79:0x0113 }] */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r8v9, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, M extends Map<? super K, List<E>>> Object groupByTo(ReceiveChannel<? extends E> receiveChannel, M m, Function1<? super E, ? extends K> function1, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$groupByTo$1 channelsKt__Channels_commonKt$groupByTo$1;
        int i;
        boolean z;
        boolean z2;
        int $i$f$groupByTo;
        int $i$f$consumeEach;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int destination;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 keySelector;
        M m2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z3;
        boolean z4;
        ChannelIterator<E> channelIterator2;
        Object obj2;
        Function1 keySelector2;
        M m3;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver2;
        boolean z5;
        ArrayList arrayList;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$groupByTo$1) {
                channelsKt__Channels_commonKt$groupByTo$1 = (ChannelsKt__Channels_commonKt$groupByTo$1) continuation;
                if ((channelsKt__Channels_commonKt$groupByTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$groupByTo$1.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$groupByTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$groupByTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$groupByTo = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$groupByTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupByTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$3;
                            keySelector2 = (Function1) channelsKt__Channels_commonKt$groupByTo$1.L$2;
                            ?? r8 = (Map) channelsKt__Channels_commonKt$groupByTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    z4 = false;
                                    z3 = false;
                                    obj2 = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    m3 = r8;
                                    destination = 0;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$groupByTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupByTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$3;
                            Function1 keySelector3 = (Function1) channelsKt__Channels_commonKt$groupByTo$1.L$2;
                            Map destination2 = (Map) channelsKt__Channels_commonKt$groupByTo$1.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    ChannelsKt__Channels_commonKt$groupByTo$1 channelsKt__Channels_commonKt$groupByTo$12 = channelsKt__Channels_commonKt$groupByTo$1;
                                    int $i$f$groupByTo2 = 0;
                                    boolean z6 = false;
                                    z = false;
                                    int $i$f$groupByTo3 = 0;
                                    int $i$f$consumeEach2 = 0;
                                    int $i$f$consume2 = 0;
                                    Object obj3 = coroutine_suspended;
                                    $receiver2 = $receiver4;
                                    ReceiveChannel $receiver5 = $receiver$iv4;
                                    Map map = destination2;
                                    keySelector = keySelector3;
                                    ChannelIterator<E> channelIterator5 = channelIterator4;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    Object key = keySelector.invoke(it);
                                                    Object value$iv = map.get(key);
                                                    if (value$iv != null) {
                                                        z5 = z6;
                                                        ArrayList arrayList2 = new ArrayList();
                                                        map.put(key, arrayList2);
                                                        arrayList = arrayList2;
                                                    } else {
                                                        z5 = z6;
                                                        arrayList = value$iv;
                                                    }
                                                    ((List) arrayList).add(it);
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$1 = m2;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$2 = keySelector;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$6 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$groupByTo$1.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$groupByTo$1.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$1);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    z3 = z;
                                                    z4 = z2;
                                                    channelIterator2 = channelIterator;
                                                    obj2 = obj;
                                                    keySelector2 = keySelector;
                                                    m3 = m2;
                                                    $receiver$iv3 = $receiver$iv2;
                                                    it = hasNext;
                                                    $receiver2 = $receiver;
                                                    try {
                                                        if (!((Boolean) it).booleanValue()) {
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$0 = $receiver2;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$1 = m3;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$2 = keySelector2;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$6 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$7 = channelIterator2;
                                                            channelsKt__Channels_commonKt$groupByTo$1.label = 2;
                                                            it = channelIterator2.next(channelsKt__Channels_commonKt$groupByTo$1);
                                                            if (it == obj2) {
                                                                return obj2;
                                                            }
                                                            channelsKt__Channels_commonKt$groupByTo$12 = channelsKt__Channels_commonKt$groupByTo$1;
                                                            z6 = z4;
                                                            z = z3;
                                                            $i$f$groupByTo2 = $i$f$groupByTo;
                                                            $i$f$groupByTo3 = $i$f$consumeEach;
                                                            $i$f$consumeEach2 = $i$f$consume;
                                                            $i$f$consume2 = destination;
                                                            obj3 = obj2;
                                                            $receiver5 = $receiver$iv3;
                                                            map = m3;
                                                            keySelector = keySelector2;
                                                            channelIterator5 = channelIterator2;
                                                            Object key2 = keySelector.invoke(it);
                                                            Object value$iv2 = map.get(key2);
                                                            if (value$iv2 != null) {
                                                            }
                                                            ((List) arrayList).add(it);
                                                            m2 = map;
                                                            $receiver$iv2 = $receiver5;
                                                            channelsKt__Channels_commonKt$groupByTo$1 = channelsKt__Channels_commonKt$groupByTo$12;
                                                            obj = obj3;
                                                            destination = $i$f$consume2;
                                                            $i$f$consume = $i$f$consumeEach2;
                                                            $i$f$consumeEach = $i$f$groupByTo3;
                                                            channelIterator = channelIterator5;
                                                            $i$f$groupByTo = $i$f$groupByTo2;
                                                            $receiver = $receiver2;
                                                            z2 = z5;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$1 = m2;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$2 = keySelector;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$6 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$groupByTo$1.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$groupByTo$1.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$1);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return m3;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                    m2 = map;
                                    $receiver$iv2 = $receiver5;
                                    channelsKt__Channels_commonKt$groupByTo$1 = channelsKt__Channels_commonKt$groupByTo$12;
                                    obj = obj3;
                                    destination = $i$f$consume2;
                                    $i$f$consume = $i$f$consumeEach2;
                                    $i$f$consumeEach = $i$f$groupByTo3;
                                    channelIterator = channelIterator5;
                                    $i$f$groupByTo = $i$f$groupByTo2;
                                    $receiver = $receiver2;
                                    z2 = z5;
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        $i$f$groupByTo = 0;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv = receiveChannel;
                        $i$f$consume = 0;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z2 = false;
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            destination = 0;
                            $receiver = receiveChannel;
                            keySelector = function1;
                            $receiver$iv = receiveChannel;
                            m2 = m;
                            channelsKt__Channels_commonKt$groupByTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$groupByTo$1.L$1 = m2;
                            channelsKt__Channels_commonKt$groupByTo$1.L$2 = keySelector;
                            channelsKt__Channels_commonKt$groupByTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$groupByTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$groupByTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$groupByTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$groupByTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$groupByTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$groupByTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$groupByTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.groupByTo(null, null, null, this);
            }
        };
        Object it2 = channelsKt__Channels_commonKt$groupByTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$groupByTo$1.label;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r2v9 java.util.ArrayList: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('answer$iv' java.lang.Object)] */
    /* JADX WARN: Multi-variable type inference failed */
    private static final Object groupByTo$$forInline(ReceiveChannel $receiver, Map destination, Function1 keySelector, Continuation continuation) {
        ChannelIterator it;
        ReceiveChannel $receiver$iv;
        ArrayList arrayList;
        Continuation continuation2 = continuation;
        List list = null;
        ReceiveChannel $receiver$iv2 = $receiver;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv2.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Object key = keySelector.invoke(e$iv);
                    try {
                        Object value$iv = destination.get(key);
                        if (value$iv == null) {
                            $receiver$iv = $receiver$iv2;
                            arrayList = new ArrayList();
                            try {
                                destination.put(key, arrayList);
                            } catch (Throwable th2) {
                                e$iv$iv = th2;
                            }
                        } else {
                            $receiver$iv = $receiver$iv2;
                            arrayList = value$iv;
                        }
                        ((List) arrayList).add(e$iv);
                        continuation2 = continuation;
                        list = list;
                        $receiver$iv2 = $receiver$iv;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th3) {
                        e$iv$iv = th3;
                    }
                } catch (Throwable th4) {
                    e$iv$iv = th4;
                    throw e$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv2.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r3v7 M extends java.util.Map<? super K, java.util.List<V>>: [D('destination' java.util.Map), D('$receiver$iv' java.util.Map)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0127 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0142 A[Catch: all -> 0x01e1, TRY_LEAVE, TryCatch #0 {all -> 0x01e1, blocks: (B:41:0x013a, B:43:0x0142, B:60:0x01d3), top: B:77:0x013a }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0188 A[Catch: all -> 0x01b9, TryCatch #5 {all -> 0x01b9, blocks: (B:50:0x0181, B:52:0x0188, B:54:0x019b), top: B:87:0x0181 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x0197  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01d3 A[Catch: all -> 0x01e1, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x01e1, blocks: (B:41:0x013a, B:43:0x0142, B:60:0x01d3), top: B:77:0x013a }] */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r8v11, types: [java.util.Map] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, K, V, M extends Map<? super K, List<V>>> Object groupByTo(ReceiveChannel<? extends E> receiveChannel, M m, Function1<? super E, ? extends K> function1, Function1<? super E, ? extends V> function12, Continuation<? super M> continuation) {
        ChannelsKt__Channels_commonKt$groupByTo$3 channelsKt__Channels_commonKt$groupByTo$3;
        int i;
        boolean z;
        boolean z2;
        boolean z3;
        int $i$f$consumeEach;
        int $i$f$consumeEach2;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ReceiveChannel $receiver;
        Function1 valueTransform;
        ChannelIterator<E> channelIterator;
        Function1 keySelector;
        M m2;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        boolean z4;
        boolean z5;
        boolean z6;
        Object obj2;
        int destination;
        int $i$a$4$consume;
        int $i$f$consume2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv3;
        Function1 keySelector2;
        M m3;
        ReceiveChannel $receiver$iv4;
        ReceiveChannel $receiver2;
        boolean z7;
        ArrayList arrayList;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$groupByTo$3) {
                channelsKt__Channels_commonKt$groupByTo$3 = (ChannelsKt__Channels_commonKt$groupByTo$3) continuation;
                if ((channelsKt__Channels_commonKt$groupByTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$groupByTo$3.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$groupByTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$groupByTo$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = 0;
                            $i$f$consume2 = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$groupByTo$3.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupByTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$5;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$4;
                            valueTransform = (Function1) channelsKt__Channels_commonKt$groupByTo$3.L$3;
                            keySelector2 = (Function1) channelsKt__Channels_commonKt$groupByTo$3.L$2;
                            ?? r8 = (Map) channelsKt__Channels_commonKt$groupByTo$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj2 = coroutine_suspended;
                                    z6 = false;
                                    z5 = false;
                                    z4 = false;
                                    $receiver$iv4 = $receiver$iv5;
                                    $receiver2 = $receiver3;
                                    destination = 0;
                                    m3 = r8;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$groupByTo$3.L$8;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$groupByTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$5;
                            ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$4;
                            Function1 valueTransform2 = (Function1) channelsKt__Channels_commonKt$groupByTo$3.L$3;
                            keySelector = (Function1) channelsKt__Channels_commonKt$groupByTo$3.L$2;
                            Map destination2 = (Map) channelsKt__Channels_commonKt$groupByTo$3.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$groupByTo$3.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver2 = $receiver4;
                                    int $i$f$consumeEach3 = 0;
                                    boolean z8 = false;
                                    $receiver = $receiver$iv7;
                                    $i$f$consumeEach2 = 0;
                                    ChannelsKt__Channels_commonKt$groupByTo$3 channelsKt__Channels_commonKt$groupByTo$32 = channelsKt__Channels_commonKt$groupByTo$3;
                                    $i$f$consume = 0;
                                    boolean z9 = false;
                                    ReceiveChannel $receiver$iv8 = $receiver$iv6;
                                    Map map = destination2;
                                    valueTransform = valueTransform2;
                                    obj2 = coroutine_suspended;
                                    z5 = false;
                                    ChannelIterator<E> channelIterator5 = channelIterator4;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    Object key = keySelector.invoke(it);
                                                    Object value$iv = map.get(key);
                                                    if (value$iv != null) {
                                                        z7 = z9;
                                                        ArrayList arrayList2 = new ArrayList();
                                                        map.put(key, arrayList2);
                                                        arrayList = arrayList2;
                                                    } else {
                                                        z7 = z9;
                                                        arrayList = value$iv;
                                                    }
                                                    ((List) arrayList).add(valueTransform.invoke(it));
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$0 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$1 = m2;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$2 = keySelector;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$3 = valueTransform;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$4 = $receiver;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$7 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$groupByTo$3.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$groupByTo$3.label = 1;
                                                    hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$3);
                                                    if (hasNext == obj) {
                                                        return obj;
                                                    }
                                                    z4 = z;
                                                    z5 = z2;
                                                    z6 = z3;
                                                    obj2 = obj;
                                                    destination = $i$f$consume;
                                                    $i$a$4$consume = $i$f$consumeEach2;
                                                    $i$f$consume2 = $i$f$consumeEach;
                                                    channelIterator2 = channelIterator;
                                                    $receiver$iv3 = $receiver;
                                                    keySelector2 = keySelector;
                                                    m3 = m2;
                                                    $receiver$iv4 = $receiver$iv2;
                                                    it = hasNext;
                                                    $receiver2 = $receiver$iv;
                                                    try {
                                                        if (!((Boolean) it).booleanValue()) {
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$0 = $receiver2;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$1 = m3;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$2 = keySelector2;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$3 = valueTransform;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$4 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$6 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$7 = $receiver$iv4;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$8 = channelIterator2;
                                                            channelsKt__Channels_commonKt$groupByTo$3.label = 2;
                                                            it = channelIterator2.next(channelsKt__Channels_commonKt$groupByTo$3);
                                                            if (it == obj2) {
                                                                return obj2;
                                                            }
                                                            channelsKt__Channels_commonKt$groupByTo$32 = channelsKt__Channels_commonKt$groupByTo$3;
                                                            z9 = z6;
                                                            z8 = z4;
                                                            $i$f$consumeEach3 = $i$f$consume2;
                                                            $i$f$consumeEach2 = $i$a$4$consume;
                                                            $i$f$consume = destination;
                                                            $receiver$iv8 = $receiver$iv4;
                                                            map = m3;
                                                            keySelector = keySelector2;
                                                            $receiver = $receiver$iv3;
                                                            channelIterator5 = channelIterator2;
                                                            Object key2 = keySelector.invoke(it);
                                                            Object value$iv2 = map.get(key2);
                                                            if (value$iv2 != null) {
                                                            }
                                                            ((List) arrayList).add(valueTransform.invoke(it));
                                                            m2 = map;
                                                            $receiver$iv = $receiver2;
                                                            channelsKt__Channels_commonKt$groupByTo$3 = channelsKt__Channels_commonKt$groupByTo$32;
                                                            $receiver$iv2 = $receiver$iv8;
                                                            channelIterator = channelIterator5;
                                                            obj = obj2;
                                                            $i$f$consumeEach = $i$f$consumeEach3;
                                                            z3 = z7;
                                                            z = z8;
                                                            z2 = z5;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$0 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$1 = m2;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$2 = keySelector;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$3 = valueTransform;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$4 = $receiver;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$6 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$7 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$groupByTo$3.L$8 = channelIterator;
                                                            channelsKt__Channels_commonKt$groupByTo$3.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$3);
                                                            if (hasNext == obj) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return m3;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                    m2 = map;
                                    $receiver$iv = $receiver2;
                                    channelsKt__Channels_commonKt$groupByTo$3 = channelsKt__Channels_commonKt$groupByTo$32;
                                    $receiver$iv2 = $receiver$iv8;
                                    channelIterator = channelIterator5;
                                    obj = obj2;
                                    $i$f$consumeEach = $i$f$consumeEach3;
                                    z3 = z7;
                                    z = z8;
                                    z2 = z5;
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            valueTransform = function12;
                            z3 = false;
                            z2 = false;
                            $receiver = receiveChannel;
                            $i$f$consumeEach = 0;
                            obj = coroutine_suspended;
                            $receiver$iv = receiveChannel;
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            $i$f$consumeEach2 = 0;
                            m2 = m;
                            $i$f$consume = 0;
                            keySelector = function1;
                            channelsKt__Channels_commonKt$groupByTo$3.L$0 = $receiver$iv;
                            channelsKt__Channels_commonKt$groupByTo$3.L$1 = m2;
                            channelsKt__Channels_commonKt$groupByTo$3.L$2 = keySelector;
                            channelsKt__Channels_commonKt$groupByTo$3.L$3 = valueTransform;
                            channelsKt__Channels_commonKt$groupByTo$3.L$4 = $receiver;
                            channelsKt__Channels_commonKt$groupByTo$3.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$groupByTo$3.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$groupByTo$3.L$7 = $receiver$iv2;
                            channelsKt__Channels_commonKt$groupByTo$3.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$groupByTo$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$groupByTo$3);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$groupByTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$groupByTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.groupByTo(null, null, null, null, this);
            }
        };
        Object it2 = channelsKt__Channels_commonKt$groupByTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$groupByTo$3.label;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r2v13 java.util.ArrayList: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('answer$iv' java.lang.Object)] */
    /* JADX WARN: Multi-variable type inference failed */
    private static final Object groupByTo$$forInline(ReceiveChannel $receiver, Map destination, Function1 keySelector, Function1 valueTransform, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        ReceiveChannel $receiver$iv;
        ArrayList arrayList;
        Continuation continuation2 = continuation;
        boolean z = false;
        ReceiveChannel $receiver$iv2 = $receiver;
        int i = 0;
        Throwable cause$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv2.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Object key = keySelector.invoke(e$iv);
                    try {
                        Object value$iv = destination.get(key);
                        if (value$iv == null) {
                            $receiver$iv = $receiver$iv2;
                            ArrayList arrayList2 = new ArrayList();
                            try {
                                destination.put(key, arrayList2);
                                arrayList = arrayList2;
                            } catch (Throwable th2) {
                                e$iv$iv = th2;
                            }
                        } else {
                            $receiver$iv = $receiver$iv2;
                            arrayList = value$iv;
                        }
                        try {
                            ((List) arrayList).add(valueTransform.invoke(e$iv));
                            continuation2 = continuation;
                            z = z;
                            $receiver$iv2 = $receiver$iv;
                            i = 0;
                            i2 = 1;
                        } catch (Throwable th3) {
                            e$iv$iv = th3;
                        }
                    } catch (Throwable th4) {
                        e$iv$iv = th4;
                    }
                } catch (Throwable th5) {
                    e$iv$iv = th5;
                    throw e$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th3;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv2.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel map$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.map(receiveChannel, coroutineContext, function2);
    }

    public static final <E, R> ReceiveChannel<R> map(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super R>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$map$1(receiveChannel, function2, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel mapIndexed$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function3 function3, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.mapIndexed(receiveChannel, coroutineContext, function3);
    }

    public static final <E, R> ReceiveChannel<R> mapIndexed(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function3<? super Integer, ? super E, ? super Continuation<? super R>, ? extends Object> function3) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function3, "transform");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$mapIndexed$1(receiveChannel, function3, null), 2, null);
    }

    public static /* synthetic */ ReceiveChannel mapIndexedNotNull$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function3 function3, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.mapIndexedNotNull(receiveChannel, coroutineContext, function3);
    }

    public static final <E, R> ReceiveChannel<R> mapIndexedNotNull(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function3<? super Integer, ? super E, ? super Continuation<? super R>, ? extends Object> function3) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function3, "transform");
        return ChannelsKt.filterNotNull(ChannelsKt.mapIndexed(receiveChannel, context, function3));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00fa  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0150 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0172 A[Catch: all -> 0x0234, TRY_LEAVE, TryCatch #1 {all -> 0x0234, blocks: (B:41:0x016a, B:43:0x0172, B:62:0x0225), top: B:82:0x016a }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x01d9 A[Catch: all -> 0x01fc, TRY_LEAVE, TryCatch #7 {all -> 0x01fc, blocks: (B:52:0x01b6, B:54:0x01d9), top: B:94:0x01b6 }] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0225 A[Catch: all -> 0x0234, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0234, blocks: (B:41:0x016a, B:43:0x0172, B:62:0x0225), top: B:82:0x016a }] */
    /* JADX WARN: Type inference failed for: r9v7, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends Collection<? super R>> Object mapIndexedNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, ? extends R> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$1 channelsKt__Channels_commonKt$mapIndexedNotNullTo$1;
        int i;
        boolean z;
        boolean z2;
        boolean z3;
        Object obj;
        int $i$f$consumeEachIndexed;
        int i2;
        ReceiveChannel $receiver$iv;
        int $i$f$consumeEach;
        Ref.IntRef index$iv;
        int $i$f$consume;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv$iv$iv;
        int transform;
        Object obj2;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv$iv;
        Function2 transform2;
        Collection collection;
        ReceiveChannel $receiver2;
        ReceiveChannel $receiver$iv$iv;
        Object hasNext;
        boolean z4;
        boolean z5;
        boolean z6;
        Object obj3;
        int i3;
        Object obj4;
        ReceiveChannel $receiver$iv$iv2;
        ReceiveChannel $receiver$iv$iv3;
        ReceiveChannel $receiver$iv$iv4;
        C c2;
        Function2 transform3;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$1) {
                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1 = (ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$1) continuation;
                if ((channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label -= Integer.MIN_VALUE;
                    Object e$iv$iv = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$consumeEachIndexed = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9;
                            $receiver$iv$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8;
                            Throwable cause$iv$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7;
                            ReceiveChannel $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3;
                            Function2 transform4 = (Function2) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2;
                            ?? r9 = (Collection) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    obj4 = coroutine_suspended;
                                    i3 = 0;
                                    obj3 = null;
                                    z6 = false;
                                    z5 = false;
                                    z4 = false;
                                    c2 = r9;
                                    $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                                    transform3 = transform4;
                                    transform = 0;
                                    cause$iv$iv$iv = cause$iv$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) e$iv$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv = $receiver$iv$iv$iv2;
                            }
                        } else if (i == 2) {
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9;
                            ReceiveChannel $receiver$iv$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3;
                            Function2 transform5 = (Function2) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0;
                            try {
                                if (!(e$iv$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver4 = $receiver3;
                                    int $i$f$consumeEachIndexed2 = 0;
                                    boolean z7 = false;
                                    obj3 = null;
                                    z5 = false;
                                    ReceiveChannel $receiver5 = $receiver$iv$iv5;
                                    collection = destination;
                                    int $i$f$consumeEachIndexed3 = 0;
                                    int $i$f$consumeEach2 = 0;
                                    transform2 = transform5;
                                    obj4 = coroutine_suspended;
                                    z6 = false;
                                    int $i$f$consume2 = 0;
                                    ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$1 channelsKt__Channels_commonKt$mapIndexedNotNullTo$12 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    try {
                                                        int i4 = index$iv.element;
                                                        index$iv.element = i4 + 1;
                                                        IndexedValue $index_element = new IndexedValue(i4, e$iv$iv);
                                                        int index = $index_element.component1();
                                                        Object element = (Object) $index_element.component2();
                                                        Object it = transform2.invoke(Boxing.boxInt(index), element);
                                                        if (it != null) {
                                                            Boxing.boxBoolean(collection.add(it));
                                                        }
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0 = $receiver2;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1 = collection;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2 = transform2;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4 = index$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5 = $receiver;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6 = $receiver$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7 = cause$iv$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9 = channelIterator;
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$1);
                                                        if (hasNext == obj2) {
                                                            return obj2;
                                                        }
                                                        z4 = z;
                                                        z5 = z2;
                                                        z6 = z3;
                                                        obj3 = obj;
                                                        i3 = i2;
                                                        obj4 = obj2;
                                                        $receiver$iv$iv2 = $receiver;
                                                        $receiver$iv$iv3 = $receiver2;
                                                        $receiver$iv$iv4 = $receiver$iv$iv;
                                                        e$iv$iv = hasNext;
                                                        c2 = collection;
                                                        transform3 = transform2;
                                                        channelIterator2 = channelIterator;
                                                        try {
                                                            if (!((Boolean) e$iv$iv).booleanValue()) {
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0 = $receiver$iv$iv3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1 = c2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2 = transform3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4 = index$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5 = $receiver$iv$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6 = $receiver$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7 = cause$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8 = $receiver$iv$iv4;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9 = channelIterator2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label = 2;
                                                                e$iv$iv = channelIterator2.next(channelsKt__Channels_commonKt$mapIndexedNotNullTo$1);
                                                                if (e$iv$iv == obj4) {
                                                                    return obj4;
                                                                }
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$12 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1;
                                                                z7 = z4;
                                                                $i$f$consumeEachIndexed2 = $i$f$consumeEachIndexed;
                                                                $i$f$consumeEachIndexed3 = $i$f$consumeEach;
                                                                $i$f$consumeEach2 = $i$f$consume;
                                                                $i$f$consume2 = transform;
                                                                collection = c2;
                                                                $receiver4 = $receiver$iv$iv3;
                                                                $receiver = $receiver$iv$iv2;
                                                                channelIterator4 = channelIterator2;
                                                                transform2 = transform3;
                                                                $receiver5 = $receiver$iv$iv4;
                                                                int i42 = index$iv.element;
                                                                index$iv.element = i42 + 1;
                                                                IndexedValue $index_element2 = new IndexedValue(i42, e$iv$iv);
                                                                int index2 = $index_element2.component1();
                                                                Object element2 = (Object) $index_element2.component2();
                                                                Object it2 = transform2.invoke(Boxing.boxInt(index2), element2);
                                                                if (it2 != null) {
                                                                }
                                                                $receiver$iv$iv = $receiver5;
                                                                channelIterator = channelIterator4;
                                                                obj2 = obj4;
                                                                z = z7;
                                                                cause$iv$iv$iv = cause$iv$iv$iv;
                                                                i2 = index2;
                                                                obj = element2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$12;
                                                                transform = $i$f$consume2;
                                                                $i$f$consume = $i$f$consumeEach2;
                                                                $i$f$consumeEach = $i$f$consumeEachIndexed3;
                                                                $i$f$consumeEachIndexed = $i$f$consumeEachIndexed2;
                                                                $receiver2 = $receiver4;
                                                                z2 = z5;
                                                                z3 = z6;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0 = $receiver2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1 = collection;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2 = transform2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4 = index$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5 = $receiver;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6 = $receiver$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7 = cause$iv$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9 = channelIterator;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label = 1;
                                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$1);
                                                                if (hasNext == obj2) {
                                                                }
                                                            } else {
                                                                Unit unit = Unit.INSTANCE;
                                                                return c2;
                                                            }
                                                        } catch (Throwable th2) {
                                                            e$iv$iv$iv = th2;
                                                        }
                                                    } catch (Throwable th3) {
                                                        e$iv$iv$iv = th3;
                                                    }
                                                } catch (Throwable th4) {
                                                    e$iv$iv$iv = th4;
                                                }
                                            } catch (Throwable th5) {
                                                e$iv$iv$iv = th5;
                                            }
                                        } catch (Throwable th6) {
                                            e$iv$iv$iv = th6;
                                        }
                                    } catch (Throwable th7) {
                                        e$iv$iv$iv = th7;
                                    }
                                    $receiver$iv$iv = $receiver5;
                                    channelIterator = channelIterator4;
                                    obj2 = obj4;
                                    z = z7;
                                    cause$iv$iv$iv = cause$iv$iv$iv;
                                    i2 = index2;
                                    obj = element2;
                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$1 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$12;
                                    transform = $i$f$consume2;
                                    $i$f$consume = $i$f$consumeEach2;
                                    $i$f$consumeEach = $i$f$consumeEachIndexed3;
                                    $i$f$consumeEachIndexed = $i$f$consumeEachIndexed2;
                                    $receiver2 = $receiver4;
                                    z2 = z5;
                                    z3 = z6;
                                } else {
                                    throw ((Result.Failure) e$iv$iv).exception;
                                }
                            } catch (Throwable th8) {
                                e$iv$iv$iv = th8;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv$iv instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        $i$f$consumeEachIndexed = 0;
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        index$iv = intRef;
                        $receiver = $receiver$iv;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv$iv = $receiver;
                        $i$f$consume = 0;
                        cause$iv$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv$iv.iterator();
                            i2 = 0;
                            z3 = false;
                            z = false;
                            obj = null;
                            transform = 0;
                            obj2 = coroutine_suspended;
                            $receiver2 = receiveChannel;
                            transform2 = function2;
                            z2 = false;
                            $receiver$iv$iv = $receiver$iv$iv$iv;
                            collection = c;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$1 = collection;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$2 = transform2;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$4 = index$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$5 = $receiver;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$6 = $receiver$iv$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$7 = cause$iv$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$8 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.L$9 = channelIterator;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th9) {
                            e$iv$iv$iv = th9;
                        }
                    } else {
                        throw ((Result.Failure) e$iv$iv).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i5 = 1;
            InlineMarker.finallyStart(i5);
            $receiver$iv$iv$iv.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i5);
        }
        channelsKt__Channels_commonKt$mapIndexedNotNullTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapIndexedNotNullTo((ReceiveChannel) null, (Collection) null, (Function2) null, this);
            }
        };
        Object e$iv$iv2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapIndexedNotNullTo$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object mapIndexedNotNullTo$$forInline(ReceiveChannel $receiver, Collection destination, Function2 transform, Continuation continuation) {
        ChannelIterator it;
        int $i$f$mapIndexedNotNullTo;
        Object obj;
        Continuation continuation2 = continuation;
        int $i$f$mapIndexedNotNullTo2 = 0;
        ReceiveChannel $receiver$iv = $receiver;
        int i = 0;
        int index$iv = 0;
        Throwable e$iv$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver$iv.iterator();
            $i$f$mapIndexedNotNullTo = 0;
            obj = null;
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                int index$iv2 = index$iv + 1;
                try {
                    IndexedValue $index_element = new IndexedValue(index$iv, e$iv$iv);
                    int index = $index_element.component1();
                    Object element = $index_element.component2();
                    try {
                        Object it2 = transform.invoke(Integer.valueOf(index), element);
                        if (it2 != null) {
                            destination.add(it2);
                        }
                        continuation2 = continuation;
                        $i$f$mapIndexedNotNullTo2 = $i$f$mapIndexedNotNullTo2;
                        i = 0;
                        i2 = 1;
                        $i$f$mapIndexedNotNullTo = index;
                        index$iv = index$iv2;
                        obj = element;
                        $receiver$iv = $receiver$iv;
                    } catch (Throwable th2) {
                        e$iv$iv$iv = th2;
                    }
                } catch (Throwable th3) {
                    e$iv$iv$iv = th3;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th4) {
                    e$iv$iv$iv = th4;
                }
            }
            try {
                throw e$iv$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver$iv.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002b  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x01a4  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x01ff A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0200  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0222 A[Catch: all -> 0x033f, TRY_LEAVE, TryCatch #8 {all -> 0x033f, blocks: (B:50:0x021a, B:52:0x0222, B:73:0x0330), top: B:107:0x021a }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0284 A[Catch: all -> 0x0329, TRY_LEAVE, TryCatch #6 {all -> 0x0329, blocks: (B:57:0x0257, B:59:0x0284), top: B:103:0x0257 }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x02f8  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0330 A[Catch: all -> 0x033f, TRY_ENTER, TRY_LEAVE, TryCatch #8 {all -> 0x033f, blocks: (B:50:0x021a, B:52:0x0222, B:73:0x0330), top: B:107:0x021a }] */
    /* JADX WARN: Type inference failed for: r13v14, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r2v34, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 2 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends SendChannel<? super R>> Object mapIndexedNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, ? extends R> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$3 channelsKt__Channels_commonKt$mapIndexedNotNullTo$3;
        int i;
        ReceiveChannel $i$f$consumeEachIndexed;
        int $i$f$consumeEach;
        int $i$f$consume;
        boolean z;
        boolean z2;
        int i2;
        boolean z3;
        Object obj;
        Object e$iv$iv;
        int destination;
        Function2 transform;
        int $i$f$mapIndexedNotNullTo;
        Object it$iv;
        Ref.IntRef index$iv;
        Object obj2;
        ReceiveChannel $receiver$iv$iv;
        ReceiveChannel $receiver$iv$iv$iv;
        Throwable cause$iv$iv$iv;
        C c2;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv$iv2;
        ReceiveChannel $receiver$iv$iv$iv2;
        ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$3 channelsKt__Channels_commonKt$mapIndexedNotNullTo$32;
        boolean z4;
        int $i$a$4$consume;
        int transform2;
        Object obj3;
        ChannelIterator<E> channelIterator2;
        Throwable cause$iv$iv$iv2;
        ReceiveChannel $receiver$iv$iv3;
        ReceiveChannel $receiver$iv$iv4;
        Ref.IntRef index$iv2;
        boolean z5;
        boolean z6;
        int i3;
        int $i$f$mapIndexedNotNullTo2;
        Object obj4;
        Throwable cause$iv$iv$iv3;
        ReceiveChannel $receiver$iv$iv5;
        ReceiveChannel $receiver$iv$iv6;
        Ref.IntRef index$iv3;
        Object $receiver$iv$iv7;
        Function2 transform3;
        SendChannel sendChannel;
        ChannelIterator<E> channelIterator3;
        Object $receiver$iv;
        ReceiveChannel $receiver$iv$iv8;
        Object hasNext;
        boolean z7;
        boolean z8;
        Object obj5;
        int i4;
        Object it;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$3) {
                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3 = (ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$3) continuation;
                if ((channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label -= Integer.MIN_VALUE;
                    Object e$iv$iv2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$consumeEachIndexed = null;
                            $i$f$mapIndexedNotNullTo = 0;
                            ChannelIterator<E> channelIterator4 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8;
                            cause$iv$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7;
                            $receiver$iv$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5;
                            index$iv = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4;
                            it$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3;
                            transform = (Function2) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2;
                            ?? r13 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1;
                            e$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0;
                            try {
                                if (!(e$iv$iv2 instanceof Result.Failure)) {
                                    obj = null;
                                    obj2 = coroutine_suspended;
                                    z3 = false;
                                    i2 = 0;
                                    z2 = false;
                                    z = false;
                                    destination = 0;
                                    c2 = r13;
                                    channelIterator = channelIterator4;
                                    if (!((Boolean) e$iv$iv2).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv$iv = th;
                                $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                            }
                        } else if (i == 2) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$consumeEachIndexed = null;
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9;
                            ReceiveChannel $receiver$iv$iv9 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8;
                            Throwable cause$iv$iv$iv4 = (Throwable) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7;
                            $receiver$iv$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5;
                            Ref.IntRef index$iv4 = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4;
                            it$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3;
                            Function2 transform4 = (Function2) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2;
                            SendChannel destination2 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1;
                            Object $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0;
                            try {
                                if (!(e$iv$iv2 instanceof Result.Failure)) {
                                    $receiver$iv$iv4 = $receiver$iv$iv9;
                                    $i$a$4$consume = 0;
                                    cause$iv$iv$iv2 = cause$iv$iv$iv4;
                                    index$iv2 = index$iv4;
                                    sendChannel = destination2;
                                    e$iv$iv = $receiver;
                                    z4 = false;
                                    z2 = false;
                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$32 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3;
                                    obj = null;
                                    transform = transform4;
                                    transform2 = 0;
                                    obj3 = coroutine_suspended;
                                    z3 = false;
                                    int i5 = index$iv2.element;
                                    index$iv2.element = i5 + 1;
                                    IndexedValue $index_element = new IndexedValue(i5, e$iv$iv2);
                                    int index = $index_element.component1();
                                    Object element = $index_element.component2();
                                    it = transform.invoke(Boxing.boxInt(index), element);
                                    if (it == null) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv2).exception;
                                }
                            } catch (Throwable th2) {
                                e$iv$iv$iv = th2;
                            }
                        } else if (i == 3) {
                            boolean z9 = false;
                            Object it2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$14;
                            Object element2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$13;
                            int index2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.I$0;
                            IndexedValue indexedValue = (IndexedValue) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$12;
                            Object obj6 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$11;
                            Object it$iv2 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$10;
                            ChannelIterator<E> channelIterator5 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9;
                            ReceiveChannel $receiver$iv$iv10 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8;
                            Throwable cause$iv$iv$iv5 = (Throwable) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7;
                            ReceiveChannel $receiver$iv$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6;
                            ReceiveChannel $receiver$iv$iv11 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5;
                            Ref.IntRef index$iv5 = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4;
                            Object $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3;
                            Function2 transform5 = (Function2) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2;
                            ?? r2 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1;
                            Object $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0;
                            try {
                                if (!(e$iv$iv2 instanceof Result.Failure)) {
                                    C c3 = r2;
                                    e$iv$iv = $receiver2;
                                    cause$iv$iv$iv2 = cause$iv$iv$iv5;
                                    Ref.IntRef index$iv6 = index$iv5;
                                    it$iv = $receiver$iv2;
                                    ReceiveChannel $receiver$iv3 = null;
                                    int $i$f$consumeEachIndexed2 = 0;
                                    int $i$f$consumeEach2 = 0;
                                    int $i$f$consume2 = 0;
                                    z4 = false;
                                    int $i$a$1$let = 0;
                                    Object obj7 = coroutine_suspended;
                                    z3 = false;
                                    try {
                                        try {
                                            sendChannel = c3;
                                            $receiver$iv$iv8 = $receiver$iv$iv10;
                                            $receiver$iv$iv7 = it$iv;
                                            i4 = index2;
                                            cause$iv$iv$iv3 = cause$iv$iv$iv2;
                                            channelIterator3 = channelIterator5;
                                            obj4 = obj7;
                                            transform3 = transform5;
                                            index$iv3 = index$iv6;
                                            $receiver$iv$iv6 = $receiver$iv$iv11;
                                            z5 = z4;
                                            z8 = z3;
                                            obj5 = element2;
                                            $i$f$mapIndexedNotNullTo2 = $i$a$1$let;
                                            $receiver$iv$iv5 = $receiver$iv$iv$iv3;
                                            z7 = z9;
                                            destination = $i$f$consume2;
                                            $i$f$consume = $i$f$consumeEach2;
                                            $i$f$consumeEach = $i$f$consumeEachIndexed2;
                                            $i$f$consumeEachIndexed = $receiver$iv3;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0 = $receiver$iv;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1 = sendChannel;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2 = transform3;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3 = $receiver$iv$iv7;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4 = index$iv3;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5 = $receiver$iv$iv6;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6 = $receiver$iv$iv5;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7 = cause$iv$iv$iv3;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8 = $receiver$iv$iv8;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9 = channelIterator3;
                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label = 1;
                                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$3);
                                            if (hasNext != obj4) {
                                                return obj4;
                                            }
                                            $receiver$iv$iv2 = $receiver$iv$iv8;
                                            e$iv$iv2 = hasNext;
                                            transform = transform3;
                                            cause$iv$iv$iv = cause$iv$iv$iv3;
                                            it$iv = $receiver$iv$iv7;
                                            $receiver$iv$iv$iv = $receiver$iv$iv5;
                                            index$iv = index$iv3;
                                            $receiver$iv$iv = $receiver$iv$iv6;
                                            obj2 = obj4;
                                            $i$f$mapIndexedNotNullTo = $i$f$mapIndexedNotNullTo2;
                                            i2 = i3;
                                            e$iv$iv = $receiver$iv;
                                            z = z5;
                                            z2 = z6;
                                            channelIterator = channelIterator3;
                                            c2 = sendChannel;
                                            try {
                                                if (!((Boolean) e$iv$iv2).booleanValue()) {
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0 = e$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1 = c2;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2 = transform;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3 = it$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4 = index$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6 = $receiver$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7 = cause$iv$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8 = $receiver$iv$iv2;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9 = channelIterator;
                                                    channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label = 2;
                                                    e$iv$iv2 = channelIterator.next(channelsKt__Channels_commonKt$mapIndexedNotNullTo$3);
                                                    if (e$iv$iv2 == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        channelsKt__Channels_commonKt$mapIndexedNotNullTo$32 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3;
                                                        z4 = z;
                                                        $i$a$4$consume = destination;
                                                        transform2 = $i$f$mapIndexedNotNullTo;
                                                        obj3 = obj2;
                                                        channelIterator2 = channelIterator;
                                                        cause$iv$iv$iv2 = cause$iv$iv$iv;
                                                        $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                                                        $receiver$iv$iv3 = $receiver$iv$iv;
                                                        $receiver$iv$iv4 = $receiver$iv$iv2;
                                                        index$iv2 = index$iv;
                                                        sendChannel = c2;
                                                        int i52 = index$iv2.element;
                                                        index$iv2.element = i52 + 1;
                                                        IndexedValue $index_element2 = new IndexedValue(i52, e$iv$iv2);
                                                        int index3 = $index_element2.component1();
                                                        Object element3 = $index_element2.component2();
                                                        it = transform.invoke(Boxing.boxInt(index3), element3);
                                                        if (it == null) {
                                                            try {
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$0 = e$iv$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$1 = sendChannel;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$2 = transform;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$3 = it$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$4 = index$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$5 = $receiver$iv$iv3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$6 = $receiver$iv$iv$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$7 = cause$iv$iv$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$8 = $receiver$iv$iv4;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$9 = channelIterator2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$10 = e$iv$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$11 = e$iv$iv2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$12 = $index_element2;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.I$0 = index3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$13 = element3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.L$14 = it;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$32.label = 3;
                                                                if (sendChannel.send(it, channelsKt__Channels_commonKt$mapIndexedNotNullTo$32) == obj3) {
                                                                    return obj3;
                                                                }
                                                                c3 = sendChannel;
                                                                $receiver$iv$iv11 = $receiver$iv$iv3;
                                                                $receiver$iv$iv10 = $receiver$iv$iv4;
                                                                $receiver$iv3 = $i$f$consumeEachIndexed;
                                                                index2 = index3;
                                                                obj7 = obj3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$32;
                                                                $i$f$consumeEachIndexed2 = $i$f$consumeEach;
                                                                $i$a$1$let = transform2;
                                                                $i$f$consumeEach2 = $i$f$consume;
                                                                $i$f$consume2 = $i$a$4$consume;
                                                                $receiver$iv$iv$iv3 = $receiver$iv$iv$iv2;
                                                                channelIterator5 = channelIterator2;
                                                                transform5 = transform;
                                                                element2 = element3;
                                                                z9 = z2;
                                                                sendChannel = c3;
                                                                $receiver$iv$iv8 = $receiver$iv$iv10;
                                                                $receiver$iv$iv7 = it$iv;
                                                                i4 = index2;
                                                                cause$iv$iv$iv3 = cause$iv$iv$iv2;
                                                                channelIterator3 = channelIterator5;
                                                                obj4 = obj7;
                                                                transform3 = transform5;
                                                                index$iv3 = index$iv6;
                                                                $receiver$iv$iv6 = $receiver$iv$iv11;
                                                                z5 = z4;
                                                                z8 = z3;
                                                                obj5 = element2;
                                                                $i$f$mapIndexedNotNullTo2 = $i$a$1$let;
                                                                $receiver$iv$iv5 = $receiver$iv$iv$iv3;
                                                                z7 = z9;
                                                                destination = $i$f$consume2;
                                                                $i$f$consume = $i$f$consumeEach2;
                                                                $i$f$consumeEach = $i$f$consumeEachIndexed2;
                                                                $i$f$consumeEachIndexed = $receiver$iv3;
                                                                $receiver$iv = e$iv$iv;
                                                                i3 = i4;
                                                                obj = obj5;
                                                                z3 = z8;
                                                                z6 = z7;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1 = sendChannel;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2 = transform3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3 = $receiver$iv$iv7;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4 = index$iv3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5 = $receiver$iv$iv6;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6 = $receiver$iv$iv5;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7 = cause$iv$iv$iv3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8 = $receiver$iv$iv8;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9 = channelIterator3;
                                                                channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label = 1;
                                                                hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$3);
                                                                if (hasNext != obj4) {
                                                                }
                                                            } catch (Throwable th3) {
                                                                e$iv$iv$iv = th3;
                                                            }
                                                            index$iv6 = index$iv2;
                                                        } else {
                                                            i4 = index3;
                                                            obj4 = obj3;
                                                            $receiver$iv$iv8 = $receiver$iv$iv4;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$32;
                                                            index$iv3 = index$iv2;
                                                            $receiver$iv$iv5 = $receiver$iv$iv$iv2;
                                                            transform3 = transform;
                                                            z5 = z4;
                                                            $i$f$mapIndexedNotNullTo2 = transform2;
                                                            z8 = z3;
                                                            obj5 = element3;
                                                            destination = $i$a$4$consume;
                                                            z7 = z2;
                                                            cause$iv$iv$iv3 = cause$iv$iv$iv2;
                                                            channelIterator3 = channelIterator2;
                                                            $receiver$iv$iv6 = $receiver$iv$iv3;
                                                            $receiver$iv$iv7 = it$iv;
                                                            $receiver$iv = e$iv$iv;
                                                            i3 = i4;
                                                            obj = obj5;
                                                            z3 = z8;
                                                            z6 = z7;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1 = sendChannel;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2 = transform3;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3 = $receiver$iv$iv7;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4 = index$iv3;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5 = $receiver$iv$iv6;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6 = $receiver$iv$iv5;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7 = cause$iv$iv$iv3;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8 = $receiver$iv$iv8;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9 = channelIterator3;
                                                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label = 1;
                                                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$3);
                                                            if (hasNext != obj4) {
                                                            }
                                                        }
                                                    } catch (Throwable th4) {
                                                        e$iv$iv$iv = th4;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c2;
                                                }
                                            } catch (Throwable th5) {
                                                e$iv$iv$iv = th5;
                                                $receiver$iv$iv$iv2 = $receiver$iv$iv$iv;
                                            }
                                        } catch (Throwable th6) {
                                            e$iv$iv$iv = th6;
                                            $receiver$iv$iv$iv2 = $receiver$iv$iv5;
                                        }
                                        $receiver$iv = e$iv$iv;
                                        i3 = i4;
                                        obj = obj5;
                                        z3 = z8;
                                        z6 = z7;
                                    } catch (Throwable th7) {
                                        e$iv$iv$iv = th7;
                                        $receiver$iv$iv$iv2 = $receiver$iv$iv5;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv$iv2).exception;
                                }
                            } catch (Throwable th8) {
                                e$iv$iv$iv = th8;
                                $receiver$iv$iv$iv2 = $receiver$iv$iv$iv3;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv$iv2 instanceof Result.Failure)) {
                        $i$f$consumeEachIndexed = null;
                        Ref.IntRef index$iv7 = new Ref.IntRef();
                        index$iv7.element = 0;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv$iv2 = receiveChannel;
                        $i$f$consume = 0;
                        Throwable cause$iv$iv$iv6 = null;
                        try {
                            channelIterator3 = $receiver$iv$iv$iv2.iterator();
                            i3 = 0;
                            z6 = false;
                            z5 = false;
                            $i$f$mapIndexedNotNullTo2 = 0;
                            obj = null;
                            destination = 0;
                            index$iv3 = index$iv7;
                            $receiver$iv$iv6 = receiveChannel;
                            cause$iv$iv$iv3 = cause$iv$iv$iv6;
                            $receiver$iv$iv8 = $receiver$iv$iv$iv2;
                            obj4 = coroutine_suspended;
                            sendChannel = c;
                            z3 = false;
                            $receiver$iv$iv7 = receiveChannel;
                            $receiver$iv$iv5 = $receiver$iv$iv$iv2;
                            $receiver$iv = receiveChannel;
                            transform3 = function2;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$0 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$1 = sendChannel;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$2 = transform3;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$3 = $receiver$iv$iv7;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$4 = index$iv3;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$5 = $receiver$iv$iv6;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$6 = $receiver$iv$iv5;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$7 = cause$iv$iv$iv3;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$8 = $receiver$iv$iv8;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.L$9 = channelIterator3;
                            channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label = 1;
                            hasNext = channelIterator3.hasNext(channelsKt__Channels_commonKt$mapIndexedNotNullTo$3);
                            if (hasNext != obj4) {
                            }
                        } catch (Throwable th9) {
                            e$iv$iv$iv = th9;
                        }
                    } else {
                        throw ((Result.Failure) e$iv$iv2).exception;
                    }
                    throw e$iv$iv$iv;
                }
            }
            throw e$iv$iv$iv;
        } finally {
            int i6 = 1;
            InlineMarker.finallyStart(i6);
            $receiver$iv$iv$iv2.cancel(e$iv$iv$iv);
            InlineMarker.finallyEnd(i6);
        }
        channelsKt__Channels_commonKt$mapIndexedNotNullTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapIndexedNotNullTo$3
            int I$0;
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$11;
            Object L$12;
            Object L$13;
            Object L$14;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj8) {
                this.result = obj8;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapIndexedNotNullTo((ReceiveChannel) null, (SendChannel) null, (Function2) null, this);
            }
        };
        Object e$iv$iv22 = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapIndexedNotNullTo$3.label;
        if (i == 0) {
        }
    }

    private static final Object mapIndexedNotNullTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function2 transform, Continuation continuation) {
        ChannelIterator it;
        int $i$f$mapIndexedNotNullTo;
        Object obj;
        int i;
        int $i$f$mapIndexedNotNullTo2 = 0;
        ReceiveChannel $receiver$iv = $receiver;
        int i2 = 0;
        int index$iv = 0;
        Throwable e$iv$iv$iv = null;
        int i3 = 1;
        try {
            it = $receiver$iv.iterator();
            $i$f$mapIndexedNotNullTo = 0;
            obj = null;
        } catch (Throwable th) {
            e$iv$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i2);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i3);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i2);
                Object e$iv$iv = it.next(continuation);
                InlineMarker.mark(i3);
                int index$iv2 = index$iv + 1;
                try {
                    IndexedValue $index_element = new IndexedValue(index$iv, e$iv$iv);
                    int index = $index_element.component1();
                    Object element = $index_element.component2();
                    try {
                        try {
                            Object it2 = transform.invoke(Integer.valueOf(index), element);
                            if (it2 != null) {
                                i = 0;
                                InlineMarker.mark(0);
                                destination.send(it2, continuation);
                                InlineMarker.mark(2);
                                InlineMarker.mark(1);
                            } else {
                                i = 0;
                            }
                            $i$f$mapIndexedNotNullTo2 = $i$f$mapIndexedNotNullTo2;
                            $receiver$iv = $receiver$iv;
                            index$iv = index$iv2;
                            obj = element;
                            $i$f$mapIndexedNotNullTo = index;
                            i2 = i;
                            i3 = 1;
                        } catch (Throwable th2) {
                            e$iv$iv$iv = th2;
                        }
                    } catch (Throwable th3) {
                        e$iv$iv$iv = th3;
                    }
                } catch (Throwable th4) {
                    e$iv$iv$iv = th4;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th5) {
                    e$iv$iv$iv = th5;
                }
            }
            try {
                throw e$iv$iv$iv;
            } finally {
                int i4 = 1;
                InlineMarker.finallyStart(i4);
                $receiver$iv.cancel(e$iv$iv$iv);
                InlineMarker.finallyEnd(i4);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v14 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d0  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0119 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011a  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0137 A[Catch: all -> 0x01a7, TRY_LEAVE, TryCatch #4 {all -> 0x01a7, blocks: (B:41:0x012f, B:43:0x0137, B:56:0x0199), top: B:82:0x012f }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0199 A[Catch: all -> 0x01a7, TRY_ENTER, TRY_LEAVE, TryCatch #4 {all -> 0x01a7, blocks: (B:41:0x012f, B:43:0x0137, B:56:0x0199), top: B:82:0x012f }] */
    /* JADX WARN: Type inference failed for: r3v7, types: [java.util.Collection] */
    /* JADX WARN: Type inference failed for: r8v9, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends Collection<? super R>> Object mapIndexedTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, ? extends R> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapIndexedTo$1 channelsKt__Channels_commonKt$mapIndexedTo$1;
        int i;
        boolean z;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver;
        Function2 $i$a$4$consume;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        int destination;
        Function2 transform;
        Object obj;
        Ref.IntRef index;
        Throwable cause$iv$iv;
        ReceiveChannel $receiver$iv2;
        C c2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver2;
        Function2 transform2;
        int $i$f$consume;
        Throwable cause$iv$iv2;
        Function2 transform3;
        boolean z2;
        Object obj2;
        C c3;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapIndexedTo$1) {
                channelsKt__Channels_commonKt$mapIndexedTo$1 = (ChannelsKt__Channels_commonKt$mapIndexedTo$1) continuation;
                if ((channelsKt__Channels_commonKt$mapIndexedTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapIndexedTo$1.label -= Integer.MIN_VALUE;
                    Object e$iv = channelsKt__Channels_commonKt$mapIndexedTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapIndexedTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = null;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedTo$1.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$7;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$mapIndexedTo$1.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedTo$1.L$3;
                            transform = (Function2) channelsKt__Channels_commonKt$mapIndexedTo$1.L$2;
                            ?? r8 = (Collection) channelsKt__Channels_commonKt$mapIndexedTo$1.L$1;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    z = false;
                                    $receiver$iv2 = $receiver$iv4;
                                    c2 = r8;
                                    destination = 0;
                                    cause$iv$iv = cause$iv$iv3;
                                    obj = coroutine_suspended;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) e$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedTo$1.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$7;
                            Throwable cause$iv$iv4 = (Throwable) channelsKt__Channels_commonKt$mapIndexedTo$1.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedTo$1.L$3;
                            Function2 transform4 = (Function2) channelsKt__Channels_commonKt$mapIndexedTo$1.L$2;
                            Collection destination2 = (Collection) channelsKt__Channels_commonKt$mapIndexedTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$1.L$0;
                            Object obj3 = coroutine_suspended;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    $receiver2 = $receiver3;
                                    z = false;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    Collection collection = destination2;
                                    cause$iv$iv2 = cause$iv$iv4;
                                    transform3 = transform4;
                                    transform2 = null;
                                    $i$f$consume = 0;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    int i2 = index.element;
                                                    index.element = i2 + 1;
                                                    collection.add(transform3.invoke(Boxing.boxInt(i2), e$iv));
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$0 = $receiver2;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$1 = c3;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$2 = transform3;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$3 = index;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$4 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$6 = cause$iv$iv2;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$7 = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.L$8 = channelIterator2;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$1.label = 1;
                                                    hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$1);
                                                    if (hasNext == obj2) {
                                                        return obj2;
                                                    }
                                                    $receiver$iv2 = $receiver$iv3;
                                                    e$iv = hasNext;
                                                    c2 = c3;
                                                    transform = transform3;
                                                    cause$iv$iv = cause$iv$iv2;
                                                    channelIterator = channelIterator2;
                                                    obj = obj2;
                                                    destination = $i$f$consume;
                                                    $i$a$4$consume = transform2;
                                                    $receiver = $receiver2;
                                                    z = z2;
                                                    try {
                                                        if (!((Boolean) e$iv).booleanValue()) {
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$1 = c2;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$2 = transform;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$3 = index;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$4 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$6 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$7 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$8 = channelIterator;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.label = 2;
                                                            e$iv = channelIterator.next(channelsKt__Channels_commonKt$mapIndexedTo$1);
                                                            if (e$iv == obj) {
                                                                return obj;
                                                            }
                                                            obj3 = obj;
                                                            channelIterator2 = channelIterator;
                                                            collection = c2;
                                                            $receiver2 = $receiver;
                                                            transform2 = $i$a$4$consume;
                                                            $i$f$consume = destination;
                                                            $receiver$iv6 = $receiver$iv2;
                                                            cause$iv$iv2 = cause$iv$iv;
                                                            transform3 = transform;
                                                            int i22 = index.element;
                                                            index.element = i22 + 1;
                                                            collection.add(transform3.invoke(Boxing.boxInt(i22), e$iv));
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1 = channelsKt__Channels_commonKt$mapIndexedTo$1;
                                                            $receiver$iv3 = $receiver$iv6;
                                                            z2 = z;
                                                            obj2 = obj3;
                                                            c3 = collection;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$0 = $receiver2;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$1 = c3;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$2 = transform3;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$3 = index;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$4 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$5 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$6 = cause$iv$iv2;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$7 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$8 = channelIterator2;
                                                            channelsKt__Channels_commonKt$mapIndexedTo$1.label = 1;
                                                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$1);
                                                            if (hasNext == obj2) {
                                                            }
                                                        } else {
                                                            Unit unit = Unit.INSTANCE;
                                                            return c2;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } catch (Throwable th3) {
                                                    e$iv$iv = th3;
                                                }
                                            } catch (Throwable th4) {
                                                e$iv$iv = th4;
                                            }
                                            channelsKt__Channels_commonKt$mapIndexedTo$1 = channelsKt__Channels_commonKt$mapIndexedTo$1;
                                            $receiver$iv3 = $receiver$iv6;
                                            z2 = z;
                                            obj2 = obj3;
                                            c3 = collection;
                                        } catch (Throwable th5) {
                                            e$iv$iv = th5;
                                        }
                                    } catch (Throwable th6) {
                                        e$iv$iv = th6;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th7) {
                                e$iv$iv = th7;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        Ref.IntRef index2 = new Ref.IntRef();
                        index2.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        Throwable cause$iv$iv5 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv.iterator();
                            z2 = false;
                            $receiver$iv3 = $receiver$iv$iv;
                            cause$iv$iv2 = cause$iv$iv5;
                            transform2 = null;
                            obj2 = coroutine_suspended;
                            c3 = c;
                            transform3 = function2;
                            $i$f$consume = 0;
                            index = index2;
                            $receiver2 = receiveChannel;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$1 = c3;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$2 = transform3;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$3 = index;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$6 = cause$iv$iv2;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$7 = $receiver$iv3;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$mapIndexedTo$1.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th8) {
                            e$iv$iv = th8;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i3 = 1;
            InlineMarker.finallyStart(i3);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i3);
        }
        channelsKt__Channels_commonKt$mapIndexedTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapIndexedTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapIndexedTo((ReceiveChannel) null, (Collection) null, (Function2) null, this);
            }
        };
        Object e$iv2 = channelsKt__Channels_commonKt$mapIndexedTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapIndexedTo$1.label;
        if (i == 0) {
        }
    }

    private static final Object mapIndexedTo$$forInline(ReceiveChannel $receiver, Collection destination, Function2 transform, Continuation continuation) {
        ChannelIterator it;
        int index = 0;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                int index2 = index + 1;
                try {
                    try {
                        destination.add(transform.invoke(Integer.valueOf(index), e$iv));
                        index = index2;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv = th2;
                        throw e$iv$iv;
                    }
                } catch (Throwable th3) {
                    e$iv$iv = th3;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th4) {
                    e$iv$iv = th4;
                }
            }
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0125  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x016b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x016c  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x017b A[Catch: all -> 0x01f4, TRY_LEAVE, TryCatch #2 {all -> 0x01f4, blocks: (B:45:0x0173, B:47:0x017b, B:58:0x01e6), top: B:78:0x0173 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x01d4 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x01d5  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x01e6 A[Catch: all -> 0x01f4, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x01f4, blocks: (B:45:0x0173, B:47:0x017b, B:58:0x01e6), top: B:78:0x0173 }] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r2v13, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v10, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v7, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 3 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends SendChannel<? super R>> Object mapIndexedTo(ReceiveChannel<? extends E> receiveChannel, C c, Function2<? super Integer, ? super E, ? extends R> function2, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapIndexedTo$3 channelsKt__Channels_commonKt$mapIndexedTo$3;
        int i;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        boolean z;
        int $i$f$mapIndexedTo;
        Ref.IntRef index;
        int $i$a$4$consume;
        Object obj;
        Function2 transform;
        C c2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        C c3;
        int $i$a$4$consume2;
        int $i$a$4$consume3;
        Object obj2;
        Object e$iv;
        int $i$f$mapIndexedTo2;
        ReceiveChannel $receiver$iv3;
        C c4;
        Object invoke;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapIndexedTo$3) {
                channelsKt__Channels_commonKt$mapIndexedTo$3 = (ChannelsKt__Channels_commonKt$mapIndexedTo$3) continuation;
                if ((channelsKt__Channels_commonKt$mapIndexedTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapIndexedTo$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$mapIndexedTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapIndexedTo$3.label;
                    boolean z2 = false;
                    ReceiveChannel $receiver2 = null;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$4$consume2 = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedTo$3.L$8;
                                ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$7;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapIndexedTo$3.L$6;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$5;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$4;
                                index = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedTo$3.L$3;
                                transform = (Function2) channelsKt__Channels_commonKt$mapIndexedTo$3.L$2;
                                ?? r5 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$0;
                                if (obj3 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj3).exception;
                                }
                                hasNext = obj3;
                                $receiver$iv2 = $receiver$iv4;
                                $receiver = $receiver3;
                                obj2 = coroutine_suspended;
                                z = false;
                                $i$a$4$consume3 = 0;
                                c3 = r5;
                                if (!((Boolean) hasNext).booleanValue()) {
                                }
                            } else if (i == 2) {
                                $i$a$4$consume2 = 0;
                                $i$f$mapIndexedTo2 = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedTo$3.L$8;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$7;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapIndexedTo$3.L$6;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$5;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$4;
                                index = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedTo$3.L$3;
                                transform = (Function2) channelsKt__Channels_commonKt$mapIndexedTo$3.L$2;
                                ?? r52 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$1;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$0;
                                if (!(obj3 instanceof Result.Failure)) {
                                    e$iv = obj3;
                                    $receiver$iv2 = $receiver$iv5;
                                    $receiver = $receiver2;
                                    obj2 = coroutine_suspended;
                                    c4 = r52;
                                    int $i$a$4$consume4 = index.element;
                                    index.element = $i$a$4$consume4 + 1;
                                    invoke = transform.invoke(Boxing.boxInt($i$a$4$consume4), e$iv);
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c4;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$9 = e$iv;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$10 = e$iv;
                                    $receiver$iv3 = $receiver$iv2;
                                    channelsKt__Channels_commonKt$mapIndexedTo$3.label = 3;
                                    if (c4.send(invoke, channelsKt__Channels_commonKt$mapIndexedTo$3) != obj2) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } else if (i == 3) {
                                z = false;
                                Object it = channelsKt__Channels_commonKt$mapIndexedTo$3.L$10;
                                Object e$iv2 = channelsKt__Channels_commonKt$mapIndexedTo$3.L$9;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapIndexedTo$3.L$8;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$7;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapIndexedTo$3.L$6;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$5;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$4;
                                index = (Ref.IntRef) channelsKt__Channels_commonKt$mapIndexedTo$3.L$3;
                                Function2 transform2 = (Function2) channelsKt__Channels_commonKt$mapIndexedTo$3.L$2;
                                ?? r2 = (SendChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$1;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapIndexedTo$3.L$0;
                                try {
                                    if (!(obj3 instanceof Result.Failure)) {
                                        $receiver = $receiver4;
                                        int $i$f$mapIndexedTo3 = 0;
                                        $i$a$4$consume = 0;
                                        transform = transform2;
                                        obj2 = coroutine_suspended;
                                        $receiver$iv3 = $receiver$iv6;
                                        C c5 = r2;
                                        c2 = c5;
                                        obj = obj2;
                                        $receiver$iv2 = $receiver$iv3;
                                        $i$f$mapIndexedTo = $i$f$mapIndexedTo3;
                                        try {
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                                            channelsKt__Channels_commonKt$mapIndexedTo$3.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$3);
                                            if (hasNext == obj) {
                                                return obj;
                                            }
                                            c3 = c2;
                                            $i$a$4$consume2 = $i$a$4$consume;
                                            $i$a$4$consume3 = $i$f$mapIndexedTo;
                                            obj2 = obj;
                                            try {
                                                if (!((Boolean) hasNext).booleanValue()) {
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                                                    channelsKt__Channels_commonKt$mapIndexedTo$3.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$mapIndexedTo$3);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        $i$f$mapIndexedTo2 = $i$a$4$consume3;
                                                        z2 = z;
                                                        c4 = c3;
                                                        int $i$a$4$consume42 = index.element;
                                                        index.element = $i$a$4$consume42 + 1;
                                                        invoke = transform.invoke(Boxing.boxInt($i$a$4$consume42), e$iv);
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c4;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$9 = e$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$10 = e$iv;
                                                        $receiver$iv3 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.label = 3;
                                                        if (c4.send(invoke, channelsKt__Channels_commonKt$mapIndexedTo$3) != obj2) {
                                                            return obj2;
                                                        }
                                                        $i$f$mapIndexedTo3 = $i$f$mapIndexedTo2;
                                                        $i$a$4$consume = $i$a$4$consume2;
                                                        z = z2;
                                                        c5 = c4;
                                                        c2 = c5;
                                                        obj = obj2;
                                                        $receiver$iv2 = $receiver$iv3;
                                                        $i$f$mapIndexedTo = $i$f$mapIndexedTo3;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c2;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$mapIndexedTo$3.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$3);
                                                        if (hasNext == obj) {
                                                        }
                                                    } catch (Throwable th) {
                                                        e$iv$iv = th;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj3).exception;
                                    }
                                } catch (Throwable th4) {
                                    e$iv$iv = th4;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        index = intRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            $i$f$mapIndexedTo = 0;
                            z = false;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            transform = function2;
                            $i$a$4$consume = 0;
                            c2 = c;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$2 = transform;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$3 = index;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$7 = $receiver$iv2;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$mapIndexedTo$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapIndexedTo$3);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$mapIndexedTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapIndexedTo$3
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapIndexedTo((ReceiveChannel) null, (SendChannel) null, (Function2) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$mapIndexedTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapIndexedTo$3.label;
        boolean z22 = false;
        ReceiveChannel $receiver22 = null;
        if (i == 0) {
        }
    }

    private static final Object mapIndexedTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function2 transform, Continuation continuation) {
        ChannelIterator it;
        int index = 0;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                int index2 = index + 1;
                try {
                    try {
                        Object invoke = transform.invoke(Integer.valueOf(index), e$iv);
                        InlineMarker.mark(0);
                        destination.send(invoke, continuation);
                        InlineMarker.mark(2);
                        InlineMarker.mark(1);
                        i = 0;
                        index = index2;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv = th2;
                        throw e$iv$iv;
                    }
                } catch (Throwable th3) {
                    e$iv$iv = th3;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return destination;
                } catch (Throwable th4) {
                    e$iv$iv = th4;
                }
            }
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel mapNotNull$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.mapNotNull(receiveChannel, coroutineContext, function2);
    }

    public static final <E, R> ReceiveChannel<R> mapNotNull(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super R>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return ChannelsKt.filterNotNull(ChannelsKt.map(receiveChannel, context, function2));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c7  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0103 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0119 A[Catch: all -> 0x017b, TRY_LEAVE, TryCatch #6 {all -> 0x017b, blocks: (B:41:0x0111, B:43:0x0119, B:55:0x016d), top: B:84:0x0111 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x014d A[Catch: all -> 0x0166, TRY_LEAVE, TryCatch #4 {all -> 0x0166, blocks: (B:48:0x0147, B:50:0x014d), top: B:80:0x0147 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x015b  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x016d A[Catch: all -> 0x017b, TRY_ENTER, TRY_LEAVE, TryCatch #6 {all -> 0x017b, blocks: (B:41:0x0111, B:43:0x0119, B:55:0x016d), top: B:84:0x0111 }] */
    /* JADX WARN: Type inference failed for: r8v9, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends Collection<? super R>> Object mapNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, ? extends R> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapNotNullTo$1 channelsKt__Channels_commonKt$mapNotNullTo$1;
        int i;
        boolean z;
        ChannelIterator<E> channelIterator;
        int $i$f$mapNotNullTo;
        int $i$f$consumeEach;
        int $i$f$consume;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int destination;
        Function1 transform;
        Object obj;
        ReceiveChannel $receiver$iv;
        C c2;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver;
        Collection collection;
        Function1 transform2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapNotNullTo$1) {
                channelsKt__Channels_commonKt$mapNotNullTo$1 = (ChannelsKt__Channels_commonKt$mapNotNullTo$1) continuation;
                if ((channelsKt__Channels_commonKt$mapNotNullTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapNotNullTo$1.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$mapNotNullTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapNotNullTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$f$consume = 0;
                            $i$f$consumeEach = 0;
                            $i$f$mapNotNullTo = 0;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$mapNotNullTo$1.L$7;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapNotNullTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$3;
                            transform = (Function1) channelsKt__Channels_commonKt$mapNotNullTo$1.L$2;
                            ?? r8 = (Collection) channelsKt__Channels_commonKt$mapNotNullTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    z = false;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    c2 = r8;
                                    destination = 0;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$mapNotNullTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapNotNullTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$3;
                            Function1 transform3 = (Function1) channelsKt__Channels_commonKt$mapNotNullTo$1.L$2;
                            Collection destination2 = (Collection) channelsKt__Channels_commonKt$mapNotNullTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    collection = destination2;
                                    transform2 = transform3;
                                    z = false;
                                    Object obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    int $i$f$mapNotNullTo2 = 0;
                                    int $i$f$mapNotNullTo3 = 0;
                                    int $i$f$consumeEach2 = 0;
                                    int $i$f$consume2 = 0;
                                    try {
                                        try {
                                            try {
                                                Object it2 = transform2.invoke(it);
                                                if (it2 == null) {
                                                    Boxing.boxBoolean(collection.add(it2));
                                                }
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$1 = collection;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$2 = transform2;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$mapNotNullTo$1.label = 1;
                                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$1);
                                                if (hasNext == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                it = hasNext;
                                                $receiver = $receiver;
                                                z = z2;
                                                channelIterator = channelIterator2;
                                                obj = obj2;
                                                transform = transform2;
                                                c2 = collection;
                                                try {
                                                    if (!((Boolean) it).booleanValue()) {
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$1 = c2;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$2 = transform;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$5 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$6 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$7 = channelIterator;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.label = 2;
                                                        it = channelIterator.next(channelsKt__Channels_commonKt$mapNotNullTo$1);
                                                        if (it == obj) {
                                                            return obj;
                                                        }
                                                        $receiver$iv5 = $receiver$iv2;
                                                        collection = c2;
                                                        transform2 = transform;
                                                        obj3 = obj;
                                                        channelIterator2 = channelIterator;
                                                        $i$f$mapNotNullTo2 = $i$f$mapNotNullTo;
                                                        $i$f$mapNotNullTo3 = $i$f$consumeEach;
                                                        $i$f$consumeEach2 = $i$f$consume;
                                                        $i$f$consume2 = destination;
                                                        Object it22 = transform2.invoke(it);
                                                        if (it22 == null) {
                                                        }
                                                        $receiver$iv3 = $receiver$iv5;
                                                        obj2 = obj3;
                                                        destination = $i$f$consume2;
                                                        $i$f$consume = $i$f$consumeEach2;
                                                        $i$f$consumeEach = $i$f$mapNotNullTo3;
                                                        $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                                                        z2 = z;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$1 = collection;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$2 = transform2;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$3 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$4 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$5 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$6 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.L$7 = channelIterator2;
                                                        channelsKt__Channels_commonKt$mapNotNullTo$1.label = 1;
                                                        hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$1);
                                                        if (hasNext == obj2) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        return c2;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                            $receiver$iv3 = $receiver$iv5;
                                            obj2 = obj3;
                                            destination = $i$f$consume2;
                                            $i$f$consume = $i$f$consumeEach2;
                                            $i$f$consumeEach = $i$f$mapNotNullTo3;
                                            $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                                            z2 = z;
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        $i$f$mapNotNullTo = 0;
                        $i$f$consumeEach = 0;
                        $receiver$iv$iv = receiveChannel;
                        $i$f$consume = 0;
                        cause$iv$iv = null;
                        try {
                            channelIterator2 = $receiver$iv$iv.iterator();
                            z2 = false;
                            obj2 = coroutine_suspended;
                            $receiver$iv3 = $receiver$iv$iv;
                            destination = 0;
                            $receiver = receiveChannel;
                            transform2 = function1;
                            $receiver$iv = receiveChannel;
                            collection = c;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$1 = collection;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$2 = transform2;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$6 = $receiver$iv3;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.L$7 = channelIterator2;
                            channelsKt__Channels_commonKt$mapNotNullTo$1.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$mapNotNullTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapNotNullTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapNotNullTo((ReceiveChannel) null, (Collection) null, (Function1) null, this);
            }
        };
        Object it3 = channelsKt__Channels_commonKt$mapNotNullTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapNotNullTo$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final Object mapNotNullTo$$forInline(ReceiveChannel $receiver, Collection destination, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        Continuation continuation2 = continuation;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation2);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation2);
                InlineMarker.mark(i2);
                try {
                    Object it2 = transform.invoke(e$iv);
                    if (it2 != null) {
                        destination.add(it2);
                    }
                    continuation2 = continuation;
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0127  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0165 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0175 A[Catch: all -> 0x0208, TRY_LEAVE, TryCatch #3 {all -> 0x0208, blocks: (B:45:0x016d, B:47:0x0175, B:66:0x01fa), top: B:88:0x016d }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x019f A[Catch: all -> 0x01f5, TRY_LEAVE, TryCatch #2 {all -> 0x01f5, blocks: (B:52:0x0199, B:54:0x019f), top: B:86:0x0199 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01e7  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01fa A[Catch: all -> 0x0208, TRY_ENTER, TRY_LEAVE, TryCatch #3 {all -> 0x0208, blocks: (B:45:0x016d, B:47:0x0175, B:66:0x01fa), top: B:88:0x016d }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r2v13, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v10, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r5v7, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 3 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends SendChannel<? super R>> Object mapNotNullTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, ? extends R> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapNotNullTo$3 channelsKt__Channels_commonKt$mapNotNullTo$3;
        int i;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        boolean z;
        int $i$a$1$let;
        ChannelIterator<E> channelIterator;
        int $i$f$mapNotNullTo;
        int $i$a$4$consume;
        ReceiveChannel $receiver$iv;
        Object obj;
        Function1 transform;
        C c2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        C c3;
        int $i$a$4$consume2;
        int $i$a$4$consume3;
        Object obj2;
        Object e$iv;
        int $i$f$mapNotNullTo2;
        C c4;
        Object it;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapNotNullTo$3) {
                channelsKt__Channels_commonKt$mapNotNullTo$3 = (ChannelsKt__Channels_commonKt$mapNotNullTo$3) continuation;
                if ((channelsKt__Channels_commonKt$mapNotNullTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapNotNullTo$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$mapNotNullTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapNotNullTo$3.label;
                    boolean z2 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$4$consume2 = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapNotNullTo$3.L$7;
                                ReceiveChannel $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapNotNullTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$4;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$3;
                                transform = (Function1) channelsKt__Channels_commonKt$mapNotNullTo$3.L$2;
                                ?? r5 = (SendChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$1;
                                ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$0;
                                if (obj3 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj3).exception;
                                }
                                hasNext = obj3;
                                $receiver$iv2 = $receiver$iv3;
                                z = false;
                                $receiver = $receiver2;
                                $i$a$1$let = 0;
                                $i$a$4$consume3 = 0;
                                obj2 = coroutine_suspended;
                                c3 = r5;
                                if (!((Boolean) hasNext).booleanValue()) {
                                }
                            } else if (i == 2) {
                                $i$a$4$consume2 = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapNotNullTo$3.L$7;
                                ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapNotNullTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$4;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$3;
                                transform = (Function1) channelsKt__Channels_commonKt$mapNotNullTo$3.L$2;
                                ?? r52 = (SendChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$0;
                                if (!(obj3 instanceof Result.Failure)) {
                                    e$iv = obj3;
                                    $receiver$iv2 = $receiver$iv4;
                                    $i$f$mapNotNullTo2 = 0;
                                    $receiver = $receiver3;
                                    obj2 = coroutine_suspended;
                                    $i$a$1$let = 0;
                                    c4 = r52;
                                    it = transform.invoke(e$iv);
                                    if (it == null) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } else if (i == 3) {
                                int $i$a$1$let2 = 0;
                                Object it2 = channelsKt__Channels_commonKt$mapNotNullTo$3.L$10;
                                Object it3 = channelsKt__Channels_commonKt$mapNotNullTo$3.L$9;
                                Object e$iv2 = channelsKt__Channels_commonKt$mapNotNullTo$3.L$8;
                                ChannelIterator<E> channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$mapNotNullTo$3.L$7;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapNotNullTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$4;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$3;
                                Function1 transform2 = (Function1) channelsKt__Channels_commonKt$mapNotNullTo$3.L$2;
                                ?? r2 = (SendChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$1;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapNotNullTo$3.L$0;
                                try {
                                    if (!(obj3 instanceof Result.Failure)) {
                                        ChannelsKt__Channels_commonKt$mapNotNullTo$3 channelsKt__Channels_commonKt$mapNotNullTo$32 = channelsKt__Channels_commonKt$mapNotNullTo$3;
                                        transform = transform2;
                                        obj2 = coroutine_suspended;
                                        ReceiveChannel $receiver5 = $receiver4;
                                        ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                        C c5 = r2;
                                        $i$f$mapNotNullTo2 = 0;
                                        z2 = false;
                                        int $i$a$1$let3 = 0;
                                        $receiver$iv2 = $receiver$iv6;
                                        $receiver = $receiver5;
                                        channelsKt__Channels_commonKt$mapNotNullTo$3 = channelsKt__Channels_commonKt$mapNotNullTo$32;
                                        channelIterator = channelIterator2;
                                        c2 = c5;
                                        obj = obj2;
                                        $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                                        z = z2;
                                        $i$a$4$consume = $i$a$1$let3;
                                        $i$a$1$let = $i$a$1$let2;
                                        try {
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                                            channelsKt__Channels_commonKt$mapNotNullTo$3.label = 1;
                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$3);
                                            if (hasNext != obj) {
                                                return obj;
                                            }
                                            c3 = c2;
                                            $i$a$4$consume2 = $i$a$4$consume;
                                            $i$a$4$consume3 = $i$f$mapNotNullTo;
                                            obj2 = obj;
                                            try {
                                                if (!((Boolean) hasNext).booleanValue()) {
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$mapNotNullTo$3.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$mapNotNullTo$3);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        $i$f$mapNotNullTo2 = $i$a$4$consume3;
                                                        z2 = z;
                                                        c4 = c3;
                                                        it = transform.invoke(e$iv);
                                                        if (it == null) {
                                                            try {
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c4;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$8 = e$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$9 = e$iv;
                                                                $receiver$iv6 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$10 = it;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.label = 3;
                                                                if (c4.send(it, channelsKt__Channels_commonKt$mapNotNullTo$3) == obj2) {
                                                                    return obj2;
                                                                }
                                                                channelsKt__Channels_commonKt$mapNotNullTo$32 = channelsKt__Channels_commonKt$mapNotNullTo$3;
                                                                $receiver5 = $receiver;
                                                                $i$a$1$let3 = $i$a$4$consume2;
                                                                channelIterator2 = channelIterator;
                                                                $i$a$1$let2 = $i$a$1$let;
                                                                c5 = c4;
                                                                $receiver$iv2 = $receiver$iv6;
                                                                $receiver = $receiver5;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3 = channelsKt__Channels_commonKt$mapNotNullTo$32;
                                                                channelIterator = channelIterator2;
                                                                c2 = c5;
                                                                obj = obj2;
                                                                $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                                                                z = z2;
                                                                $i$a$4$consume = $i$a$1$let3;
                                                                $i$a$1$let = $i$a$1$let2;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c2;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                                                                channelsKt__Channels_commonKt$mapNotNullTo$3.label = 1;
                                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$3);
                                                                if (hasNext != obj) {
                                                                }
                                                            } catch (Throwable th) {
                                                                e$iv$iv = th;
                                                            }
                                                        } else {
                                                            $i$a$4$consume = $i$a$4$consume2;
                                                            c2 = c4;
                                                            obj = obj2;
                                                            $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                                                            z = z2;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c2;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$mapNotNullTo$3.label = 1;
                                                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$3);
                                                            if (hasNext != obj) {
                                                            }
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj3).exception;
                                    }
                                } catch (Throwable th5) {
                                    e$iv$iv = th5;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            $i$f$mapNotNullTo = 0;
                            $i$a$1$let = 0;
                            z = false;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            transform = function1;
                            $i$a$4$consume = 0;
                            c2 = c;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$2 = transform;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$mapNotNullTo$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapNotNullTo$3);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$mapNotNullTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapNotNullTo$3
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapNotNullTo((ReceiveChannel) null, (SendChannel) null, (Function1) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$mapNotNullTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapNotNullTo$3.label;
        boolean z22 = false;
        if (i == 0) {
        }
    }

    private static final Object mapNotNullTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        int $i$f$mapNotNullTo;
        int i;
        int $i$f$mapNotNullTo2 = 0;
        int i2 = 0;
        Throwable e$iv$iv = null;
        int i3 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i2);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i3);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i2);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i3);
                try {
                    Object it2 = transform.invoke(e$iv);
                    if (it2 != null) {
                        i = 0;
                        InlineMarker.mark(0);
                        $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                        try {
                            destination.send(it2, continuation);
                            InlineMarker.mark(2);
                            InlineMarker.mark(1);
                        } catch (Throwable th2) {
                            e$iv$iv = th2;
                        }
                    } else {
                        $i$f$mapNotNullTo = $i$f$mapNotNullTo2;
                        i = 0;
                    }
                    i2 = i;
                    $i$f$mapNotNullTo2 = $i$f$mapNotNullTo;
                    i3 = 1;
                } catch (Throwable th3) {
                    e$iv$iv = th3;
                    throw e$iv$iv;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i4 = 1;
                InlineMarker.finallyStart(i4);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i4);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0110 A[Catch: all -> 0x0151, TRY_LEAVE, TryCatch #0 {all -> 0x0151, blocks: (B:39:0x0108, B:41:0x0110, B:48:0x0143), top: B:63:0x0108 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0143 A[Catch: all -> 0x0151, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x0151, blocks: (B:39:0x0108, B:41:0x0110, B:48:0x0143), top: B:63:0x0108 }] */
    /* JADX WARN: Type inference failed for: r3v7, types: [java.util.Collection] */
    /* JADX WARN: Type inference failed for: r8v4, types: [java.util.Collection] */
    /* JADX WARN: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends Collection<? super R>> Object mapTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, ? extends R> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapTo$1 channelsKt__Channels_commonKt$mapTo$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv;
        Function1 transform;
        C c2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Function1 transform2;
        C c3;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapTo$1) {
                channelsKt__Channels_commonKt$mapTo$1 = (ChannelsKt__Channels_commonKt$mapTo$1) continuation;
                if ((channelsKt__Channels_commonKt$mapTo$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapTo$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$mapTo$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapTo$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$mapTo$1.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$3;
                            transform2 = (Function1) channelsKt__Channels_commonKt$mapTo$1.L$2;
                            ?? r8 = (Collection) channelsKt__Channels_commonKt$mapTo$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    c3 = r8;
                                    z2 = false;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapTo$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapTo$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$3;
                            Function1 transform3 = (Function1) channelsKt__Channels_commonKt$mapTo$1.L$2;
                            Collection destination = (Collection) channelsKt__Channels_commonKt$mapTo$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    boolean z3 = false;
                                    Object it = obj3;
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    Collection collection = destination;
                                    transform = transform3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        collection.add(transform.invoke(it));
                                        channelsKt__Channels_commonKt$mapTo$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$mapTo$1.L$1 = c2;
                                        channelsKt__Channels_commonKt$mapTo$1.L$2 = transform;
                                        channelsKt__Channels_commonKt$mapTo$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$mapTo$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$mapTo$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$mapTo$1.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$mapTo$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$mapTo$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        transform2 = transform;
                                        c3 = c2;
                                        channelIterator2 = channelIterator;
                                        z2 = z;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$mapTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$mapTo$1.L$1 = c3;
                                                channelsKt__Channels_commonKt$mapTo$1.L$2 = transform2;
                                                channelsKt__Channels_commonKt$mapTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$mapTo$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$mapTo$1.label = 2;
                                                it = channelIterator2.next(channelsKt__Channels_commonKt$mapTo$1);
                                                if (it == obj2) {
                                                    return obj2;
                                                }
                                                z3 = z2;
                                                channelIterator = channelIterator2;
                                                obj = obj2;
                                                $receiver$iv5 = $receiver$iv3;
                                                collection = c3;
                                                transform = transform2;
                                                collection.add(transform.invoke(it));
                                                $receiver$iv2 = $receiver$iv5;
                                                z = z3;
                                                c2 = collection;
                                                channelsKt__Channels_commonKt$mapTo$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$mapTo$1.L$1 = c2;
                                                channelsKt__Channels_commonKt$mapTo$1.L$2 = transform;
                                                channelsKt__Channels_commonKt$mapTo$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$mapTo$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$mapTo$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$mapTo$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                return c3;
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    $receiver$iv2 = $receiver$iv5;
                                    z = z3;
                                    c2 = collection;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver$iv2 = $receiver$iv$iv;
                            $receiver = receiveChannel;
                            transform = function1;
                            $receiver$iv = receiveChannel;
                            c2 = c;
                            channelsKt__Channels_commonKt$mapTo$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$mapTo$1.L$1 = c2;
                            channelsKt__Channels_commonKt$mapTo$1.L$2 = transform;
                            channelsKt__Channels_commonKt$mapTo$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapTo$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapTo$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$mapTo$1.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$mapTo$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$mapTo$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$mapTo$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapTo$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapTo((ReceiveChannel) null, (Collection) null, (Function1) null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$mapTo$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapTo$1.label;
        if (i == 0) {
        }
    }

    private static final Object mapTo$$forInline(ReceiveChannel $receiver, Collection destination, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    destination.add(transform.invoke(e$iv));
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x015d A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x015e  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x016c A[Catch: all -> 0x01e7, TRY_LEAVE, TryCatch #2 {all -> 0x01e7, blocks: (B:45:0x0164, B:47:0x016c, B:63:0x01d9), top: B:82:0x0164 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01bb A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x01bc  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01d9 A[Catch: all -> 0x01e7, TRY_ENTER, TRY_LEAVE, TryCatch #2 {all -> 0x01e7, blocks: (B:45:0x0164, B:47:0x016c, B:63:0x01d9), top: B:82:0x0164 }] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x002b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v11, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v1 */
    /* JADX WARN: Type inference failed for: r5v8, types: [kotlin.jvm.functions.Function1] */
    /* JADX WARN: Type inference failed for: r7v3, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v6, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Type inference failed for: r7v8, types: [kotlinx.coroutines.channels.SendChannel] */
    /* JADX WARN: Unknown variable types count: 5 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R, C extends SendChannel<? super R>> Object mapTo(ReceiveChannel<? extends E> receiveChannel, C c, Function1<? super E, ? extends R> function1, Continuation<? super C> continuation) {
        ChannelsKt__Channels_commonKt$mapTo$3 channelsKt__Channels_commonKt$mapTo$3;
        int i;
        int $i$a$4$consume;
        ChannelIterator<E> channelIterator;
        Throwable cause$iv$iv;
        ReceiveChannel $receiver$iv$iv;
        Object obj;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver;
        boolean z;
        int $i$f$mapTo;
        ReceiveChannel $receiver$iv2;
        Function1 transform;
        Object obj2;
        Object e$iv;
        Object obj3;
        ReceiveChannel $receiver$iv3;
        int $i$a$4$consume2;
        int $i$f$mapTo2;
        ReceiveChannel $receiver2;
        C c2;
        int $i$f$mapTo3;
        int $i$a$4$consume3;
        C c3;
        C c4;
        Object invoke;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$mapTo$3) {
                channelsKt__Channels_commonKt$mapTo$3 = (ChannelsKt__Channels_commonKt$mapTo$3) continuation;
                if ((channelsKt__Channels_commonKt$mapTo$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$mapTo$3.label -= Integer.MIN_VALUE;
                    Object obj4 = channelsKt__Channels_commonKt$mapTo$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$mapTo$3.label;
                    ?? r4 = 3;
                    ?? r5 = 2;
                    boolean z2 = false;
                    boolean z3 = false;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$4$consume = 0;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapTo$3.L$7;
                                ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$4;
                                ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$3;
                                Function1 transform2 = (Function1) channelsKt__Channels_commonKt$mapTo$3.L$2;
                                ?? r7 = (SendChannel) channelsKt__Channels_commonKt$mapTo$3.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$0;
                                if (obj4 instanceof Result.Failure) {
                                    throw ((Result.Failure) obj4).exception;
                                }
                                obj = obj4;
                                $receiver$iv = $receiver$iv4;
                                $receiver = $receiver3;
                                z = false;
                                $i$f$mapTo = 0;
                                $receiver$iv2 = $receiver$iv5;
                                transform = transform2;
                                obj2 = coroutine_suspended;
                                c3 = r7;
                                if (!((Boolean) obj).booleanValue()) {
                                }
                            } else if (i == 2) {
                                z3 = false;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapTo$3.L$7;
                                ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$4;
                                r4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$3;
                                r5 = (Function1) channelsKt__Channels_commonKt$mapTo$3.L$2;
                                ?? r72 = (SendChannel) channelsKt__Channels_commonKt$mapTo$3.L$1;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$0;
                                if (!(obj4 instanceof Result.Failure)) {
                                    e$iv = obj4;
                                    obj3 = coroutine_suspended;
                                    $receiver$iv3 = $receiver$iv6;
                                    $receiver = $receiver4;
                                    $i$a$4$consume2 = 0;
                                    $i$f$mapTo2 = 0;
                                    $receiver$iv2 = r4;
                                    transform = r5;
                                    c4 = r72;
                                    invoke = transform.invoke(e$iv);
                                    channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                                    channelsKt__Channels_commonKt$mapTo$3.L$1 = c4;
                                    channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                                    channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                                    channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                                    channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                                    channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv3;
                                    channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                                    channelsKt__Channels_commonKt$mapTo$3.L$8 = e$iv;
                                    channelsKt__Channels_commonKt$mapTo$3.L$9 = e$iv;
                                    $receiver2 = $receiver;
                                    channelsKt__Channels_commonKt$mapTo$3.label = 3;
                                    if (c4.send(invoke, channelsKt__Channels_commonKt$mapTo$3) != obj3) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj4).exception;
                                }
                            } else if (i == 3) {
                                Object it = channelsKt__Channels_commonKt$mapTo$3.L$9;
                                Object e$iv2 = channelsKt__Channels_commonKt$mapTo$3.L$8;
                                channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$mapTo$3.L$7;
                                ReceiveChannel $receiver$iv7 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$6;
                                cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$mapTo$3.L$5;
                                $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$4;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$3;
                                Function1 transform3 = (Function1) channelsKt__Channels_commonKt$mapTo$3.L$2;
                                ?? r73 = (SendChannel) channelsKt__Channels_commonKt$mapTo$3.L$1;
                                ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$mapTo$3.L$0;
                                try {
                                    if (!(obj4 instanceof Result.Failure)) {
                                        $receiver$iv = $receiver$iv7;
                                        obj2 = coroutine_suspended;
                                        $receiver2 = $receiver5;
                                        c2 = r73;
                                        $i$f$mapTo3 = 0;
                                        $i$a$4$consume3 = 0;
                                        transform = transform3;
                                        z = false;
                                        $receiver = $receiver2;
                                        try {
                                            channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$mapTo$3.L$1 = c2;
                                            channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                                            channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv;
                                            channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                                            channelsKt__Channels_commonKt$mapTo$3.label = 1;
                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$3);
                                            if (obj == obj2) {
                                                return obj2;
                                            }
                                            c3 = c2;
                                            $i$a$4$consume = $i$a$4$consume3;
                                            $i$f$mapTo = $i$f$mapTo3;
                                            try {
                                                if (!((Boolean) obj).booleanValue()) {
                                                    channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$1 = c3;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$mapTo$3.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$mapTo$3);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    try {
                                                        try {
                                                            $receiver$iv3 = $receiver$iv;
                                                            obj3 = obj2;
                                                            $i$a$4$consume2 = $i$a$4$consume;
                                                            $i$f$mapTo2 = $i$f$mapTo;
                                                            z2 = z;
                                                            c4 = c3;
                                                            invoke = transform.invoke(e$iv);
                                                            channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$1 = c4;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv3;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$8 = e$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$9 = e$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.label = 3;
                                                            if (c4.send(invoke, channelsKt__Channels_commonKt$mapTo$3) != obj3) {
                                                                return obj3;
                                                            }
                                                            c2 = c4;
                                                            $i$f$mapTo3 = $i$f$mapTo2;
                                                            obj2 = obj3;
                                                            $receiver$iv = $receiver$iv3;
                                                            z = z2;
                                                            $i$a$4$consume3 = $i$a$4$consume2;
                                                            $receiver = $receiver2;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$1 = c2;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv;
                                                            channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                                                            channelsKt__Channels_commonKt$mapTo$3.label = 1;
                                                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$3);
                                                            if (obj == obj2) {
                                                            }
                                                        } catch (Throwable th) {
                                                            e$iv$iv = th;
                                                        }
                                                    } catch (Throwable th2) {
                                                        e$iv$iv = th2;
                                                    }
                                                    $receiver2 = $receiver;
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    return c3;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } else {
                                        throw ((Result.Failure) obj4).exception;
                                    }
                                } catch (Throwable th5) {
                                    e$iv$iv = th5;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else if (!(obj4 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            $i$f$mapTo3 = 0;
                            $receiver$iv2 = receiveChannel;
                            z = false;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            c2 = c;
                            $i$a$4$consume3 = 0;
                            transform = function1;
                            channelsKt__Channels_commonKt$mapTo$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$mapTo$3.L$1 = c2;
                            channelsKt__Channels_commonKt$mapTo$3.L$2 = transform;
                            channelsKt__Channels_commonKt$mapTo$3.L$3 = $receiver$iv2;
                            channelsKt__Channels_commonKt$mapTo$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$mapTo$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$mapTo$3.L$6 = $receiver$iv;
                            channelsKt__Channels_commonKt$mapTo$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$mapTo$3.label = 1;
                            obj = channelIterator.hasNext(channelsKt__Channels_commonKt$mapTo$3);
                            if (obj == obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) obj4).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } finally {
            int i2 = 1;
            InlineMarker.finallyStart(i2);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(i2);
        }
        channelsKt__Channels_commonKt$mapTo$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$mapTo$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.mapTo((ReceiveChannel) null, (SendChannel) null, (Function1) null, this);
            }
        };
        Object obj42 = channelsKt__Channels_commonKt$mapTo$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$mapTo$3.label;
        ?? r42 = 3;
        ?? r52 = 2;
        boolean z22 = false;
        boolean z32 = false;
        if (i == 0) {
        }
    }

    private static final Object mapTo$$forInline(ReceiveChannel $receiver, SendChannel destination, Function1 transform, Continuation continuation) {
        ChannelIterator it;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    Object invoke = transform.invoke(e$iv);
                    InlineMarker.mark(0);
                    destination.send(invoke, continuation);
                    InlineMarker.mark(2);
                    InlineMarker.mark(1);
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return destination;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    public static /* synthetic */ ReceiveChannel withIndex$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.withIndex(receiveChannel, coroutineContext);
    }

    public static final <E> ReceiveChannel<IndexedValue<E>> withIndex(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$withIndex$1(receiveChannel, null), 2, null);
    }

    public static final <E> ReceiveChannel<E> distinct(ReceiveChannel<? extends E> receiveChannel) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        return distinctBy$default(receiveChannel, null, new ChannelsKt__Channels_commonKt$distinct$1(null), 1, null);
    }

    public static /* synthetic */ ReceiveChannel distinctBy$default(ReceiveChannel receiveChannel, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 1) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.distinctBy(receiveChannel, coroutineContext, function2);
    }

    public static final <E, K> ReceiveChannel<E> distinctBy(ReceiveChannel<? extends E> receiveChannel, CoroutineContext context, Function2<? super E, ? super Continuation<? super K>, ? extends Object> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "selector");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumes(receiveChannel), new ChannelsKt__Channels_commonKt$distinctBy$1(receiveChannel, function2, null), 2, null);
    }

    public static final <E> Object toMutableSet(ReceiveChannel<? extends E> receiveChannel, Continuation<? super Set<E>> continuation) {
        return ChannelsKt.toCollection(receiveChannel, new LinkedHashSet(), continuation);
    }

    /* JADX INFO: Multiple debug info for r8v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ef A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0100 A[Catch: all -> 0x0162, TRY_LEAVE, TryCatch #1 {all -> 0x0162, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x0150), top: B:70:0x00f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0131 A[Catch: all -> 0x0165, TRY_LEAVE, TryCatch #2 {all -> 0x0165, blocks: (B:35:0x00d8, B:46:0x0125, B:48:0x0131), top: B:72:0x00d8 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0143  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0150 A[Catch: all -> 0x0162, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0162, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x0150), top: B:70:0x00f8 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object all(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Boolean> continuation) {
        ChannelsKt__Channels_commonKt$all$1 channelsKt__Channels_commonKt$all$1;
        int i;
        ReceiveChannel receiveChannel2;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver;
        Function1 predicate;
        ReceiveChannel $receiver2;
        ReceiveChannel $receiver$iv;
        Object hasNext;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv4;
        Function1 predicate2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$all$1) {
                channelsKt__Channels_commonKt$all$1 = (ChannelsKt__Channels_commonKt$all$1) continuation;
                if ((channelsKt__Channels_commonKt$all$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$all$1.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$all$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$all$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$all$1.L$6;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$5;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$all$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$3;
                            $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$all$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    $receiver$iv3 = null;
                                    obj = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    cause$iv$iv = cause$iv$iv2;
                                    predicate2 = predicate3;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$all$1.L$6;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$all$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$3;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$all$1.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$all$1.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv7 = $receiver$iv5;
                                    predicate = predicate4;
                                    Object e$iv = obj2;
                                    $receiver$iv3 = null;
                                    Object obj3 = coroutine_suspended;
                                    $receiver2 = $receiver4;
                                    $receiver = $receiver$iv6;
                                    if (predicate.invoke(e$iv).booleanValue()) {
                                        Boolean boxBoolean = Boxing.boxBoolean(false);
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return boxBoolean;
                                    }
                                    receiveChannel2 = $receiver$iv3;
                                    $receiver$iv = $receiver$iv7;
                                    obj = obj3;
                                    try {
                                        channelsKt__Channels_commonKt$all$1.L$0 = $receiver2;
                                        channelsKt__Channels_commonKt$all$1.L$1 = predicate;
                                        channelsKt__Channels_commonKt$all$1.L$2 = $receiver;
                                        channelsKt__Channels_commonKt$all$1.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$all$1.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$all$1.L$5 = $receiver$iv;
                                        channelsKt__Channels_commonKt$all$1.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$all$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$all$1);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver$iv2 = $receiver$iv;
                                        $receiver$iv3 = receiveChannel2;
                                        channelIterator2 = channelIterator;
                                        $receiver$iv4 = $receiver;
                                        predicate2 = predicate;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$all$1.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$all$1.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$all$1.L$2 = $receiver$iv4;
                                                channelsKt__Channels_commonKt$all$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$all$1.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$all$1.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$all$1.L$6 = channelIterator2;
                                                channelsKt__Channels_commonKt$all$1.label = 2;
                                                e$iv = channelIterator2.next(channelsKt__Channels_commonKt$all$1);
                                                if (e$iv == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv7 = $receiver$iv2;
                                                predicate = predicate2;
                                                $receiver = $receiver$iv4;
                                                channelIterator = channelIterator2;
                                                obj3 = obj;
                                                if (predicate.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxBoolean(true);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            obj = coroutine_suspended;
                            receiveChannel2 = null;
                            $receiver2 = receiveChannel;
                            $receiver = receiveChannel;
                            predicate = function1;
                            channelsKt__Channels_commonKt$all$1.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$all$1.L$1 = predicate;
                            channelsKt__Channels_commonKt$all$1.L$2 = $receiver;
                            channelsKt__Channels_commonKt$all$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$all$1.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$all$1.L$5 = $receiver$iv;
                            channelsKt__Channels_commonKt$all$1.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$all$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$all$1);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$all$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$all$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.all(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$all$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$all$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Type inference failed for: r10v0, types: [int, boolean] */
    private static final Object all$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        Object e$iv;
        Throwable cause$iv$iv = null;
        try {
            ChannelIterator it = $receiver.iterator();
            do {
                InlineMarker.mark(0);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(0);
                    e$iv = it.next(continuation);
                    InlineMarker.mark(1);
                    try {
                    } catch (Throwable th) {
                        e$iv$iv = th;
                        try {
                            throw e$iv$iv;
                        } finally {
                            InlineMarker.finallyStart(1 == true ? 1 : 0);
                            $receiver.cancel(e$iv$iv);
                            InlineMarker.finallyEnd(1);
                        }
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    InlineMarker.finallyStart(1);
                    $receiver.cancel(cause$iv$iv);
                    InlineMarker.finallyEnd(1);
                    return Boolean.valueOf(true);
                }
            } while (((Boolean) predicate.invoke(e$iv)).booleanValue());
            return false;
        } catch (Throwable th2) {
            e$iv$iv = th2;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0027  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0058  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object any(ReceiveChannel<? extends E> receiveChannel, Continuation<? super Boolean> continuation) {
        ChannelsKt__Channels_commonKt$any$1 channelsKt__Channels_commonKt$any$1;
        int i;
        Throwable e$iv;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv2;
        Throwable e$iv2;
        if (continuation instanceof ChannelsKt__Channels_commonKt$any$1) {
            channelsKt__Channels_commonKt$any$1 = (ChannelsKt__Channels_commonKt$any$1) continuation;
            if ((channelsKt__Channels_commonKt$any$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$any$1.label -= Integer.MIN_VALUE;
                Object obj = channelsKt__Channels_commonKt$any$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$any$1.label;
                if (i == 0) {
                    if (i == 1) {
                        ReceiveChannel $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$any$1.L$3;
                        e$iv2 = (Throwable) channelsKt__Channels_commonKt$any$1.L$2;
                        $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$any$1.L$1;
                        ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$any$1.L$0;
                        try {
                            if (obj instanceof Result.Failure) {
                                throw ((Result.Failure) obj).exception;
                            }
                        } catch (Throwable th) {
                            e$iv = th;
                            $receiver$iv = $receiver$iv2;
                            try {
                                throw e$iv;
                            } finally {
                                $receiver$iv.cancel(e$iv);
                            }
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                } else if (!(obj instanceof Result.Failure)) {
                    $receiver$iv = receiveChannel;
                    Throwable cause$iv = null;
                    try {
                        ChannelIterator<E> it = $receiver$iv.iterator();
                        channelsKt__Channels_commonKt$any$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$any$1.L$1 = $receiver$iv;
                        channelsKt__Channels_commonKt$any$1.L$2 = cause$iv;
                        channelsKt__Channels_commonKt$any$1.L$3 = $receiver$iv;
                        channelsKt__Channels_commonKt$any$1.label = 1;
                        Object hasNext = it.hasNext(channelsKt__Channels_commonKt$any$1);
                        if (hasNext == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv2 = $receiver$iv;
                        obj = hasNext;
                        e$iv2 = cause$iv;
                    } catch (Throwable th2) {
                        e$iv = th2;
                        throw e$iv;
                    }
                } else {
                    throw ((Result.Failure) obj).exception;
                }
                return obj;
            }
        }
        channelsKt__Channels_commonKt$any$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$any$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.any(null, this);
            }
        };
        Object obj2 = channelsKt__Channels_commonKt$any$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$any$1.label;
        if (i == 0) {
        }
        return obj2;
    }

    /* JADX INFO: Multiple debug info for r8v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ef A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0100 A[Catch: all -> 0x015f, TRY_LEAVE, TryCatch #5 {all -> 0x015f, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x014c), top: B:78:0x00f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0131 A[Catch: all -> 0x0162, TRY_LEAVE, TryCatch #0 {all -> 0x0162, blocks: (B:35:0x00d8, B:46:0x0125, B:48:0x0131), top: B:68:0x00d8 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x014c A[Catch: all -> 0x015f, TRY_ENTER, TRY_LEAVE, TryCatch #5 {all -> 0x015f, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x014c), top: B:78:0x00f8 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object any(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Boolean> continuation) {
        ChannelsKt__Channels_commonKt$any$3 channelsKt__Channels_commonKt$any$3;
        int i;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj2;
        ReceiveChannel $receiver$iv;
        Function1 predicate;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv3;
        Function1 predicate2;
        ReceiveChannel $receiver2;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel receiveChannel2;
        ReceiveChannel $receiver$iv4;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$any$3) {
                channelsKt__Channels_commonKt$any$3 = (ChannelsKt__Channels_commonKt$any$3) continuation;
                if ((channelsKt__Channels_commonKt$any$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$any$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$any$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$any$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$any$3.L$6;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$5;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$any$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$any$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    obj = obj3;
                                    $receiver$iv3 = null;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    cause$iv$iv = cause$iv$iv2;
                                    predicate = predicate3;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) obj).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$any$3.L$6;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$any$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$3;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$any$3.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$any$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv7 = $receiver$iv5;
                                    predicate2 = predicate4;
                                    Object e$iv = obj3;
                                    $receiver$iv3 = null;
                                    Object obj4 = coroutine_suspended;
                                    $receiver = $receiver4;
                                    $receiver2 = $receiver$iv6;
                                    if (!predicate2.invoke(e$iv).booleanValue()) {
                                        Boolean boxBoolean = Boxing.boxBoolean(true);
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return boxBoolean;
                                    }
                                    receiveChannel2 = $receiver$iv3;
                                    $receiver$iv4 = $receiver$iv7;
                                    obj2 = obj4;
                                    try {
                                        channelsKt__Channels_commonKt$any$3.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$any$3.L$1 = predicate2;
                                        channelsKt__Channels_commonKt$any$3.L$2 = $receiver2;
                                        channelsKt__Channels_commonKt$any$3.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$any$3.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$any$3.L$5 = $receiver$iv4;
                                        channelsKt__Channels_commonKt$any$3.L$6 = channelIterator2;
                                        channelsKt__Channels_commonKt$any$3.label = 1;
                                        obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$any$3);
                                        if (obj != obj2) {
                                            return obj2;
                                        }
                                        $receiver$iv2 = $receiver$iv4;
                                        $receiver$iv3 = receiveChannel2;
                                        channelIterator = channelIterator2;
                                        $receiver$iv = $receiver2;
                                        predicate = predicate2;
                                        try {
                                            if (!((Boolean) obj).booleanValue()) {
                                                channelsKt__Channels_commonKt$any$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$any$3.L$1 = predicate;
                                                channelsKt__Channels_commonKt$any$3.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$any$3.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$any$3.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$any$3.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$any$3.L$6 = channelIterator;
                                                channelsKt__Channels_commonKt$any$3.label = 2;
                                                e$iv = channelIterator.next(channelsKt__Channels_commonKt$any$3);
                                                if (e$iv == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv7 = $receiver$iv2;
                                                predicate2 = predicate;
                                                $receiver2 = $receiver$iv;
                                                channelIterator2 = channelIterator;
                                                obj4 = obj2;
                                                if (!predicate2.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxBoolean(false);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv4 = $receiver$iv$iv;
                        try {
                            channelIterator2 = $receiver$iv4.iterator();
                            obj2 = coroutine_suspended;
                            receiveChannel2 = null;
                            $receiver = receiveChannel;
                            $receiver2 = receiveChannel;
                            predicate2 = function1;
                            channelsKt__Channels_commonKt$any$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$any$3.L$1 = predicate2;
                            channelsKt__Channels_commonKt$any$3.L$2 = $receiver2;
                            channelsKt__Channels_commonKt$any$3.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$any$3.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$any$3.L$5 = $receiver$iv4;
                            channelsKt__Channels_commonKt$any$3.L$6 = channelIterator2;
                            channelsKt__Channels_commonKt$any$3.label = 1;
                            obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$any$3);
                            if (obj != obj2) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$any$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$any$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.any(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$any$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$any$3.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Type inference failed for: r10v0, types: [int, boolean] */
    private static final Object any$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        Object e$iv;
        Throwable cause$iv$iv = null;
        try {
            ChannelIterator it = $receiver.iterator();
            do {
                InlineMarker.mark(0);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(0);
                    e$iv = it.next(continuation);
                    InlineMarker.mark(1);
                    try {
                    } catch (Throwable th) {
                        e$iv$iv = th;
                        try {
                            throw e$iv$iv;
                        } finally {
                            InlineMarker.finallyStart(1 == true ? 1 : 0);
                            $receiver.cancel(e$iv$iv);
                            InlineMarker.finallyEnd(1);
                        }
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    InlineMarker.finallyStart(1);
                    $receiver.cancel(cause$iv$iv);
                    InlineMarker.finallyEnd(1);
                    return false;
                }
            } while (!((Boolean) predicate.invoke(e$iv)).booleanValue());
            return Boolean.valueOf(true);
        } catch (Throwable th2) {
            e$iv$iv = th2;
        }
    }

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00be  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00f4 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f5  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0108 A[Catch: all -> 0x0141, TRY_LEAVE, TryCatch #0 {all -> 0x0141, blocks: (B:39:0x0100, B:41:0x0108, B:48:0x0134), top: B:63:0x0100 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0134 A[Catch: all -> 0x0141, TRY_ENTER, TRY_LEAVE, TryCatch #0 {all -> 0x0141, blocks: (B:39:0x0100, B:41:0x0108, B:48:0x0134), top: B:63:0x0100 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object count(ReceiveChannel<? extends E> receiveChannel, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$count$1 channelsKt__Channels_commonKt$count$1;
        int i;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        int $i$a$4$consume;
        ChannelIterator<E> channelIterator;
        int $i$a$4$consume2;
        Object obj;
        Ref.IntRef count;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Object obj2;
        Ref.IntRef count2;
        int $i$a$4$consume3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$count$1) {
                channelsKt__Channels_commonKt$count$1 = (ChannelsKt__Channels_commonKt$count$1) continuation;
                if ((channelsKt__Channels_commonKt$count$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$count$1.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$count$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$count$1.label;
                    int $i$a$2$consumeEach = 0;
                    if (i == 0) {
                        if (i == 1) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$count$1.L$6;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$5;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$count$1.L$4;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$3;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$2;
                            Ref.IntRef count3 = (Ref.IntRef) channelsKt__Channels_commonKt$count$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    $i$a$4$consume3 = 0;
                                    count2 = count3;
                                    $receiver$iv = $receiver$iv4;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    cause$iv$iv = cause$iv$iv2;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            $i$a$4$consume3 = 0;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$count$1.L$6;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$count$1.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$3;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$2;
                            Ref.IntRef count4 = (Ref.IntRef) channelsKt__Channels_commonKt$count$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$count$1.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    Object next = obj3;
                                    $receiver$iv2 = $receiver$iv5;
                                    count = count4;
                                    try {
                                        count.element++;
                                        channelsKt__Channels_commonKt$count$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$count$1.L$1 = count;
                                        channelsKt__Channels_commonKt$count$1.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$count$1.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$count$1.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$count$1.L$5 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$count$1.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$count$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$1);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        $receiver$iv3 = $receiver$iv2;
                                        obj2 = obj;
                                        count2 = count;
                                        $i$a$4$consume3 = $i$a$4$consume2;
                                        $i$a$2$consumeEach = $i$a$4$consume;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$count$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$count$1.L$1 = count2;
                                                channelsKt__Channels_commonKt$count$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$count$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$count$1.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$count$1.L$5 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$count$1.L$6 = channelIterator;
                                                channelsKt__Channels_commonKt$count$1.label = 2;
                                                next = channelIterator.next(channelsKt__Channels_commonKt$count$1);
                                                if (next == obj2) {
                                                    return obj2;
                                                }
                                                obj = obj2;
                                                $receiver$iv2 = $receiver$iv3;
                                                count = count2;
                                                count.element++;
                                                $i$a$4$consume = $i$a$2$consumeEach;
                                                $i$a$4$consume2 = $i$a$4$consume3;
                                                channelsKt__Channels_commonKt$count$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$count$1.L$1 = count;
                                                channelsKt__Channels_commonKt$count$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$count$1.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$count$1.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$count$1.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$count$1.L$6 = channelIterator;
                                                channelsKt__Channels_commonKt$count$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$1);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                return Boxing.boxInt(count2.element);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    $i$a$4$consume = $i$a$2$consumeEach;
                                    $i$a$4$consume2 = $i$a$4$consume3;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        Ref.IntRef intRef = new Ref.IntRef();
                        intRef.element = 0;
                        count = intRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            $i$a$4$consume = 0;
                            $i$a$4$consume2 = 0;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            channelsKt__Channels_commonKt$count$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$count$1.L$1 = count;
                            channelsKt__Channels_commonKt$count$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$count$1.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$count$1.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$count$1.L$5 = $receiver$iv2;
                            channelsKt__Channels_commonKt$count$1.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$count$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            $receiver$iv$iv.cancel(e$iv$iv);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$count$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$count$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.count(null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$count$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$count$1.label;
        int $i$a$2$consumeEach2 = 0;
        if (i == 0) {
        }
    }

    /* JADX INFO: Multiple debug info for r12v9 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('count' kotlin.jvm.internal.Ref$IntRef)] */
    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('count' kotlin.jvm.internal.Ref$IntRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c6  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0103 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0118 A[Catch: all -> 0x0173, TRY_LEAVE, TryCatch #1 {all -> 0x0173, blocks: (B:39:0x0110, B:41:0x0118, B:51:0x015f), top: B:68:0x0110 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x014d A[Catch: all -> 0x0177, TRY_LEAVE, TryCatch #2 {all -> 0x0177, blocks: (B:35:0x00ea, B:46:0x0141, B:48:0x014d), top: B:70:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0158  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x015f A[Catch: all -> 0x0173, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0173, blocks: (B:39:0x0110, B:41:0x0118, B:51:0x015f), top: B:68:0x0110 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object count(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$count$3 channelsKt__Channels_commonKt$count$3;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Ref.IntRef count;
        ReceiveChannel $receiver$iv2;
        Throwable cause$iv$iv;
        Function1 predicate;
        ReceiveChannel $receiver;
        Object obj;
        Object hasNext;
        boolean z2;
        Function1 predicate2;
        ReceiveChannel $receiver$iv3;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        Object obj2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$count$3) {
                channelsKt__Channels_commonKt$count$3 = (ChannelsKt__Channels_commonKt$count$3) continuation;
                if ((channelsKt__Channels_commonKt$count$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$count$3.label -= Integer.MIN_VALUE;
                    Object obj3 = channelsKt__Channels_commonKt$count$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$count$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$count$3.L$7;
                            $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$6;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$count$3.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$3;
                            count = (Ref.IntRef) channelsKt__Channels_commonKt$count$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$count$3.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    hasNext = obj3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z2 = false;
                                    predicate2 = predicate3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$count$3.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$count$3.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$3;
                            count = (Ref.IntRef) channelsKt__Channels_commonKt$count$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$count$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$count$3.L$0;
                            try {
                                if (!(obj3 instanceof Result.Failure)) {
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate4;
                                    z2 = false;
                                    Object e$iv = obj3;
                                    obj = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        if (!predicate.invoke(e$iv).booleanValue()) {
                                            obj2 = obj;
                                            count.element++;
                                        } else {
                                            obj2 = obj;
                                        }
                                        channelsKt__Channels_commonKt$count$3.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$count$3.L$1 = predicate;
                                        channelsKt__Channels_commonKt$count$3.L$2 = count;
                                        channelsKt__Channels_commonKt$count$3.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$count$3.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$count$3.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$count$3.L$6 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$count$3.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$count$3.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$3);
                                        if (hasNext == obj) {
                                            return obj;
                                        }
                                        z2 = z;
                                        predicate2 = predicate;
                                        $receiver$iv3 = $receiver$iv2;
                                        cause$iv$iv2 = cause$iv$iv;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$count$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$count$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$count$3.L$2 = count;
                                                channelsKt__Channels_commonKt$count$3.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$count$3.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$count$3.L$5 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$count$3.L$6 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$count$3.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$count$3.label = 2;
                                                e$iv = channelIterator2.next(channelsKt__Channels_commonKt$count$3);
                                                if (e$iv == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                predicate = predicate2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                if (!predicate.invoke(e$iv).booleanValue()) {
                                                }
                                                obj = obj2;
                                                z = z2;
                                                channelsKt__Channels_commonKt$count$3.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$count$3.L$1 = predicate;
                                                channelsKt__Channels_commonKt$count$3.L$2 = count;
                                                channelsKt__Channels_commonKt$count$3.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$count$3.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$count$3.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$count$3.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$count$3.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$count$3.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$3);
                                                if (hasNext == obj) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv2);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxInt(count.element);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    obj = obj2;
                                    z = z2;
                                } else {
                                    throw ((Result.Failure) obj3).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj3 instanceof Result.Failure)) {
                        Ref.IntRef count2 = new Ref.IntRef();
                        count2.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver$iv2 = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv2.iterator();
                            z = false;
                            obj = coroutine_suspended;
                            $receiver = receiveChannel;
                            count = count2;
                            predicate = function1;
                            channelsKt__Channels_commonKt$count$3.L$0 = $receiver;
                            channelsKt__Channels_commonKt$count$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$count$3.L$2 = count;
                            channelsKt__Channels_commonKt$count$3.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$count$3.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$count$3.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$count$3.L$6 = $receiver$iv2;
                            channelsKt__Channels_commonKt$count$3.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$count$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$count$3);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj3).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$count$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$count$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.count(null, null, this);
            }
        };
        Object obj32 = channelsKt__Channels_commonKt$count$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$count$3.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object count$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        int count = 0;
        int i = 0;
        Throwable cause$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        count++;
                    }
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv);
                InlineMarker.finallyEnd(1);
                return Integer.valueOf(count);
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } catch (Throwable e$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv2;
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v13 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('accumulator' kotlin.jvm.internal.Ref$ObjectRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00cd  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0116 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0117  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0132 A[Catch: all -> 0x0184, TRY_LEAVE, TryCatch #1 {all -> 0x0184, blocks: (B:41:0x012a, B:43:0x0132, B:52:0x0174), top: B:71:0x012a }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0174 A[Catch: all -> 0x0184, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0184, blocks: (B:41:0x012a, B:43:0x0132, B:52:0x0174), top: B:71:0x012a }] */
    /* JADX WARN: Type inference failed for: r0v20, types: [T, java.lang.Object] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R> Object fold(ReceiveChannel<? extends E> receiveChannel, R r, Function2<? super R, ? super E, ? extends R> function2, Continuation<? super R> continuation) {
        ChannelsKt__Channels_commonKt$fold$1 channelsKt__Channels_commonKt$fold$1;
        int i;
        boolean z;
        Function2 operation;
        int $i$f$consume;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        Object initial;
        Throwable cause$iv$iv;
        Ref.ObjectRef accumulator;
        Function2 operation2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv2;
        Object hasNext;
        ReceiveChannel $receiver$iv3;
        Function2 operation3;
        Ref.ObjectRef accumulator2;
        Throwable cause$iv$iv2;
        Object obj2;
        int initial2;
        Function2 $i$a$4$consume;
        ReceiveChannel $receiver2;
        boolean z2;
        ChannelIterator<E> channelIterator2;
        Object initial3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$fold$1) {
                channelsKt__Channels_commonKt$fold$1 = (ChannelsKt__Channels_commonKt$fold$1) continuation;
                if ((channelsKt__Channels_commonKt$fold$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$fold$1.label -= Integer.MIN_VALUE;
                    Object e$iv = channelsKt__Channels_commonKt$fold$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$fold$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume = null;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$fold$1.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$7;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$fold$1.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$4;
                            accumulator2 = (Ref.ObjectRef) channelsKt__Channels_commonKt$fold$1.L$3;
                            Function2 operation4 = (Function2) channelsKt__Channels_commonKt$fold$1.L$2;
                            Object initial4 = channelsKt__Channels_commonKt$fold$1.L$1;
                            $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    z2 = false;
                                    $receiver$iv3 = $receiver$iv4;
                                    operation3 = operation4;
                                    initial3 = initial4;
                                    initial2 = 0;
                                    cause$iv$iv2 = cause$iv$iv3;
                                    obj2 = coroutine_suspended;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) e$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$fold$1.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$7;
                            Throwable cause$iv$iv4 = (Throwable) channelsKt__Channels_commonKt$fold$1.L$6;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$4;
                            Ref.ObjectRef accumulator3 = (Ref.ObjectRef) channelsKt__Channels_commonKt$fold$1.L$3;
                            Function2 operation5 = (Function2) channelsKt__Channels_commonKt$fold$1.L$2;
                            Object obj3 = channelsKt__Channels_commonKt$fold$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$fold$1.L$0;
                            Object obj4 = coroutine_suspended;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    $receiver = $receiver3;
                                    z2 = false;
                                    cause$iv$iv = cause$iv$iv4;
                                    accumulator = accumulator3;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    operation2 = operation5;
                                    operation = null;
                                    $i$f$consume = 0;
                                    Object initial5 = obj3;
                                    try {
                                        try {
                                            try {
                                                accumulator.element = operation2.invoke((Object) accumulator.element, e$iv);
                                                channelsKt__Channels_commonKt$fold$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$fold$1.L$1 = initial;
                                                channelsKt__Channels_commonKt$fold$1.L$2 = operation2;
                                                channelsKt__Channels_commonKt$fold$1.L$3 = accumulator;
                                                channelsKt__Channels_commonKt$fold$1.L$4 = $receiver$iv;
                                                channelsKt__Channels_commonKt$fold$1.L$5 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$fold$1.L$6 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$fold$1.L$7 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$fold$1.L$8 = channelIterator;
                                                channelsKt__Channels_commonKt$fold$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$fold$1);
                                                if (hasNext == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv3 = $receiver$iv2;
                                                e$iv = hasNext;
                                                operation3 = operation2;
                                                accumulator2 = accumulator;
                                                cause$iv$iv2 = cause$iv$iv;
                                                obj2 = obj;
                                                initial2 = $i$f$consume;
                                                $i$a$4$consume = operation;
                                                $receiver2 = $receiver;
                                                z2 = z;
                                                channelIterator2 = channelIterator;
                                                initial3 = initial;
                                                try {
                                                    if (!((Boolean) e$iv).booleanValue()) {
                                                        channelsKt__Channels_commonKt$fold$1.L$0 = $receiver2;
                                                        channelsKt__Channels_commonKt$fold$1.L$1 = initial3;
                                                        channelsKt__Channels_commonKt$fold$1.L$2 = operation3;
                                                        channelsKt__Channels_commonKt$fold$1.L$3 = accumulator2;
                                                        channelsKt__Channels_commonKt$fold$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$fold$1.L$5 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$fold$1.L$6 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$fold$1.L$7 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$fold$1.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$fold$1.label = 2;
                                                        e$iv = channelIterator2.next(channelsKt__Channels_commonKt$fold$1);
                                                        if (e$iv == obj2) {
                                                            return obj2;
                                                        }
                                                        obj4 = obj2;
                                                        cause$iv$iv = cause$iv$iv2;
                                                        accumulator = accumulator2;
                                                        channelIterator = channelIterator2;
                                                        operation2 = operation3;
                                                        $receiver = $receiver2;
                                                        operation = $i$a$4$consume;
                                                        $i$f$consume = initial2;
                                                        $receiver$iv6 = $receiver$iv3;
                                                        initial5 = initial3;
                                                        accumulator.element = operation2.invoke((Object) accumulator.element, e$iv);
                                                        $receiver$iv2 = $receiver$iv6;
                                                        z = z2;
                                                        obj = obj4;
                                                        initial = initial5;
                                                        channelsKt__Channels_commonKt$fold$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$fold$1.L$1 = initial;
                                                        channelsKt__Channels_commonKt$fold$1.L$2 = operation2;
                                                        channelsKt__Channels_commonKt$fold$1.L$3 = accumulator;
                                                        channelsKt__Channels_commonKt$fold$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$fold$1.L$5 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$fold$1.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$fold$1.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$fold$1.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$fold$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$fold$1);
                                                        if (hasNext == obj) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv.cancel(cause$iv$iv2);
                                                        InlineMarker.finallyEnd(1);
                                                        return accumulator2.element;
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                    $receiver$iv2 = $receiver$iv6;
                                    z = z2;
                                    obj = obj4;
                                    initial = initial5;
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        Ref.ObjectRef accumulator4 = new Ref.ObjectRef();
                        T t = r;
                        accumulator4.element = t;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        Throwable cause$iv$iv5 = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            z = false;
                            $receiver$iv2 = $receiver$iv$iv;
                            operation = null;
                            obj = coroutine_suspended;
                            operation2 = function2;
                            $i$f$consume = 0;
                            cause$iv$iv = cause$iv$iv5;
                            accumulator = accumulator4;
                            $receiver = receiveChannel;
                            initial = t;
                            channelsKt__Channels_commonKt$fold$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$fold$1.L$1 = initial;
                            channelsKt__Channels_commonKt$fold$1.L$2 = operation2;
                            channelsKt__Channels_commonKt$fold$1.L$3 = accumulator;
                            channelsKt__Channels_commonKt$fold$1.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$fold$1.L$5 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$fold$1.L$6 = cause$iv$iv;
                            channelsKt__Channels_commonKt$fold$1.L$7 = $receiver$iv2;
                            channelsKt__Channels_commonKt$fold$1.L$8 = channelIterator;
                            channelsKt__Channels_commonKt$fold$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$fold$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$fold$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$fold$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.fold(null, null, null, this);
            }
        };
        Object e$iv2 = channelsKt__Channels_commonKt$fold$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$fold$1.label;
        if (i == 0) {
        }
    }

    private static final Object fold$$forInline(ReceiveChannel $receiver, Object initial, Function2 operation, Continuation continuation) {
        ChannelIterator it;
        Object accumulator = initial;
        int i = 0;
        Throwable e$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    accumulator = operation.invoke(accumulator, e$iv);
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                return accumulator;
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } finally {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v15 java.lang.Object: [D('index' kotlin.jvm.internal.Ref$IntRef), D('accumulator' kotlin.jvm.internal.Ref$ObjectRef)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0141 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0156 A[Catch: all -> 0x01ce, TRY_LEAVE, TryCatch #8 {all -> 0x01ce, blocks: (B:41:0x014e, B:43:0x0156, B:60:0x01be), top: B:94:0x014e }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01be A[Catch: all -> 0x01ce, TRY_ENTER, TRY_LEAVE, TryCatch #8 {all -> 0x01ce, blocks: (B:41:0x014e, B:43:0x0156, B:60:0x01be), top: B:94:0x014e }] */
    /* JADX WARN: Type inference failed for: r0v23, types: [T, java.lang.Object] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R> Object foldIndexed(ReceiveChannel<? extends E> receiveChannel, R r, Function3<? super Integer, ? super R, ? super E, ? extends R> function3, Continuation<? super R> continuation) {
        ChannelsKt__Channels_commonKt$foldIndexed$1 channelsKt__Channels_commonKt$foldIndexed$1;
        int i;
        int $i$a$4$consume;
        ReceiveChannel $receiver;
        Function3 $i$f$consume;
        Ref.ObjectRef accumulator;
        int $i$a$4$consume2;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Object obj;
        Ref.IntRef index;
        Throwable cause$iv$iv;
        Object initial;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        Function3 operation;
        Function3 operation2;
        Function3 operation3;
        int $i$f$consumeEach;
        int $i$f$consume2;
        Object initial2;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver$iv4;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$foldIndexed$1) {
                channelsKt__Channels_commonKt$foldIndexed$1 = (ChannelsKt__Channels_commonKt$foldIndexed$1) continuation;
                if ((channelsKt__Channels_commonKt$foldIndexed$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$foldIndexed$1.label -= Integer.MIN_VALUE;
                    Object e$iv = channelsKt__Channels_commonKt$foldIndexed$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$foldIndexed$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            $i$a$4$consume2 = 0;
                            $i$f$consume = null;
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$foldIndexed$1.L$9;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$8;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$foldIndexed$1.L$7;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$6;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$5;
                            accumulator = (Ref.ObjectRef) channelsKt__Channels_commonKt$foldIndexed$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$foldIndexed$1.L$3;
                            Function3 operation4 = (Function3) channelsKt__Channels_commonKt$foldIndexed$1.L$2;
                            Object initial3 = channelsKt__Channels_commonKt$foldIndexed$1.L$1;
                            $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    $i$a$4$consume = 0;
                                    channelsKt__Channels_commonKt$foldIndexed$1 = channelsKt__Channels_commonKt$foldIndexed$1;
                                    $receiver$iv2 = $receiver$iv5;
                                    operation = operation4;
                                    obj = coroutine_suspended;
                                    cause$iv$iv = cause$iv$iv2;
                                    initial = initial3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    if (!((Boolean) e$iv).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$foldIndexed$1.L$9;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$8;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$foldIndexed$1.L$7;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$6;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$5;
                            accumulator = (Ref.ObjectRef) channelsKt__Channels_commonKt$foldIndexed$1.L$4;
                            index = (Ref.IntRef) channelsKt__Channels_commonKt$foldIndexed$1.L$3;
                            Function3 operation5 = (Function3) channelsKt__Channels_commonKt$foldIndexed$1.L$2;
                            Object obj2 = channelsKt__Channels_commonKt$foldIndexed$1.L$1;
                            Object obj3 = coroutine_suspended;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$foldIndexed$1.L$0;
                            try {
                                if (!(e$iv instanceof Result.Failure)) {
                                    ReceiveChannel $receiver3 = $receiver2;
                                    ReceiveChannel $receiver$iv7 = $receiver$iv6;
                                    operation2 = operation5;
                                    operation3 = null;
                                    $i$f$consumeEach = 0;
                                    $i$f$consume2 = 0;
                                    Object initial4 = obj2;
                                    try {
                                        try {
                                            try {
                                                try {
                                                    try {
                                                        int i2 = index.element;
                                                        index.element = i2 + 1;
                                                        accumulator.element = operation2.invoke(Boxing.boxInt(i2), (Object) accumulator.element, e$iv);
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$0 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$1 = initial2;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$2 = operation2;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$3 = index;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$4 = accumulator;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$5 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$6 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$7 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$8 = $receiver$iv4;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.L$9 = channelIterator;
                                                        channelsKt__Channels_commonKt$foldIndexed$1.label = 1;
                                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$foldIndexed$1);
                                                        if (hasNext == obj) {
                                                            return obj;
                                                        }
                                                        $i$a$4$consume = $i$f$consume2;
                                                        $i$a$4$consume2 = $i$f$consumeEach;
                                                        $i$f$consume = operation3;
                                                        $receiver = $receiver$iv3;
                                                        $receiver$iv2 = $receiver$iv4;
                                                        e$iv = hasNext;
                                                        operation = operation2;
                                                        initial = initial2;
                                                        try {
                                                            if (!((Boolean) e$iv).booleanValue()) {
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$0 = $receiver;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$1 = initial;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$2 = operation;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$3 = index;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$4 = accumulator;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$5 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$6 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$7 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$8 = $receiver$iv2;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$9 = channelIterator;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.label = 2;
                                                                e$iv = channelIterator.next(channelsKt__Channels_commonKt$foldIndexed$1);
                                                                if (e$iv == obj) {
                                                                    return obj;
                                                                }
                                                                obj3 = obj;
                                                                $receiver$iv7 = $receiver$iv2;
                                                                operation2 = operation;
                                                                $receiver3 = $receiver;
                                                                operation3 = $i$f$consume;
                                                                $i$f$consumeEach = $i$a$4$consume2;
                                                                $i$f$consume2 = $i$a$4$consume;
                                                                initial4 = initial;
                                                                int i22 = index.element;
                                                                index.element = i22 + 1;
                                                                accumulator.element = operation2.invoke(Boxing.boxInt(i22), (Object) accumulator.element, e$iv);
                                                                channelsKt__Channels_commonKt$foldIndexed$1 = channelsKt__Channels_commonKt$foldIndexed$1;
                                                                $receiver$iv4 = $receiver$iv7;
                                                                obj = obj3;
                                                                $receiver$iv3 = $receiver3;
                                                                initial2 = initial4;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$0 = $receiver$iv3;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$1 = initial2;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$2 = operation2;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$3 = index;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$4 = accumulator;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$5 = $receiver$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$6 = $receiver$iv$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$7 = cause$iv$iv;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$8 = $receiver$iv4;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.L$9 = channelIterator;
                                                                channelsKt__Channels_commonKt$foldIndexed$1.label = 1;
                                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$foldIndexed$1);
                                                                if (hasNext == obj) {
                                                                }
                                                            } else {
                                                                Unit unit = Unit.INSTANCE;
                                                                InlineMarker.finallyStart(1);
                                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                                InlineMarker.finallyEnd(1);
                                                                return accumulator.element;
                                                            }
                                                        } catch (Throwable th2) {
                                                            e$iv$iv = th2;
                                                        }
                                                    } catch (Throwable th3) {
                                                        e$iv$iv = th3;
                                                    }
                                                } catch (Throwable th4) {
                                                    e$iv$iv = th4;
                                                }
                                            } catch (Throwable th5) {
                                                e$iv$iv = th5;
                                            }
                                        } catch (Throwable th6) {
                                            e$iv$iv = th6;
                                        }
                                        channelsKt__Channels_commonKt$foldIndexed$1 = channelsKt__Channels_commonKt$foldIndexed$1;
                                        $receiver$iv4 = $receiver$iv7;
                                        obj = obj3;
                                        $receiver$iv3 = $receiver3;
                                        initial2 = initial4;
                                    } catch (Throwable th7) {
                                        e$iv$iv = th7;
                                    }
                                } else {
                                    throw ((Result.Failure) e$iv).exception;
                                }
                            } catch (Throwable th8) {
                                e$iv$iv = th8;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(e$iv instanceof Result.Failure)) {
                        Ref.IntRef index2 = new Ref.IntRef();
                        index2.element = 0;
                        Ref.ObjectRef objectRef = new Ref.ObjectRef();
                        T t = r;
                        objectRef.element = t;
                        accumulator = objectRef;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        try {
                            channelIterator = $receiver$iv$iv.iterator();
                            index = index2;
                            $receiver$iv4 = $receiver$iv$iv;
                            operation3 = null;
                            obj = coroutine_suspended;
                            channelsKt__Channels_commonKt$foldIndexed$1 = channelsKt__Channels_commonKt$foldIndexed$1;
                            $receiver$iv3 = receiveChannel;
                            $i$f$consumeEach = 0;
                            $i$f$consume2 = 0;
                            operation2 = function3;
                            initial2 = t;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$0 = $receiver$iv3;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$1 = initial2;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$2 = operation2;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$3 = index;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$4 = accumulator;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$5 = $receiver$iv;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$6 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$7 = cause$iv$iv;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$8 = $receiver$iv4;
                            channelsKt__Channels_commonKt$foldIndexed$1.L$9 = channelIterator;
                            channelsKt__Channels_commonKt$foldIndexed$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$foldIndexed$1);
                            if (hasNext == obj) {
                            }
                        } catch (Throwable th9) {
                            e$iv$iv = th9;
                        }
                    } else {
                        throw ((Result.Failure) e$iv).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$foldIndexed$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$foldIndexed$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.foldIndexed(null, null, null, this);
            }
        };
        Object e$iv2 = channelsKt__Channels_commonKt$foldIndexed$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$foldIndexed$1.label;
        if (i == 0) {
        }
    }

    private static final Object foldIndexed$$forInline(ReceiveChannel $receiver, Object initial, Function3 operation, Continuation continuation) {
        ChannelIterator it;
        int index = 0;
        Object accumulator = initial;
        int i = 0;
        Throwable e$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                int index2 = index + 1;
                try {
                    try {
                        accumulator = operation.invoke(Integer.valueOf(index), accumulator, e$iv);
                        index = index2;
                        i = 0;
                        i2 = 1;
                    } catch (Throwable th2) {
                        e$iv$iv = th2;
                        throw e$iv$iv;
                    }
                } catch (Throwable th3) {
                    e$iv$iv = th3;
                }
            } else {
                try {
                    Unit unit = Unit.INSTANCE;
                    return accumulator;
                } catch (Throwable th4) {
                    e$iv$iv = th4;
                }
            }
            try {
                throw e$iv$iv;
            } finally {
                int i3 = 1;
                InlineMarker.finallyStart(i3);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(i3);
            }
        }
    }

    /* JADX INFO: Multiple debug info for r14v20 java.lang.Object: [D('iterator' kotlinx.coroutines.channels.ChannelIterator), D('$receiver' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|111|(4:(1:(1:(1:(3:14|15|(6:17|77|(1:79)(1:80)|81|67|(1:69)(4:70|116|71|(2:73|(1:75)(6:76|77|(0)(0)|81|67|(0)(0)))(2:82|83)))(2:18|19))(2:21|22))(4:23|118|24|(4:26|116|71|(0)(0))(2:27|28)))(4:31|105|32|(5:34|103|66|67|(0)(0))(2:35|36)))(4:39|114|40|(1:42)(2:43|44))|94|101|95)(2:47|(10:49|112|50|51|109|52|53|107|54|(1:56)(1:57))(2:99|100))|58|(2:60|61)(2:62|(1:64)(5:65|103|66|67|(0)(0)))))|7|8|111|(0)(0)|58|(0)(0)|(2:(0)|(1:102))) */
    /* JADX WARN: Code restructure failed: missing block: B:20:0x006b, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0123  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015e  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0169 A[Catch: all -> 0x006b, TRY_ENTER, TRY_LEAVE, TryCatch #5 {all -> 0x006b, blocks: (B:15:0x005d, B:18:0x0066, B:19:0x006a, B:58:0x0156, B:62:0x0169, B:77:0x01db), top: B:111:0x002a }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x01a4 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01a5  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01b6 A[Catch: all -> 0x01ff, TRY_LEAVE, TryCatch #8 {all -> 0x01ff, blocks: (B:71:0x01ae, B:73:0x01b6), top: B:116:0x01ae }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01eb  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01ee  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01f4  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R extends Comparable<? super R>> Object maxBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends R> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$maxBy$1 channelsKt__Channels_commonKt$maxBy$1;
        Object maxElem;
        int i;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        Object obj;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver2;
        Function1 selector;
        ChannelIterator iterator;
        Object maxElem2;
        Comparable maxValue;
        ChannelIterator maxElem3;
        Function1 selector2;
        Throwable cause$iv2;
        ReceiveChannel $receiver3;
        ReceiveChannel $receiver4;
        ChannelIterator selector3;
        Comparable maxValue2;
        ReceiveChannel $receiver5;
        ReceiveChannel $receiver6;
        if (continuation instanceof ChannelsKt__Channels_commonKt$maxBy$1) {
            channelsKt__Channels_commonKt$maxBy$1 = (ChannelsKt__Channels_commonKt$maxBy$1) continuation;
            if ((channelsKt__Channels_commonKt$maxBy$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$maxBy$1.label -= Integer.MIN_VALUE;
                maxElem = channelsKt__Channels_commonKt$maxBy$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$maxBy$1.label;
                int $i$a$2$consume = 1;
                if (i == 0) {
                    if (i == $i$a$2$consume) {
                        ChannelIterator iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$maxBy$1.L$5;
                        $receiver6 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$maxBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$2;
                        Function1 selector4 = (Function1) channelsKt__Channels_commonKt$maxBy$1.L$1;
                        ReceiveChannel $receiver7 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$0;
                        try {
                            if (!(maxElem instanceof Result.Failure)) {
                                selector2 = selector4;
                                $receiver5 = $receiver7;
                                iterator = iterator2;
                                selector3 = null;
                            } else {
                                throw ((Result.Failure) maxElem).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                        }
                    } else if (i == 2) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$maxBy$1.L$5;
                        $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$maxBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$2;
                        Function1 selector5 = (Function1) channelsKt__Channels_commonKt$maxBy$1.L$1;
                        $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$0;
                        try {
                            if (!(maxElem instanceof Result.Failure)) {
                                selector2 = selector5;
                                selector3 = null;
                                try {
                                    maxValue2 = (Comparable) selector2.invoke(maxElem);
                                    channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver4;
                                    channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver3;
                                    channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$maxBy$1.L$6 = maxElem;
                                    channelsKt__Channels_commonKt$maxBy$1.L$7 = maxValue2;
                                    channelsKt__Channels_commonKt$maxBy$1.label = 3;
                                    obj = iterator.hasNext(channelsKt__Channels_commonKt$maxBy$1);
                                    if (obj != coroutine_suspended) {
                                    }
                                } catch (Throwable th2) {
                                    cause$iv = th2;
                                }
                            } else {
                                throw ((Result.Failure) maxElem).exception;
                            }
                        } catch (Throwable th3) {
                            cause$iv = th3;
                        }
                    } else if (i == 3) {
                        maxValue = (Comparable) channelsKt__Channels_commonKt$maxBy$1.L$7;
                        maxElem2 = channelsKt__Channels_commonKt$maxBy$1.L$6;
                        ChannelIterator iterator3 = (ChannelIterator) channelsKt__Channels_commonKt$maxBy$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$4;
                        Throwable cause$iv3 = (Throwable) channelsKt__Channels_commonKt$maxBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$2;
                        selector = (Function1) channelsKt__Channels_commonKt$maxBy$1.L$1;
                        $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$0;
                        try {
                            if (!(maxElem instanceof Result.Failure)) {
                                obj = maxElem;
                                maxElem3 = null;
                                cause$iv2 = cause$iv3;
                                iterator = iterator3;
                                if (!((Boolean) obj).booleanValue()) {
                                }
                            } else {
                                throw ((Result.Failure) maxElem).exception;
                            }
                        } catch (Throwable th4) {
                            cause$iv = th4;
                        }
                    } else if (i == 4) {
                        maxValue = (Comparable) channelsKt__Channels_commonKt$maxBy$1.L$7;
                        maxElem2 = channelsKt__Channels_commonKt$maxBy$1.L$6;
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$maxBy$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$maxBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$2;
                        selector2 = (Function1) channelsKt__Channels_commonKt$maxBy$1.L$1;
                        ReceiveChannel $receiver8 = (ReceiveChannel) channelsKt__Channels_commonKt$maxBy$1.L$0;
                        if (!(maxElem instanceof Result.Failure)) {
                            iterator = iterator4;
                            ChannelIterator iterator5 = null;
                            Comparable v = (Comparable) selector2.invoke(maxElem);
                            if (maxValue.compareTo(v) >= 0) {
                                maxValue = v;
                            } else {
                                maxElem = maxElem2;
                            }
                            $receiver4 = $receiver8;
                            $receiver3 = $receiver2;
                            maxValue2 = maxValue;
                            selector3 = iterator5;
                            channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver4;
                            channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                            channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv2;
                            channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver3;
                            channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                            channelsKt__Channels_commonKt$maxBy$1.L$6 = maxElem;
                            channelsKt__Channels_commonKt$maxBy$1.L$7 = maxValue2;
                            channelsKt__Channels_commonKt$maxBy$1.label = 3;
                            obj = iterator.hasNext(channelsKt__Channels_commonKt$maxBy$1);
                            if (obj != coroutine_suspended) {
                                return coroutine_suspended;
                            }
                            maxElem2 = maxElem;
                            maxElem3 = selector3;
                            maxValue = maxValue2;
                            $receiver2 = $receiver3;
                            selector = selector2;
                            $receiver = $receiver4;
                            try {
                                if (!((Boolean) obj).booleanValue()) {
                                    channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver;
                                    channelsKt__Channels_commonKt$maxBy$1.L$1 = selector;
                                    channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv;
                                    channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$maxBy$1.L$6 = maxElem2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$7 = maxValue;
                                    channelsKt__Channels_commonKt$maxBy$1.label = 4;
                                    Object next = iterator.next(channelsKt__Channels_commonKt$maxBy$1);
                                    if (next == coroutine_suspended) {
                                        return coroutine_suspended;
                                    }
                                    iterator5 = maxElem3;
                                    maxElem = next;
                                    selector2 = selector;
                                    $receiver8 = $receiver;
                                    Comparable v2 = (Comparable) selector2.invoke(maxElem);
                                    if (maxValue.compareTo(v2) >= 0) {
                                    }
                                    $receiver4 = $receiver8;
                                    $receiver3 = $receiver2;
                                    maxValue2 = maxValue;
                                    selector3 = iterator5;
                                    channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver4;
                                    channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv2;
                                    channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver3;
                                    channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$maxBy$1.L$6 = maxElem;
                                    channelsKt__Channels_commonKt$maxBy$1.L$7 = maxValue2;
                                    channelsKt__Channels_commonKt$maxBy$1.label = 3;
                                    obj = iterator.hasNext(channelsKt__Channels_commonKt$maxBy$1);
                                    if (obj != coroutine_suspended) {
                                    }
                                } else {
                                    $i$a$2$consume = 2;
                                    return maxElem2;
                                }
                            } catch (Throwable th5) {
                                cause$iv = th5;
                            }
                        } else {
                            throw ((Result.Failure) maxElem).exception;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw cause$iv;
                    } finally {
                        InlineMarker.finallyStart($i$a$2$consume);
                        $receiver$iv.cancel(cause$iv);
                        InlineMarker.finallyEnd($i$a$2$consume);
                    }
                } else if (!(maxElem instanceof Result.Failure)) {
                    $receiver$iv = receiveChannel;
                    cause$iv2 = null;
                    try {
                        ChannelIterator iterator6 = $receiver$iv.iterator();
                        $receiver5 = receiveChannel;
                        try {
                            channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver5;
                            selector2 = function1;
                            try {
                                channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                                channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv2;
                                channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver$iv;
                                channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator6;
                                channelsKt__Channels_commonKt$maxBy$1.label = $i$a$2$consume;
                                Object hasNext = iterator6.hasNext(channelsKt__Channels_commonKt$maxBy$1);
                                if (hasNext == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                $receiver6 = $receiver$iv;
                                maxElem = hasNext;
                                iterator = iterator6;
                                selector3 = null;
                            } catch (Throwable th6) {
                                cause$iv = th6;
                                throw cause$iv;
                            }
                        } catch (Throwable th7) {
                            cause$iv = th7;
                            throw cause$iv;
                        }
                    } catch (Throwable th8) {
                        cause$iv = th8;
                    }
                } else {
                    throw ((Result.Failure) maxElem).exception;
                }
                if (((Boolean) maxElem).booleanValue()) {
                    $i$a$2$consume = 3;
                    return null;
                }
                channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver5;
                channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv;
                channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver6;
                channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                channelsKt__Channels_commonKt$maxBy$1.label = 2;
                maxElem = iterator.next(channelsKt__Channels_commonKt$maxBy$1);
                if (maxElem == coroutine_suspended) {
                    return coroutine_suspended;
                }
                $receiver3 = $receiver6;
                $receiver4 = $receiver5;
                maxValue2 = (Comparable) selector2.invoke(maxElem);
                channelsKt__Channels_commonKt$maxBy$1.L$0 = $receiver4;
                channelsKt__Channels_commonKt$maxBy$1.L$1 = selector2;
                channelsKt__Channels_commonKt$maxBy$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$maxBy$1.L$3 = cause$iv2;
                channelsKt__Channels_commonKt$maxBy$1.L$4 = $receiver3;
                channelsKt__Channels_commonKt$maxBy$1.L$5 = iterator;
                channelsKt__Channels_commonKt$maxBy$1.L$6 = maxElem;
                channelsKt__Channels_commonKt$maxBy$1.L$7 = maxValue2;
                channelsKt__Channels_commonKt$maxBy$1.label = 3;
                obj = iterator.hasNext(channelsKt__Channels_commonKt$maxBy$1);
                if (obj != coroutine_suspended) {
                }
            }
        }
        channelsKt__Channels_commonKt$maxBy$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$maxBy$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.maxBy(null, null, this);
            }
        };
        maxElem = channelsKt__Channels_commonKt$maxBy$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$maxBy$1.label;
        int $i$a$2$consume2 = 1;
        if (i == 0) {
        }
        if (((Boolean) maxElem).booleanValue()) {
        }
    }

    private static final Object maxBy$$forInline(ReceiveChannel $receiver, Function1 selector, Continuation continuation) {
        int i;
        Object maxElem = null;
        Throwable th = null;
        try {
            ChannelIterator iterator = $receiver.iterator();
            InlineMarker.mark(0);
            Object hasNext = iterator.hasNext(continuation);
            InlineMarker.mark(1);
            if (!((Boolean) hasNext).booleanValue()) {
                i = 3;
                InlineMarker.finallyStart(3);
            } else {
                InlineMarker.mark(0);
                maxElem = iterator.next(continuation);
                InlineMarker.mark(1);
                Comparable maxValue = (Comparable) selector.invoke(maxElem);
                while (true) {
                    InlineMarker.mark(0);
                    Object hasNext2 = iterator.hasNext(continuation);
                    InlineMarker.mark(1);
                    if (!((Boolean) hasNext2).booleanValue()) {
                        break;
                    }
                    InlineMarker.mark(0);
                    Object e = iterator.next(continuation);
                    InlineMarker.mark(1);
                    Comparable v = (Comparable) selector.invoke(e);
                    if (maxValue.compareTo(v) < 0) {
                        maxElem = e;
                        maxValue = v;
                    }
                }
                i = 2;
                InlineMarker.finallyStart(2);
            }
            $receiver.cancel(th);
            InlineMarker.finallyEnd(i);
            return maxElem;
        } finally {
            try {
                throw e$iv;
            } catch (Throwable e$iv) {
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(2:106|(1:(3:14|15|(8:17|116|74|(1:76)(1:77)|78|114|64|(1:66)(4:67|108|68|(2:70|(1:72)(8:73|116|74|(0)(0)|78|114|64|(0)(0)))(2:81|82)))(2:18|19))(2:20|21))(3:22|23|(4:25|108|68|(0)(0))(2:26|124)))(4:29|110|30|(4:32|114|64|(0)(0))(2:33|34)))(4:37|112|38|(1:40)(2:41|42))|95|118|96)(2:45|(10:47|104|48|49|102|50|51|122|52|(1:54)(1:55))(2:100|101))|120|56|(2:58|59)(2:60|(1:62)(4:63|114|64|(0)(0)))))|7|8|(0)(0)|120|56|(0)(0)|(2:(1:119)|(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x01dc, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x01dd, code lost:
        r7 = r12;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0158 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015c A[Catch: all -> 0x01dc, TRY_ENTER, TRY_LEAVE, TryCatch #9 {all -> 0x01dc, blocks: (B:56:0x0150, B:60:0x015c), top: B:120:0x0150 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x018b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x019c A[Catch: all -> 0x01d5, TRY_LEAVE, TryCatch #3 {all -> 0x01d5, blocks: (B:68:0x0194, B:70:0x019c), top: B:108:0x0194 }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01c3  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x01c5  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x01d0 A[DONT_GENERATE] */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v13, types: [java.lang.Throwable] */
    /* JADX WARN: Type inference failed for: r6v7 */
    /* JADX WARN: Type inference failed for: r7v0 */
    /* JADX WARN: Type inference failed for: r7v19 */
    /* JADX WARN: Type inference failed for: r7v25, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Unknown variable types count: 2 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object maxWith(ReceiveChannel<? extends E> receiveChannel, Comparator<? super E> comparator, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$maxWith$1 channelsKt__Channels_commonKt$maxWith$1;
        Object e;
        int i;
        Comparator comparator2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        int $i$f$consume;
        ChannelIterator iterator;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver2;
        Throwable cause$iv2;
        ReceiveChannel $receiver$iv4;
        Object max;
        Object hasNext;
        ChannelIterator iterator2;
        ReceiveChannel $receiver$iv5;
        Throwable cause$iv3;
        ChannelIterator iterator3;
        if (continuation instanceof ChannelsKt__Channels_commonKt$maxWith$1) {
            channelsKt__Channels_commonKt$maxWith$1 = (ChannelsKt__Channels_commonKt$maxWith$1) continuation;
            if ((channelsKt__Channels_commonKt$maxWith$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$maxWith$1.label -= Integer.MIN_VALUE;
                e = channelsKt__Channels_commonKt$maxWith$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$maxWith$1.label;
                ?? r6 = 2;
                ?? r7 = 1;
                boolean z = false;
                if (i == 0) {
                    if (i == 1) {
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$maxWith$1.L$5;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$maxWith$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$2;
                        Comparator comparator3 = (Comparator) channelsKt__Channels_commonKt$maxWith$1.L$1;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$0;
                        try {
                            if (!(e instanceof Result.Failure)) {
                                iterator = iterator4;
                                $receiver$iv2 = $receiver3;
                                $i$f$consume = 0;
                                z = false;
                                comparator2 = comparator3;
                                $receiver = $receiver4;
                            } else {
                                throw ((Result.Failure) e).exception;
                            }
                        } catch (Throwable th) {
                            e$iv = th;
                            $receiver$iv3 = $receiver$iv;
                        }
                    } else if (i != 2) {
                        try {
                            if (i == 3) {
                                $i$f$consume = 0;
                                max = channelsKt__Channels_commonKt$maxWith$1.L$6;
                                iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$maxWith$1.L$5;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$4;
                                cause$iv3 = (Throwable) channelsKt__Channels_commonKt$maxWith$1.L$3;
                                $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$2;
                                Comparator comparator4 = (Comparator) channelsKt__Channels_commonKt$maxWith$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$0;
                                if (e instanceof Result.Failure) {
                                    throw ((Result.Failure) e).exception;
                                }
                                comparator2 = comparator4;
                                if (((Boolean) e).booleanValue()) {
                                }
                            } else if (i == 4) {
                                max = channelsKt__Channels_commonKt$maxWith$1.L$6;
                                ChannelIterator iterator5 = (ChannelIterator) channelsKt__Channels_commonKt$maxWith$1.L$5;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$4;
                                r6 = (Throwable) channelsKt__Channels_commonKt$maxWith$1.L$3;
                                r7 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$2;
                                Comparator comparator5 = (Comparator) channelsKt__Channels_commonKt$maxWith$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$0;
                                if (!(e instanceof Result.Failure)) {
                                    comparator2 = comparator5;
                                    Object obj = coroutine_suspended;
                                    Throwable cause$iv4 = r6;
                                    $receiver$iv4 = r7;
                                    iterator = iterator5;
                                    int iterator6 = 0;
                                    boolean z2 = false;
                                    try {
                                        try {
                                            if (comparator2.compare(max, e) < 0) {
                                                e = max;
                                            }
                                            channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                                            channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv4;
                                            channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv2;
                                            channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver2;
                                            channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator;
                                            channelsKt__Channels_commonKt$maxWith$1.L$6 = e;
                                            channelsKt__Channels_commonKt$maxWith$1.label = 3;
                                            hasNext = iterator.hasNext(channelsKt__Channels_commonKt$maxWith$1);
                                            if (hasNext != coroutine_suspended) {
                                                return coroutine_suspended;
                                            }
                                            max = e;
                                            e = hasNext;
                                            iterator2 = iterator;
                                            $receiver$iv5 = $receiver$iv4;
                                            cause$iv3 = cause$iv2;
                                            try {
                                                if (((Boolean) e).booleanValue()) {
                                                    return max;
                                                }
                                                channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv5;
                                                channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv3;
                                                channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$6 = max;
                                                channelsKt__Channels_commonKt$maxWith$1.label = 4;
                                                e = iterator2.next(channelsKt__Channels_commonKt$maxWith$1);
                                                if (e == coroutine_suspended) {
                                                    return coroutine_suspended;
                                                }
                                                obj = coroutine_suspended;
                                                cause$iv4 = cause$iv3;
                                                $receiver$iv4 = $receiver$iv5;
                                                iterator = iterator2;
                                                iterator6 = $i$f$consume;
                                                z2 = z;
                                                if (comparator2.compare(max, e) < 0) {
                                                }
                                                cause$iv2 = cause$iv4;
                                                coroutine_suspended = obj;
                                                z = z2;
                                                $i$f$consume = iterator6;
                                                channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv4;
                                                channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver2;
                                                channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator;
                                                channelsKt__Channels_commonKt$maxWith$1.L$6 = e;
                                                channelsKt__Channels_commonKt$maxWith$1.label = 3;
                                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$maxWith$1);
                                                if (hasNext != coroutine_suspended) {
                                                }
                                            } catch (Throwable th2) {
                                                e$iv = th2;
                                                $receiver$iv3 = $receiver$iv5;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv = th3;
                                            $receiver$iv3 = $receiver$iv4;
                                        }
                                        cause$iv2 = cause$iv4;
                                        coroutine_suspended = obj;
                                        z = z2;
                                        $i$f$consume = iterator6;
                                    } catch (Throwable th4) {
                                        e$iv = th4;
                                        $receiver$iv3 = $receiver$iv4;
                                    }
                                } else {
                                    throw ((Result.Failure) e).exception;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th5) {
                            e$iv = th5;
                            $receiver$iv3 = r7;
                        }
                    } else {
                        $i$f$consume = 0;
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$maxWith$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$maxWith$1.L$3;
                        $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$2;
                        Comparator comparator6 = (Comparator) channelsKt__Channels_commonKt$maxWith$1.L$1;
                        ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$maxWith$1.L$0;
                        try {
                            if (!(e instanceof Result.Failure)) {
                                comparator2 = comparator6;
                                $receiver = $receiver5;
                                channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                                channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                                channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv4;
                                channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv2;
                                channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver2;
                                channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator;
                                channelsKt__Channels_commonKt$maxWith$1.L$6 = e;
                                channelsKt__Channels_commonKt$maxWith$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$maxWith$1);
                                if (hasNext != coroutine_suspended) {
                                }
                            } else {
                                throw ((Result.Failure) e).exception;
                            }
                        } catch (Throwable th6) {
                            e$iv = th6;
                            $receiver$iv3 = $receiver$iv4;
                        }
                    }
                    try {
                        throw e$iv;
                    } finally {
                        $receiver$iv3.cancel(e$iv);
                    }
                } else if (!(e instanceof Result.Failure)) {
                    $i$f$consume = 0;
                    cause$iv = null;
                    try {
                        iterator3 = receiveChannel.iterator();
                        $receiver = receiveChannel;
                        try {
                            channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                            comparator2 = comparator;
                        } catch (Throwable th7) {
                            e$iv = th7;
                            $receiver$iv3 = receiveChannel;
                            throw e$iv;
                        }
                    } catch (Throwable th8) {
                        e$iv = th8;
                    }
                    try {
                        channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                        channelsKt__Channels_commonKt$maxWith$1.L$2 = receiveChannel;
                        channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv;
                        channelsKt__Channels_commonKt$maxWith$1.L$4 = receiveChannel;
                        channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator3;
                        channelsKt__Channels_commonKt$maxWith$1.label = 1;
                        Object hasNext2 = iterator3.hasNext(channelsKt__Channels_commonKt$maxWith$1);
                        if (hasNext2 == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv2 = receiveChannel;
                        e = hasNext2;
                        iterator = iterator3;
                        $receiver$iv = receiveChannel;
                    } catch (Throwable th9) {
                        e$iv = th9;
                        $receiver$iv3 = receiveChannel;
                        throw e$iv;
                    }
                } else {
                    throw ((Result.Failure) e).exception;
                }
                if (((Boolean) e).booleanValue()) {
                    return null;
                }
                channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv;
                channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver$iv2;
                channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator;
                channelsKt__Channels_commonKt$maxWith$1.label = 2;
                e = iterator.next(channelsKt__Channels_commonKt$maxWith$1);
                if (e == coroutine_suspended) {
                    return coroutine_suspended;
                }
                $receiver2 = $receiver$iv2;
                cause$iv2 = cause$iv;
                $receiver$iv4 = $receiver$iv;
                channelsKt__Channels_commonKt$maxWith$1.L$0 = $receiver;
                channelsKt__Channels_commonKt$maxWith$1.L$1 = comparator2;
                channelsKt__Channels_commonKt$maxWith$1.L$2 = $receiver$iv4;
                channelsKt__Channels_commonKt$maxWith$1.L$3 = cause$iv2;
                channelsKt__Channels_commonKt$maxWith$1.L$4 = $receiver2;
                channelsKt__Channels_commonKt$maxWith$1.L$5 = iterator;
                channelsKt__Channels_commonKt$maxWith$1.L$6 = e;
                channelsKt__Channels_commonKt$maxWith$1.label = 3;
                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$maxWith$1);
                if (hasNext != coroutine_suspended) {
                }
            }
        }
        channelsKt__Channels_commonKt$maxWith$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$maxWith$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.maxWith(null, null, this);
            }
        };
        e = channelsKt__Channels_commonKt$maxWith$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$maxWith$1.label;
        ?? r62 = 2;
        ?? r72 = 1;
        boolean z3 = false;
        if (i == 0) {
        }
        if (((Boolean) e).booleanValue()) {
        }
    }

    /* JADX INFO: Multiple debug info for r14v20 java.lang.Object: [D('iterator' kotlinx.coroutines.channels.ChannelIterator), D('$receiver' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|111|(4:(1:(1:(1:(3:14|15|(6:17|77|(1:79)(1:80)|81|67|(1:69)(4:70|116|71|(2:73|(1:75)(6:76|77|(0)(0)|81|67|(0)(0)))(2:82|83)))(2:18|19))(2:21|22))(4:23|118|24|(4:26|116|71|(0)(0))(2:27|28)))(4:31|105|32|(5:34|103|66|67|(0)(0))(2:35|36)))(4:39|114|40|(1:42)(2:43|44))|94|101|95)(2:47|(10:49|112|50|51|109|52|53|107|54|(1:56)(1:57))(2:99|100))|58|(2:60|61)(2:62|(1:64)(5:65|103|66|67|(0)(0)))))|7|8|111|(0)(0)|58|(0)(0)|(2:(0)|(1:102))) */
    /* JADX WARN: Code restructure failed: missing block: B:20:0x006b, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0123  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015e  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0169 A[Catch: all -> 0x006b, TRY_ENTER, TRY_LEAVE, TryCatch #5 {all -> 0x006b, blocks: (B:15:0x005d, B:18:0x0066, B:19:0x006a, B:58:0x0156, B:62:0x0169, B:77:0x01db), top: B:111:0x002a }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x01a4 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01a5  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01b6 A[Catch: all -> 0x01ff, TRY_LEAVE, TryCatch #8 {all -> 0x01ff, blocks: (B:71:0x01ae, B:73:0x01b6), top: B:116:0x01ae }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01eb  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01ee  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01f4  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E, R extends Comparable<? super R>> Object minBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, ? extends R> function1, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$minBy$1 channelsKt__Channels_commonKt$minBy$1;
        Object minElem;
        int i;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        Object obj;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver2;
        Function1 selector;
        ChannelIterator iterator;
        Object minElem2;
        Comparable minValue;
        ChannelIterator minElem3;
        Function1 selector2;
        Throwable cause$iv2;
        ReceiveChannel $receiver3;
        ReceiveChannel $receiver4;
        ChannelIterator selector3;
        Comparable minValue2;
        ReceiveChannel $receiver5;
        ReceiveChannel $receiver6;
        if (continuation instanceof ChannelsKt__Channels_commonKt$minBy$1) {
            channelsKt__Channels_commonKt$minBy$1 = (ChannelsKt__Channels_commonKt$minBy$1) continuation;
            if ((channelsKt__Channels_commonKt$minBy$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$minBy$1.label -= Integer.MIN_VALUE;
                minElem = channelsKt__Channels_commonKt$minBy$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$minBy$1.label;
                int $i$a$2$consume = 1;
                if (i == 0) {
                    if (i == $i$a$2$consume) {
                        ChannelIterator iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$minBy$1.L$5;
                        $receiver6 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$minBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$2;
                        Function1 selector4 = (Function1) channelsKt__Channels_commonKt$minBy$1.L$1;
                        ReceiveChannel $receiver7 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$0;
                        try {
                            if (!(minElem instanceof Result.Failure)) {
                                selector2 = selector4;
                                $receiver5 = $receiver7;
                                iterator = iterator2;
                                selector3 = null;
                            } else {
                                throw ((Result.Failure) minElem).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                        }
                    } else if (i == 2) {
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$minBy$1.L$5;
                        $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$minBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$2;
                        Function1 selector5 = (Function1) channelsKt__Channels_commonKt$minBy$1.L$1;
                        $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$0;
                        try {
                            if (!(minElem instanceof Result.Failure)) {
                                selector2 = selector5;
                                selector3 = null;
                                try {
                                    minValue2 = (Comparable) selector2.invoke(minElem);
                                    channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver4;
                                    channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                                    channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv2;
                                    channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver3;
                                    channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$minBy$1.L$6 = minElem;
                                    channelsKt__Channels_commonKt$minBy$1.L$7 = minValue2;
                                    channelsKt__Channels_commonKt$minBy$1.label = 3;
                                    obj = iterator.hasNext(channelsKt__Channels_commonKt$minBy$1);
                                    if (obj != coroutine_suspended) {
                                    }
                                } catch (Throwable th2) {
                                    cause$iv = th2;
                                }
                            } else {
                                throw ((Result.Failure) minElem).exception;
                            }
                        } catch (Throwable th3) {
                            cause$iv = th3;
                        }
                    } else if (i == 3) {
                        minValue = (Comparable) channelsKt__Channels_commonKt$minBy$1.L$7;
                        minElem2 = channelsKt__Channels_commonKt$minBy$1.L$6;
                        ChannelIterator iterator3 = (ChannelIterator) channelsKt__Channels_commonKt$minBy$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$4;
                        Throwable cause$iv3 = (Throwable) channelsKt__Channels_commonKt$minBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$2;
                        selector = (Function1) channelsKt__Channels_commonKt$minBy$1.L$1;
                        $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$0;
                        try {
                            if (!(minElem instanceof Result.Failure)) {
                                obj = minElem;
                                minElem3 = null;
                                cause$iv2 = cause$iv3;
                                iterator = iterator3;
                                if (!((Boolean) obj).booleanValue()) {
                                }
                            } else {
                                throw ((Result.Failure) minElem).exception;
                            }
                        } catch (Throwable th4) {
                            cause$iv = th4;
                        }
                    } else if (i == 4) {
                        minValue = (Comparable) channelsKt__Channels_commonKt$minBy$1.L$7;
                        minElem2 = channelsKt__Channels_commonKt$minBy$1.L$6;
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$minBy$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$minBy$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$2;
                        selector2 = (Function1) channelsKt__Channels_commonKt$minBy$1.L$1;
                        ReceiveChannel $receiver8 = (ReceiveChannel) channelsKt__Channels_commonKt$minBy$1.L$0;
                        if (!(minElem instanceof Result.Failure)) {
                            iterator = iterator4;
                            ChannelIterator iterator5 = null;
                            Comparable v = (Comparable) selector2.invoke(minElem);
                            if (minValue.compareTo(v) <= 0) {
                                minValue = v;
                            } else {
                                minElem = minElem2;
                            }
                            $receiver4 = $receiver8;
                            $receiver3 = $receiver2;
                            minValue2 = minValue;
                            selector3 = iterator5;
                            channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver4;
                            channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                            channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                            channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv2;
                            channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver3;
                            channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                            channelsKt__Channels_commonKt$minBy$1.L$6 = minElem;
                            channelsKt__Channels_commonKt$minBy$1.L$7 = minValue2;
                            channelsKt__Channels_commonKt$minBy$1.label = 3;
                            obj = iterator.hasNext(channelsKt__Channels_commonKt$minBy$1);
                            if (obj != coroutine_suspended) {
                                return coroutine_suspended;
                            }
                            minElem2 = minElem;
                            minElem3 = selector3;
                            minValue = minValue2;
                            $receiver2 = $receiver3;
                            selector = selector2;
                            $receiver = $receiver4;
                            try {
                                if (!((Boolean) obj).booleanValue()) {
                                    channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver;
                                    channelsKt__Channels_commonKt$minBy$1.L$1 = selector;
                                    channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv;
                                    channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver2;
                                    channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$minBy$1.L$6 = minElem2;
                                    channelsKt__Channels_commonKt$minBy$1.L$7 = minValue;
                                    channelsKt__Channels_commonKt$minBy$1.label = 4;
                                    Object next = iterator.next(channelsKt__Channels_commonKt$minBy$1);
                                    if (next == coroutine_suspended) {
                                        return coroutine_suspended;
                                    }
                                    iterator5 = minElem3;
                                    minElem = next;
                                    selector2 = selector;
                                    $receiver8 = $receiver;
                                    Comparable v2 = (Comparable) selector2.invoke(minElem);
                                    if (minValue.compareTo(v2) <= 0) {
                                    }
                                    $receiver4 = $receiver8;
                                    $receiver3 = $receiver2;
                                    minValue2 = minValue;
                                    selector3 = iterator5;
                                    channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver4;
                                    channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                                    channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                                    channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv2;
                                    channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver3;
                                    channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                                    channelsKt__Channels_commonKt$minBy$1.L$6 = minElem;
                                    channelsKt__Channels_commonKt$minBy$1.L$7 = minValue2;
                                    channelsKt__Channels_commonKt$minBy$1.label = 3;
                                    obj = iterator.hasNext(channelsKt__Channels_commonKt$minBy$1);
                                    if (obj != coroutine_suspended) {
                                    }
                                } else {
                                    $i$a$2$consume = 2;
                                    return minElem2;
                                }
                            } catch (Throwable th5) {
                                cause$iv = th5;
                            }
                        } else {
                            throw ((Result.Failure) minElem).exception;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw cause$iv;
                    } finally {
                        InlineMarker.finallyStart($i$a$2$consume);
                        $receiver$iv.cancel(cause$iv);
                        InlineMarker.finallyEnd($i$a$2$consume);
                    }
                } else if (!(minElem instanceof Result.Failure)) {
                    $receiver$iv = receiveChannel;
                    cause$iv2 = null;
                    try {
                        ChannelIterator iterator6 = $receiver$iv.iterator();
                        $receiver5 = receiveChannel;
                        try {
                            channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver5;
                            selector2 = function1;
                            try {
                                channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                                channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv2;
                                channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver$iv;
                                channelsKt__Channels_commonKt$minBy$1.L$5 = iterator6;
                                channelsKt__Channels_commonKt$minBy$1.label = $i$a$2$consume;
                                Object hasNext = iterator6.hasNext(channelsKt__Channels_commonKt$minBy$1);
                                if (hasNext == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                $receiver6 = $receiver$iv;
                                minElem = hasNext;
                                iterator = iterator6;
                                selector3 = null;
                            } catch (Throwable th6) {
                                cause$iv = th6;
                                throw cause$iv;
                            }
                        } catch (Throwable th7) {
                            cause$iv = th7;
                            throw cause$iv;
                        }
                    } catch (Throwable th8) {
                        cause$iv = th8;
                    }
                } else {
                    throw ((Result.Failure) minElem).exception;
                }
                if (((Boolean) minElem).booleanValue()) {
                    $i$a$2$consume = 3;
                    return null;
                }
                channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver5;
                channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv;
                channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver6;
                channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                channelsKt__Channels_commonKt$minBy$1.label = 2;
                minElem = iterator.next(channelsKt__Channels_commonKt$minBy$1);
                if (minElem == coroutine_suspended) {
                    return coroutine_suspended;
                }
                $receiver3 = $receiver6;
                $receiver4 = $receiver5;
                minValue2 = (Comparable) selector2.invoke(minElem);
                channelsKt__Channels_commonKt$minBy$1.L$0 = $receiver4;
                channelsKt__Channels_commonKt$minBy$1.L$1 = selector2;
                channelsKt__Channels_commonKt$minBy$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$minBy$1.L$3 = cause$iv2;
                channelsKt__Channels_commonKt$minBy$1.L$4 = $receiver3;
                channelsKt__Channels_commonKt$minBy$1.L$5 = iterator;
                channelsKt__Channels_commonKt$minBy$1.L$6 = minElem;
                channelsKt__Channels_commonKt$minBy$1.L$7 = minValue2;
                channelsKt__Channels_commonKt$minBy$1.label = 3;
                obj = iterator.hasNext(channelsKt__Channels_commonKt$minBy$1);
                if (obj != coroutine_suspended) {
                }
            }
        }
        channelsKt__Channels_commonKt$minBy$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$minBy$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.minBy(null, null, this);
            }
        };
        minElem = channelsKt__Channels_commonKt$minBy$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$minBy$1.label;
        int $i$a$2$consume2 = 1;
        if (i == 0) {
        }
        if (((Boolean) minElem).booleanValue()) {
        }
    }

    private static final Object minBy$$forInline(ReceiveChannel $receiver, Function1 selector, Continuation continuation) {
        int i;
        Object minElem = null;
        Throwable th = null;
        try {
            ChannelIterator iterator = $receiver.iterator();
            InlineMarker.mark(0);
            Object hasNext = iterator.hasNext(continuation);
            InlineMarker.mark(1);
            if (!((Boolean) hasNext).booleanValue()) {
                i = 3;
                InlineMarker.finallyStart(3);
            } else {
                InlineMarker.mark(0);
                minElem = iterator.next(continuation);
                InlineMarker.mark(1);
                Comparable minValue = (Comparable) selector.invoke(minElem);
                while (true) {
                    InlineMarker.mark(0);
                    Object hasNext2 = iterator.hasNext(continuation);
                    InlineMarker.mark(1);
                    if (!((Boolean) hasNext2).booleanValue()) {
                        break;
                    }
                    InlineMarker.mark(0);
                    Object e = iterator.next(continuation);
                    InlineMarker.mark(1);
                    Comparable v = (Comparable) selector.invoke(e);
                    if (minValue.compareTo(v) > 0) {
                        minElem = e;
                        minValue = v;
                    }
                }
                i = 2;
                InlineMarker.finallyStart(2);
            }
            $receiver.cancel(th);
            InlineMarker.finallyEnd(i);
            return minElem;
        } finally {
            try {
                throw e$iv;
            } catch (Throwable e$iv) {
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(2:106|(1:(3:14|15|(8:17|116|74|(1:76)(1:77)|78|114|64|(1:66)(4:67|108|68|(2:70|(1:72)(8:73|116|74|(0)(0)|78|114|64|(0)(0)))(2:81|82)))(2:18|19))(2:20|21))(3:22|23|(4:25|108|68|(0)(0))(2:26|124)))(4:29|110|30|(4:32|114|64|(0)(0))(2:33|34)))(4:37|112|38|(1:40)(2:41|42))|95|118|96)(2:45|(10:47|104|48|49|102|50|51|122|52|(1:54)(1:55))(2:100|101))|120|56|(2:58|59)(2:60|(1:62)(4:63|114|64|(0)(0)))))|7|8|(0)(0)|120|56|(0)(0)|(2:(1:119)|(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x01dc, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x01dd, code lost:
        r7 = r12;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0158 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015c A[Catch: all -> 0x01dc, TRY_ENTER, TRY_LEAVE, TryCatch #9 {all -> 0x01dc, blocks: (B:56:0x0150, B:60:0x015c), top: B:120:0x0150 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x018b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x019c A[Catch: all -> 0x01d5, TRY_LEAVE, TryCatch #3 {all -> 0x01d5, blocks: (B:68:0x0194, B:70:0x019c), top: B:108:0x0194 }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01c3  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x01c5  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x01d0 A[DONT_GENERATE] */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v13, types: [java.lang.Throwable] */
    /* JADX WARN: Type inference failed for: r6v7 */
    /* JADX WARN: Type inference failed for: r7v0 */
    /* JADX WARN: Type inference failed for: r7v19 */
    /* JADX WARN: Type inference failed for: r7v25, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Unknown variable types count: 2 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object minWith(ReceiveChannel<? extends E> receiveChannel, Comparator<? super E> comparator, Continuation<? super E> continuation) {
        ChannelsKt__Channels_commonKt$minWith$1 channelsKt__Channels_commonKt$minWith$1;
        Object e;
        int i;
        Comparator comparator2;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        int $i$f$consume;
        ChannelIterator iterator;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        ReceiveChannel $receiver2;
        Throwable cause$iv2;
        ReceiveChannel $receiver$iv4;
        Object min;
        Object hasNext;
        ChannelIterator iterator2;
        ReceiveChannel $receiver$iv5;
        Throwable cause$iv3;
        ChannelIterator iterator3;
        if (continuation instanceof ChannelsKt__Channels_commonKt$minWith$1) {
            channelsKt__Channels_commonKt$minWith$1 = (ChannelsKt__Channels_commonKt$minWith$1) continuation;
            if ((channelsKt__Channels_commonKt$minWith$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$minWith$1.label -= Integer.MIN_VALUE;
                e = channelsKt__Channels_commonKt$minWith$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$minWith$1.label;
                ?? r6 = 2;
                ?? r7 = 1;
                boolean z = false;
                if (i == 0) {
                    if (i == 1) {
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$minWith$1.L$5;
                        ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$minWith$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$2;
                        Comparator comparator3 = (Comparator) channelsKt__Channels_commonKt$minWith$1.L$1;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$0;
                        try {
                            if (!(e instanceof Result.Failure)) {
                                iterator = iterator4;
                                $receiver$iv2 = $receiver3;
                                $i$f$consume = 0;
                                z = false;
                                comparator2 = comparator3;
                                $receiver = $receiver4;
                            } else {
                                throw ((Result.Failure) e).exception;
                            }
                        } catch (Throwable th) {
                            e$iv = th;
                            $receiver$iv3 = $receiver$iv;
                        }
                    } else if (i != 2) {
                        try {
                            if (i == 3) {
                                $i$f$consume = 0;
                                min = channelsKt__Channels_commonKt$minWith$1.L$6;
                                iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$minWith$1.L$5;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$4;
                                cause$iv3 = (Throwable) channelsKt__Channels_commonKt$minWith$1.L$3;
                                $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$2;
                                Comparator comparator4 = (Comparator) channelsKt__Channels_commonKt$minWith$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$0;
                                if (e instanceof Result.Failure) {
                                    throw ((Result.Failure) e).exception;
                                }
                                comparator2 = comparator4;
                                if (((Boolean) e).booleanValue()) {
                                }
                            } else if (i == 4) {
                                min = channelsKt__Channels_commonKt$minWith$1.L$6;
                                ChannelIterator iterator5 = (ChannelIterator) channelsKt__Channels_commonKt$minWith$1.L$5;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$4;
                                r6 = (Throwable) channelsKt__Channels_commonKt$minWith$1.L$3;
                                r7 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$2;
                                Comparator comparator5 = (Comparator) channelsKt__Channels_commonKt$minWith$1.L$1;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$0;
                                if (!(e instanceof Result.Failure)) {
                                    comparator2 = comparator5;
                                    Object obj = coroutine_suspended;
                                    Throwable cause$iv4 = r6;
                                    $receiver$iv4 = r7;
                                    iterator = iterator5;
                                    int iterator6 = 0;
                                    boolean z2 = false;
                                    try {
                                        try {
                                            if (comparator2.compare(min, e) > 0) {
                                                e = min;
                                            }
                                            channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                                            channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv4;
                                            channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv2;
                                            channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver2;
                                            channelsKt__Channels_commonKt$minWith$1.L$5 = iterator;
                                            channelsKt__Channels_commonKt$minWith$1.L$6 = e;
                                            channelsKt__Channels_commonKt$minWith$1.label = 3;
                                            hasNext = iterator.hasNext(channelsKt__Channels_commonKt$minWith$1);
                                            if (hasNext != coroutine_suspended) {
                                                return coroutine_suspended;
                                            }
                                            min = e;
                                            e = hasNext;
                                            iterator2 = iterator;
                                            $receiver$iv5 = $receiver$iv4;
                                            cause$iv3 = cause$iv2;
                                            try {
                                                if (((Boolean) e).booleanValue()) {
                                                    return min;
                                                }
                                                channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                                                channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv5;
                                                channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv3;
                                                channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver2;
                                                channelsKt__Channels_commonKt$minWith$1.L$5 = iterator2;
                                                channelsKt__Channels_commonKt$minWith$1.L$6 = min;
                                                channelsKt__Channels_commonKt$minWith$1.label = 4;
                                                e = iterator2.next(channelsKt__Channels_commonKt$minWith$1);
                                                if (e == coroutine_suspended) {
                                                    return coroutine_suspended;
                                                }
                                                obj = coroutine_suspended;
                                                cause$iv4 = cause$iv3;
                                                $receiver$iv4 = $receiver$iv5;
                                                iterator = iterator2;
                                                iterator6 = $i$f$consume;
                                                z2 = z;
                                                if (comparator2.compare(min, e) > 0) {
                                                }
                                                cause$iv2 = cause$iv4;
                                                coroutine_suspended = obj;
                                                z = z2;
                                                $i$f$consume = iterator6;
                                                channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                                                channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv4;
                                                channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv2;
                                                channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver2;
                                                channelsKt__Channels_commonKt$minWith$1.L$5 = iterator;
                                                channelsKt__Channels_commonKt$minWith$1.L$6 = e;
                                                channelsKt__Channels_commonKt$minWith$1.label = 3;
                                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$minWith$1);
                                                if (hasNext != coroutine_suspended) {
                                                }
                                            } catch (Throwable th2) {
                                                e$iv = th2;
                                                $receiver$iv3 = $receiver$iv5;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv = th3;
                                            $receiver$iv3 = $receiver$iv4;
                                        }
                                        cause$iv2 = cause$iv4;
                                        coroutine_suspended = obj;
                                        z = z2;
                                        $i$f$consume = iterator6;
                                    } catch (Throwable th4) {
                                        e$iv = th4;
                                        $receiver$iv3 = $receiver$iv4;
                                    }
                                } else {
                                    throw ((Result.Failure) e).exception;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th5) {
                            e$iv = th5;
                            $receiver$iv3 = r7;
                        }
                    } else {
                        $i$f$consume = 0;
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$minWith$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$4;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$minWith$1.L$3;
                        $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$2;
                        Comparator comparator6 = (Comparator) channelsKt__Channels_commonKt$minWith$1.L$1;
                        ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$minWith$1.L$0;
                        try {
                            if (!(e instanceof Result.Failure)) {
                                comparator2 = comparator6;
                                $receiver = $receiver5;
                                channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                                channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                                channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv4;
                                channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv2;
                                channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver2;
                                channelsKt__Channels_commonKt$minWith$1.L$5 = iterator;
                                channelsKt__Channels_commonKt$minWith$1.L$6 = e;
                                channelsKt__Channels_commonKt$minWith$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$minWith$1);
                                if (hasNext != coroutine_suspended) {
                                }
                            } else {
                                throw ((Result.Failure) e).exception;
                            }
                        } catch (Throwable th6) {
                            e$iv = th6;
                            $receiver$iv3 = $receiver$iv4;
                        }
                    }
                    try {
                        throw e$iv;
                    } finally {
                        $receiver$iv3.cancel(e$iv);
                    }
                } else if (!(e instanceof Result.Failure)) {
                    $i$f$consume = 0;
                    cause$iv = null;
                    try {
                        iterator3 = receiveChannel.iterator();
                        $receiver = receiveChannel;
                        try {
                            channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                            comparator2 = comparator;
                        } catch (Throwable th7) {
                            e$iv = th7;
                            $receiver$iv3 = receiveChannel;
                            throw e$iv;
                        }
                    } catch (Throwable th8) {
                        e$iv = th8;
                    }
                    try {
                        channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                        channelsKt__Channels_commonKt$minWith$1.L$2 = receiveChannel;
                        channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv;
                        channelsKt__Channels_commonKt$minWith$1.L$4 = receiveChannel;
                        channelsKt__Channels_commonKt$minWith$1.L$5 = iterator3;
                        channelsKt__Channels_commonKt$minWith$1.label = 1;
                        Object hasNext2 = iterator3.hasNext(channelsKt__Channels_commonKt$minWith$1);
                        if (hasNext2 == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv2 = receiveChannel;
                        e = hasNext2;
                        iterator = iterator3;
                        $receiver$iv = receiveChannel;
                    } catch (Throwable th9) {
                        e$iv = th9;
                        $receiver$iv3 = receiveChannel;
                        throw e$iv;
                    }
                } else {
                    throw ((Result.Failure) e).exception;
                }
                if (((Boolean) e).booleanValue()) {
                    return null;
                }
                channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv;
                channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv;
                channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver$iv2;
                channelsKt__Channels_commonKt$minWith$1.L$5 = iterator;
                channelsKt__Channels_commonKt$minWith$1.label = 2;
                e = iterator.next(channelsKt__Channels_commonKt$minWith$1);
                if (e == coroutine_suspended) {
                    return coroutine_suspended;
                }
                $receiver2 = $receiver$iv2;
                cause$iv2 = cause$iv;
                $receiver$iv4 = $receiver$iv;
                channelsKt__Channels_commonKt$minWith$1.L$0 = $receiver;
                channelsKt__Channels_commonKt$minWith$1.L$1 = comparator2;
                channelsKt__Channels_commonKt$minWith$1.L$2 = $receiver$iv4;
                channelsKt__Channels_commonKt$minWith$1.L$3 = cause$iv2;
                channelsKt__Channels_commonKt$minWith$1.L$4 = $receiver2;
                channelsKt__Channels_commonKt$minWith$1.L$5 = iterator;
                channelsKt__Channels_commonKt$minWith$1.L$6 = e;
                channelsKt__Channels_commonKt$minWith$1.label = 3;
                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$minWith$1);
                if (hasNext != coroutine_suspended) {
                }
            }
        }
        channelsKt__Channels_commonKt$minWith$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$minWith$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.minWith(null, null, this);
            }
        };
        e = channelsKt__Channels_commonKt$minWith$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$minWith$1.label;
        ?? r62 = 2;
        ?? r72 = 1;
        boolean z3 = false;
        if (i == 0) {
        }
        if (((Boolean) e).booleanValue()) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0027  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0055  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0082  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0083  */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object none(ReceiveChannel<? extends E> receiveChannel, Continuation<? super Boolean> continuation) {
        ChannelsKt__Channels_commonKt$none$1 channelsKt__Channels_commonKt$none$1;
        Object obj;
        int i;
        ReceiveChannel $receiver$iv;
        Throwable cause$iv;
        Throwable cause$iv2;
        if (continuation instanceof ChannelsKt__Channels_commonKt$none$1) {
            channelsKt__Channels_commonKt$none$1 = (ChannelsKt__Channels_commonKt$none$1) continuation;
            if ((channelsKt__Channels_commonKt$none$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$none$1.label -= Integer.MIN_VALUE;
                obj = channelsKt__Channels_commonKt$none$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$none$1.label;
                boolean z = true;
                if (i == 0) {
                    if (i == 1) {
                        ReceiveChannel $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$none$1.L$3;
                        cause$iv2 = (Throwable) channelsKt__Channels_commonKt$none$1.L$2;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$none$1.L$1;
                        ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$none$1.L$0;
                        try {
                            if (obj instanceof Result.Failure) {
                                throw ((Result.Failure) obj).exception;
                            }
                        } catch (Throwable th) {
                            cause$iv = th;
                            try {
                                throw cause$iv;
                            } finally {
                                $receiver$iv.cancel(cause$iv);
                            }
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                } else if (!(obj instanceof Result.Failure)) {
                    cause$iv2 = null;
                    try {
                        ChannelIterator<? extends E> it = receiveChannel.iterator();
                        channelsKt__Channels_commonKt$none$1.L$0 = receiveChannel;
                        channelsKt__Channels_commonKt$none$1.L$1 = receiveChannel;
                        channelsKt__Channels_commonKt$none$1.L$2 = cause$iv2;
                        channelsKt__Channels_commonKt$none$1.L$3 = receiveChannel;
                        channelsKt__Channels_commonKt$none$1.label = 1;
                        Object hasNext = it.hasNext(channelsKt__Channels_commonKt$none$1);
                        if (hasNext == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        $receiver$iv = receiveChannel;
                        obj = hasNext;
                    } catch (Throwable th2) {
                        cause$iv = th2;
                        $receiver$iv = receiveChannel;
                        throw cause$iv;
                    }
                } else {
                    throw ((Result.Failure) obj).exception;
                }
                if (!((Boolean) obj).booleanValue()) {
                    z = false;
                }
                return Boxing.boxBoolean(z);
            }
        }
        channelsKt__Channels_commonKt$none$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$none$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.none(null, this);
            }
        };
        obj = channelsKt__Channels_commonKt$none$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$none$1.label;
        boolean z2 = true;
        if (i == 0) {
        }
        if (!((Boolean) obj).booleanValue()) {
        }
        return Boxing.boxBoolean(z2);
    }

    /* JADX INFO: Multiple debug info for r8v2 java.lang.Object: [D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel), D('$receiver$iv$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ef A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0100 A[Catch: all -> 0x0162, TRY_LEAVE, TryCatch #1 {all -> 0x0162, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x0150), top: B:70:0x00f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0131 A[Catch: all -> 0x0165, TRY_LEAVE, TryCatch #2 {all -> 0x0165, blocks: (B:35:0x00d8, B:46:0x0125, B:48:0x0131), top: B:72:0x00d8 }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0143  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0150 A[Catch: all -> 0x0162, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0162, blocks: (B:39:0x00f8, B:41:0x0100, B:52:0x0150), top: B:70:0x00f8 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object none(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Boolean> continuation) {
        ChannelsKt__Channels_commonKt$none$3 channelsKt__Channels_commonKt$none$3;
        int i;
        ReceiveChannel receiveChannel2;
        ReceiveChannel $receiver$iv$iv;
        Throwable cause$iv$iv;
        Object obj;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver;
        Function1 predicate;
        ReceiveChannel $receiver2;
        ReceiveChannel $receiver$iv;
        Object hasNext;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver$iv3;
        ChannelIterator<E> channelIterator2;
        ReceiveChannel $receiver$iv4;
        Function1 predicate2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$none$3) {
                channelsKt__Channels_commonKt$none$3 = (ChannelsKt__Channels_commonKt$none$3) continuation;
                if ((channelsKt__Channels_commonKt$none$3.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$none$3.label -= Integer.MIN_VALUE;
                    Object obj2 = channelsKt__Channels_commonKt$none$3.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$none$3.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$none$3.L$6;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$5;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$none$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$3;
                            $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$none$3.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    hasNext = obj2;
                                    $receiver$iv3 = null;
                                    obj = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    cause$iv$iv = cause$iv$iv2;
                                    predicate2 = predicate3;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$none$3.L$6;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$5;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$none$3.L$4;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$3;
                            ReceiveChannel $receiver$iv6 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$none$3.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$none$3.L$0;
                            try {
                                if (!(obj2 instanceof Result.Failure)) {
                                    ReceiveChannel $receiver$iv7 = $receiver$iv5;
                                    predicate = predicate4;
                                    Object e$iv = obj2;
                                    $receiver$iv3 = null;
                                    Object obj3 = coroutine_suspended;
                                    $receiver2 = $receiver4;
                                    $receiver = $receiver$iv6;
                                    if (!predicate.invoke(e$iv).booleanValue()) {
                                        Boolean boxBoolean = Boxing.boxBoolean(false);
                                        InlineMarker.finallyStart(2);
                                        $receiver$iv$iv.cancel(cause$iv$iv);
                                        InlineMarker.finallyEnd(2);
                                        return boxBoolean;
                                    }
                                    receiveChannel2 = $receiver$iv3;
                                    $receiver$iv = $receiver$iv7;
                                    obj = obj3;
                                    try {
                                        channelsKt__Channels_commonKt$none$3.L$0 = $receiver2;
                                        channelsKt__Channels_commonKt$none$3.L$1 = predicate;
                                        channelsKt__Channels_commonKt$none$3.L$2 = $receiver;
                                        channelsKt__Channels_commonKt$none$3.L$3 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$none$3.L$4 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$none$3.L$5 = $receiver$iv;
                                        channelsKt__Channels_commonKt$none$3.L$6 = channelIterator;
                                        channelsKt__Channels_commonKt$none$3.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$none$3);
                                        if (hasNext != obj) {
                                            return obj;
                                        }
                                        $receiver$iv2 = $receiver$iv;
                                        $receiver$iv3 = receiveChannel2;
                                        channelIterator2 = channelIterator;
                                        $receiver$iv4 = $receiver;
                                        predicate2 = predicate;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$none$3.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$none$3.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$none$3.L$2 = $receiver$iv4;
                                                channelsKt__Channels_commonKt$none$3.L$3 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$none$3.L$4 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$none$3.L$5 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$none$3.L$6 = channelIterator2;
                                                channelsKt__Channels_commonKt$none$3.label = 2;
                                                e$iv = channelIterator2.next(channelsKt__Channels_commonKt$none$3);
                                                if (e$iv == obj) {
                                                    return obj;
                                                }
                                                $receiver$iv7 = $receiver$iv2;
                                                predicate = predicate2;
                                                $receiver = $receiver$iv4;
                                                channelIterator = channelIterator2;
                                                obj3 = obj;
                                                if (!predicate.invoke(e$iv).booleanValue()) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxBoolean(true);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                } else {
                                    throw ((Result.Failure) obj2).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj2 instanceof Result.Failure)) {
                        $receiver$iv$iv = receiveChannel;
                        cause$iv$iv = null;
                        $receiver$iv = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver$iv.iterator();
                            obj = coroutine_suspended;
                            receiveChannel2 = null;
                            $receiver2 = receiveChannel;
                            $receiver = receiveChannel;
                            predicate = function1;
                            channelsKt__Channels_commonKt$none$3.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$none$3.L$1 = predicate;
                            channelsKt__Channels_commonKt$none$3.L$2 = $receiver;
                            channelsKt__Channels_commonKt$none$3.L$3 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$none$3.L$4 = cause$iv$iv;
                            channelsKt__Channels_commonKt$none$3.L$5 = $receiver$iv;
                            channelsKt__Channels_commonKt$none$3.L$6 = channelIterator;
                            channelsKt__Channels_commonKt$none$3.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$none$3);
                            if (hasNext != obj) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj2).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$none$3 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$none$3
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj4) {
                this.result = obj4;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.none(null, null, this);
            }
        };
        Object obj22 = channelsKt__Channels_commonKt$none$3.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$none$3.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Type inference failed for: r10v0, types: [int, boolean] */
    private static final Object none$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        Object e$iv;
        Throwable cause$iv$iv = null;
        try {
            ChannelIterator it = $receiver.iterator();
            do {
                InlineMarker.mark(0);
                Object hasNext = it.hasNext(continuation);
                InlineMarker.mark(1);
                if (((Boolean) hasNext).booleanValue()) {
                    InlineMarker.mark(0);
                    e$iv = it.next(continuation);
                    InlineMarker.mark(1);
                    try {
                    } catch (Throwable th) {
                        e$iv$iv = th;
                        try {
                            throw e$iv$iv;
                        } finally {
                            InlineMarker.finallyStart(1 == true ? 1 : 0);
                            $receiver.cancel(e$iv$iv);
                            InlineMarker.finallyEnd(1);
                        }
                    }
                } else {
                    Unit unit = Unit.INSTANCE;
                    InlineMarker.finallyStart(1);
                    $receiver.cancel(cause$iv$iv);
                    InlineMarker.finallyEnd(1);
                    return Boolean.valueOf(true);
                }
            } while (!((Boolean) predicate.invoke(e$iv)).booleanValue());
            return false;
        } catch (Throwable th2) {
            e$iv$iv = th2;
        }
    }

    /* JADX INFO: Multiple debug info for r13v9 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v9 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Removed duplicated region for block: B:102:0x002c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x011c  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0158 A[Catch: all -> 0x0074, TryCatch #2 {all -> 0x0074, blocks: (B:15:0x005b, B:18:0x006f, B:19:0x0073, B:55:0x0150, B:57:0x0158, B:60:0x016f, B:64:0x018f, B:66:0x0197, B:76:0x01d9, B:77:0x01e2), top: B:95:0x002a }] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0186 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0187  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0197 A[Catch: all -> 0x0074, TRY_LEAVE, TryCatch #2 {all -> 0x0074, blocks: (B:15:0x005b, B:18:0x006f, B:19:0x0073, B:55:0x0150, B:57:0x0158, B:60:0x016f, B:64:0x018f, B:66:0x0197, B:76:0x01d9, B:77:0x01e2), top: B:95:0x002a }] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01ce  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01d9 A[Catch: all -> 0x0074, TRY_ENTER, TryCatch #2 {all -> 0x0074, blocks: (B:15:0x005b, B:18:0x006f, B:19:0x0073, B:55:0x0150, B:57:0x0158, B:60:0x016f, B:64:0x018f, B:66:0x0197, B:76:0x01d9, B:77:0x01e2), top: B:95:0x002a }] */
    /* JADX WARN: Type inference failed for: r7v0 */
    /* JADX WARN: Type inference failed for: r7v12, types: [kotlin.jvm.functions.Function2] */
    /* JADX WARN: Type inference failed for: r7v2 */
    /* JADX WARN: Type inference failed for: r8v0 */
    /* JADX WARN: Type inference failed for: r8v1 */
    /* JADX WARN: Type inference failed for: r8v7, types: [kotlinx.coroutines.channels.ReceiveChannel] */
    /* JADX WARN: Unknown variable types count: 2 */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <S, E extends S> Object reduce(ReceiveChannel<? extends E> receiveChannel, Function2<? super S, ? super E, ? extends S> function2, Continuation<? super S> continuation) {
        ChannelsKt__Channels_commonKt$reduce$1 channelsKt__Channels_commonKt$reduce$1;
        Object accumulator;
        int i;
        Throwable e$iv;
        Function2 operation;
        Throwable cause$iv;
        ReceiveChannel $receiver;
        ReceiveChannel $receiver2;
        ChannelIterator iterator;
        Object accumulator2;
        ChannelIterator iterator2;
        ReceiveChannel $receiver$iv;
        int $i$a$2$consume;
        int $i$a$2$consume2;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$reduce$1) {
                channelsKt__Channels_commonKt$reduce$1 = (ChannelsKt__Channels_commonKt$reduce$1) continuation;
                if ((channelsKt__Channels_commonKt$reduce$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$reduce$1.label -= Integer.MIN_VALUE;
                    accumulator = channelsKt__Channels_commonKt$reduce$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$reduce$1.label;
                    ChannelIterator iterator3 = null;
                    ?? r7 = 2;
                    ?? r8 = 1;
                    ReceiveChannel $receiver$iv2 = null;
                    if (i == 0) {
                        try {
                            if (i == 1) {
                                $i$a$2$consume = 0;
                                iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$reduce$1.L$5;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$4;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$reduce$1.L$3;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$2;
                                Function2 operation2 = (Function2) channelsKt__Channels_commonKt$reduce$1.L$1;
                                ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$0;
                                if (accumulator instanceof Result.Failure) {
                                    throw ((Result.Failure) accumulator).exception;
                                }
                                operation = operation2;
                                $receiver2 = $receiver3;
                            } else if (i == 2) {
                                $i$a$2$consume = 0;
                                iterator2 = (ChannelIterator) channelsKt__Channels_commonKt$reduce$1.L$5;
                                $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$4;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$reduce$1.L$3;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$2;
                                r7 = (Function2) channelsKt__Channels_commonKt$reduce$1.L$1;
                                r8 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$0;
                                if (!(accumulator instanceof Result.Failure)) {
                                    operation = r7;
                                    $receiver2 = r8;
                                    channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                                    channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                                    channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                                    channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                                    channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver$iv;
                                    channelsKt__Channels_commonKt$reduce$1.L$5 = iterator2;
                                    channelsKt__Channels_commonKt$reduce$1.L$6 = accumulator;
                                    channelsKt__Channels_commonKt$reduce$1.label = 3;
                                    hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$reduce$1);
                                    if (hasNext != coroutine_suspended) {
                                    }
                                } else {
                                    throw ((Result.Failure) accumulator).exception;
                                }
                            } else if (i == 3) {
                                Object accumulator3 = channelsKt__Channels_commonKt$reduce$1.L$6;
                                ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$reduce$1.L$5;
                                ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$4;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$reduce$1.L$3;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$2;
                                Function2 operation3 = (Function2) channelsKt__Channels_commonKt$reduce$1.L$1;
                                ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$0;
                                try {
                                    if (!(accumulator instanceof Result.Failure)) {
                                        $i$a$2$consume2 = 0;
                                        operation = operation3;
                                        $receiver2 = $receiver5;
                                        $receiver = $receiver4;
                                        iterator = iterator4;
                                        accumulator2 = accumulator3;
                                        if (!((Boolean) accumulator).booleanValue()) {
                                        }
                                    } else {
                                        throw ((Result.Failure) accumulator).exception;
                                    }
                                } catch (Throwable th) {
                                    e$iv = th;
                                    throw e$iv;
                                }
                            } else if (i == 4) {
                                operation = (Function2) channelsKt__Channels_commonKt$reduce$1.L$8;
                                accumulator2 = channelsKt__Channels_commonKt$reduce$1.L$7;
                                Object accumulator4 = channelsKt__Channels_commonKt$reduce$1.L$6;
                                iterator = (ChannelIterator) channelsKt__Channels_commonKt$reduce$1.L$5;
                                $receiver = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$4;
                                cause$iv = (Throwable) channelsKt__Channels_commonKt$reduce$1.L$3;
                                $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$2;
                                Function2 operation4 = (Function2) channelsKt__Channels_commonKt$reduce$1.L$1;
                                $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduce$1.L$0;
                                if (!(accumulator instanceof Result.Failure)) {
                                    int $i$a$2$consume3 = 0;
                                    Object obj = coroutine_suspended;
                                    ChannelsKt__Channels_commonKt$reduce$1 channelsKt__Channels_commonKt$reduce$12 = channelsKt__Channels_commonKt$reduce$1;
                                    Object accumulator5 = accumulator;
                                    ChannelIterator $i$f$reduce = null;
                                    Function2 operation5 = operation4;
                                    try {
                                        accumulator = operation.invoke(accumulator2, accumulator5);
                                        channelsKt__Channels_commonKt$reduce$1 = channelsKt__Channels_commonKt$reduce$12;
                                        iterator2 = iterator;
                                        operation = operation5;
                                        $receiver$iv = $receiver;
                                        coroutine_suspended = obj;
                                        iterator3 = $i$f$reduce;
                                        $i$a$2$consume = $i$a$2$consume3;
                                        channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                                        channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                                        channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                                        channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                                        channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver$iv;
                                        channelsKt__Channels_commonKt$reduce$1.L$5 = iterator2;
                                        channelsKt__Channels_commonKt$reduce$1.L$6 = accumulator;
                                        channelsKt__Channels_commonKt$reduce$1.label = 3;
                                        hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$reduce$1);
                                        if (hasNext != coroutine_suspended) {
                                            return coroutine_suspended;
                                        }
                                        $i$a$2$consume2 = $i$a$2$consume;
                                        iterator = iterator2;
                                        accumulator2 = accumulator;
                                        accumulator = hasNext;
                                        $receiver = $receiver$iv;
                                        if (!((Boolean) accumulator).booleanValue()) {
                                            channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                                            channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                                            channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                                            channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver;
                                            channelsKt__Channels_commonKt$reduce$1.L$5 = iterator;
                                            channelsKt__Channels_commonKt$reduce$1.L$6 = accumulator2;
                                            channelsKt__Channels_commonKt$reduce$1.L$7 = accumulator2;
                                            channelsKt__Channels_commonKt$reduce$1.L$8 = operation;
                                            channelsKt__Channels_commonKt$reduce$1.label = 4;
                                            accumulator5 = iterator.next(channelsKt__Channels_commonKt$reduce$1);
                                            if (accumulator5 == coroutine_suspended) {
                                                return coroutine_suspended;
                                            }
                                            $i$f$reduce = iterator3;
                                            $i$a$2$consume3 = $i$a$2$consume2;
                                            operation5 = operation;
                                            obj = coroutine_suspended;
                                            channelsKt__Channels_commonKt$reduce$12 = channelsKt__Channels_commonKt$reduce$1;
                                            accumulator = operation.invoke(accumulator2, accumulator5);
                                            channelsKt__Channels_commonKt$reduce$1 = channelsKt__Channels_commonKt$reduce$12;
                                            iterator2 = iterator;
                                            operation = operation5;
                                            $receiver$iv = $receiver;
                                            coroutine_suspended = obj;
                                            iterator3 = $i$f$reduce;
                                            $i$a$2$consume = $i$a$2$consume3;
                                            channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                                            channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                                            channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                                            channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                                            channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver$iv;
                                            channelsKt__Channels_commonKt$reduce$1.L$5 = iterator2;
                                            channelsKt__Channels_commonKt$reduce$1.L$6 = accumulator;
                                            channelsKt__Channels_commonKt$reduce$1.label = 3;
                                            hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$reduce$1);
                                            if (hasNext != coroutine_suspended) {
                                            }
                                        } else {
                                            InlineMarker.finallyStart(2);
                                            $receiver$iv2.cancel(cause$iv);
                                            InlineMarker.finallyEnd(2);
                                            return accumulator2;
                                        }
                                    } catch (Throwable th2) {
                                        e$iv = th2;
                                        try {
                                            throw e$iv;
                                        } catch (Throwable e$iv2) {
                                            InlineMarker.finallyStart(1);
                                            $receiver$iv2.cancel(e$iv);
                                            InlineMarker.finallyEnd(1);
                                            throw e$iv2;
                                        }
                                    }
                                } else {
                                    throw ((Result.Failure) accumulator).exception;
                                }
                            } else {
                                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                            }
                        } catch (Throwable th3) {
                            e$iv = th3;
                        }
                    } else if (!(accumulator instanceof Result.Failure)) {
                        cause$iv = null;
                        $i$a$2$consume = 0;
                        try {
                            ChannelIterator iterator5 = receiveChannel.iterator();
                            $receiver2 = receiveChannel;
                            try {
                                channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                                operation = function2;
                                try {
                                    channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                                    channelsKt__Channels_commonKt$reduce$1.L$2 = receiveChannel;
                                    channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                                    channelsKt__Channels_commonKt$reduce$1.L$4 = receiveChannel;
                                    channelsKt__Channels_commonKt$reduce$1.L$5 = iterator5;
                                    channelsKt__Channels_commonKt$reduce$1.label = 1;
                                    Object hasNext2 = iterator5.hasNext(channelsKt__Channels_commonKt$reduce$1);
                                    if (hasNext2 == coroutine_suspended) {
                                        return coroutine_suspended;
                                    }
                                    $receiver$iv2 = receiveChannel;
                                    $receiver$iv = receiveChannel;
                                    accumulator = hasNext2;
                                    iterator3 = null;
                                    iterator2 = iterator5;
                                } catch (Throwable th4) {
                                    e$iv = th4;
                                    $receiver$iv2 = receiveChannel;
                                    throw e$iv;
                                }
                            } catch (Throwable th5) {
                                e$iv = th5;
                                $receiver$iv2 = receiveChannel;
                                throw e$iv;
                            }
                        } catch (Throwable th6) {
                            e$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) accumulator).exception;
                    }
                    if (!((Boolean) accumulator).booleanValue()) {
                        channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                        channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                        channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                        channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                        channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver$iv;
                        channelsKt__Channels_commonKt$reduce$1.L$5 = iterator2;
                        channelsKt__Channels_commonKt$reduce$1.label = 2;
                        accumulator = iterator2.next(channelsKt__Channels_commonKt$reduce$1);
                        if (accumulator == coroutine_suspended) {
                            return coroutine_suspended;
                        }
                        channelsKt__Channels_commonKt$reduce$1.L$0 = $receiver2;
                        channelsKt__Channels_commonKt$reduce$1.L$1 = operation;
                        channelsKt__Channels_commonKt$reduce$1.L$2 = $receiver$iv2;
                        channelsKt__Channels_commonKt$reduce$1.L$3 = cause$iv;
                        channelsKt__Channels_commonKt$reduce$1.L$4 = $receiver$iv;
                        channelsKt__Channels_commonKt$reduce$1.L$5 = iterator2;
                        channelsKt__Channels_commonKt$reduce$1.L$6 = accumulator;
                        channelsKt__Channels_commonKt$reduce$1.label = 3;
                        hasNext = iterator2.hasNext(channelsKt__Channels_commonKt$reduce$1);
                        if (hasNext != coroutine_suspended) {
                        }
                    } else {
                        throw new UnsupportedOperationException("Empty channel can't be reduced.");
                    }
                }
            }
            if (i == 0) {
            }
            if (!((Boolean) accumulator).booleanValue()) {
            }
        } catch (Throwable th7) {
            e$iv = th7;
        }
        channelsKt__Channels_commonKt$reduce$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$reduce$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.reduce(null, null, this);
            }
        };
        accumulator = channelsKt__Channels_commonKt$reduce$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$reduce$1.label;
        ChannelIterator iterator32 = null;
        ?? r72 = 2;
        ?? r82 = 1;
        ReceiveChannel $receiver$iv22 = null;
    }

    private static final Object reduce$$forInline(ReceiveChannel $receiver, Function2 operation, Continuation continuation) {
        e$iv = null;
        int i = 1;
        try {
            ChannelIterator iterator = $receiver.iterator();
            InlineMarker.mark(0);
            Object hasNext = iterator.hasNext(continuation);
            InlineMarker.mark(i);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(0);
                Object accumulator = iterator.next(continuation);
                InlineMarker.mark(i);
                while (true) {
                    InlineMarker.mark(0);
                    Object hasNext2 = iterator.hasNext(continuation);
                    InlineMarker.mark(i);
                    if (((Boolean) hasNext2).booleanValue()) {
                        InlineMarker.mark(0);
                        Object next = iterator.next(continuation);
                        InlineMarker.mark(i);
                        accumulator = operation.invoke(accumulator, next);
                    } else {
                        i = 2;
                        return accumulator;
                    }
                }
            } else {
                throw new UnsupportedOperationException("Empty channel can't be reduced.");
            }
        } finally {
            try {
                throw e$iv;
            } finally {
            }
        }
    }

    /* JADX INFO: Multiple debug info for r10v8 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r14v16 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r8v16 java.lang.Object: [D('cause$iv' java.lang.Throwable), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Can't wrap try/catch for region: R(9:2|(2:4|(6:6|8|(4:(1:(1:(1:(4:14|122|15|(7:17|105|75|76|112|65|(1:67)(4:68|107|69|(2:71|(1:73)(7:74|105|75|76|112|65|(0)(0)))(2:79|80)))(2:18|19))(2:22|23))(4:24|118|25|(4:27|107|69|(0)(0))(2:28|29)))(4:32|101|33|(4:35|112|65|(0)(0))(2:36|37)))(4:40|116|41|(1:43)(2:44|45))|94|103|95)(2:48|(10:50|120|51|52|114|53|54|110|55|(1:57)(1:58))(2:99|100))|109|59|(2:61|(1:63)(4:64|112|65|(0)(0)))(2:85|86)))|7|8|(0)(0)|109|59|(0)(0)|(2:(0)|(1:104))) */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0226, code lost:
        r0 = th;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x017a A[Catch: all -> 0x0226, TRY_LEAVE, TryCatch #4 {all -> 0x0226, blocks: (B:59:0x0172, B:61:0x017a, B:85:0x021c, B:86:0x0225), top: B:109:0x0172 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x01b3 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x01c6 A[Catch: all -> 0x0216, TRY_LEAVE, TryCatch #3 {all -> 0x0216, blocks: (B:69:0x01be, B:71:0x01c6), top: B:107:0x01be }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x020b  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x021c A[Catch: all -> 0x0226, TRY_ENTER, TryCatch #4 {all -> 0x0226, blocks: (B:59:0x0172, B:61:0x017a, B:85:0x021c, B:86:0x0225), top: B:109:0x0172 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <S, E extends S> Object reduceIndexed(ReceiveChannel<? extends E> receiveChannel, Function3<? super Integer, ? super S, ? super E, ? extends S> function3, Continuation<? super S> continuation) {
        ChannelsKt__Channels_commonKt$reduceIndexed$1 channelsKt__Channels_commonKt$reduceIndexed$1;
        Object accumulator;
        int i;
        Function3 operation;
        Throwable cause$iv;
        ReceiveChannel $receiver$iv;
        int operation2;
        ReceiveChannel $receiver;
        int $i$a$2$consume;
        ReceiveChannel $receiver2;
        ChannelIterator iterator;
        int index;
        Object hasNext;
        int $i$a$2$consume2;
        Object accumulator2;
        ReceiveChannel $receiver3;
        Object obj;
        int $i$f$reduceIndexed;
        ChannelIterator iterator2;
        int iterator3;
        if (continuation instanceof ChannelsKt__Channels_commonKt$reduceIndexed$1) {
            channelsKt__Channels_commonKt$reduceIndexed$1 = (ChannelsKt__Channels_commonKt$reduceIndexed$1) continuation;
            if ((channelsKt__Channels_commonKt$reduceIndexed$1.label & Integer.MIN_VALUE) != 0) {
                channelsKt__Channels_commonKt$reduceIndexed$1.label -= Integer.MIN_VALUE;
                accumulator = channelsKt__Channels_commonKt$reduceIndexed$1.result;
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                i = channelsKt__Channels_commonKt$reduceIndexed$1.label;
                if (i == 0) {
                    if (i == 1) {
                        ChannelIterator iterator4 = (ChannelIterator) channelsKt__Channels_commonKt$reduceIndexed$1.L$5;
                        ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$reduceIndexed$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$2;
                        Function3 operation3 = (Function3) channelsKt__Channels_commonKt$reduceIndexed$1.L$1;
                        ReceiveChannel $receiver5 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$0;
                        try {
                            if (!(accumulator instanceof Result.Failure)) {
                                operation = operation3;
                                $i$a$2$consume = 0;
                                $receiver2 = $receiver4;
                                iterator = iterator4;
                                iterator3 = 0;
                                $receiver = $receiver5;
                            } else {
                                throw ((Result.Failure) accumulator).exception;
                            }
                        } catch (Throwable th) {
                            e$iv = th;
                        }
                    } else if (i == 2) {
                        $i$a$2$consume = 0;
                        index = channelsKt__Channels_commonKt$reduceIndexed$1.I$0;
                        iterator = (ChannelIterator) channelsKt__Channels_commonKt$reduceIndexed$1.L$5;
                        $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$reduceIndexed$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$2;
                        Function3 operation4 = (Function3) channelsKt__Channels_commonKt$reduceIndexed$1.L$1;
                        ReceiveChannel $receiver6 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$0;
                        try {
                            if (!(accumulator instanceof Result.Failure)) {
                                operation = operation4;
                                operation2 = 0;
                                $receiver = $receiver6;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver2;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator;
                                channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = index;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$6 = accumulator;
                                channelsKt__Channels_commonKt$reduceIndexed$1.label = 3;
                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$reduceIndexed$1);
                                if (hasNext != coroutine_suspended) {
                                }
                            } else {
                                throw ((Result.Failure) accumulator).exception;
                            }
                        } catch (Throwable th2) {
                            e$iv = th2;
                        }
                    } else if (i == 3) {
                        Object accumulator3 = channelsKt__Channels_commonKt$reduceIndexed$1.L$6;
                        int index2 = channelsKt__Channels_commonKt$reduceIndexed$1.I$0;
                        ChannelIterator iterator5 = (ChannelIterator) channelsKt__Channels_commonKt$reduceIndexed$1.L$5;
                        ReceiveChannel $receiver7 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$reduceIndexed$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$2;
                        Function3 operation5 = (Function3) channelsKt__Channels_commonKt$reduceIndexed$1.L$1;
                        ReceiveChannel $receiver8 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$0;
                        try {
                            if (!(accumulator instanceof Result.Failure)) {
                                $i$a$2$consume2 = 0;
                                operation = operation5;
                                iterator2 = iterator5;
                                obj = coroutine_suspended;
                                $i$f$reduceIndexed = 0;
                                $receiver = $receiver8;
                                $receiver3 = $receiver7;
                                accumulator2 = accumulator3;
                                index = index2;
                                if (!((Boolean) accumulator).booleanValue()) {
                                }
                            } else {
                                throw ((Result.Failure) accumulator).exception;
                            }
                        } catch (Throwable th3) {
                            e$iv = th3;
                        }
                    } else if (i == 4) {
                        $i$a$2$consume2 = 0;
                        operation = (Function3) channelsKt__Channels_commonKt$reduceIndexed$1.L$9;
                        Integer boxInt = (Integer) channelsKt__Channels_commonKt$reduceIndexed$1.L$8;
                        accumulator2 = channelsKt__Channels_commonKt$reduceIndexed$1.L$7;
                        Object accumulator4 = channelsKt__Channels_commonKt$reduceIndexed$1.L$6;
                        int index3 = channelsKt__Channels_commonKt$reduceIndexed$1.I$0;
                        ChannelIterator iterator6 = (ChannelIterator) channelsKt__Channels_commonKt$reduceIndexed$1.L$5;
                        $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$4;
                        cause$iv = (Throwable) channelsKt__Channels_commonKt$reduceIndexed$1.L$3;
                        $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$2;
                        Function3 operation6 = (Function3) channelsKt__Channels_commonKt$reduceIndexed$1.L$1;
                        ReceiveChannel $receiver9 = (ReceiveChannel) channelsKt__Channels_commonKt$reduceIndexed$1.L$0;
                        try {
                            if (!(accumulator instanceof Result.Failure)) {
                                int $i$f$reduceIndexed2 = 0;
                                index = index3;
                                $receiver = $receiver9;
                                Object obj2 = coroutine_suspended;
                                Function3 operation7 = operation6;
                                iterator = iterator6;
                                try {
                                    try {
                                        accumulator = operation.invoke(boxInt, accumulator2, accumulator);
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver2;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = index;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.L$6 = accumulator;
                                        channelsKt__Channels_commonKt$reduceIndexed$1.label = 3;
                                        hasNext = iterator.hasNext(channelsKt__Channels_commonKt$reduceIndexed$1);
                                        if (hasNext != coroutine_suspended) {
                                            return coroutine_suspended;
                                        }
                                        $i$a$2$consume2 = $i$a$2$consume;
                                        accumulator2 = accumulator;
                                        accumulator = hasNext;
                                        $receiver3 = $receiver2;
                                        obj = coroutine_suspended;
                                        $i$f$reduceIndexed = operation2;
                                        iterator2 = iterator;
                                        try {
                                            if (!((Boolean) accumulator).booleanValue()) {
                                                boxInt = Boxing.boxInt(index);
                                                int index4 = index + 1;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver3;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator2;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = index4;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$6 = accumulator2;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$7 = accumulator2;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$8 = boxInt;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$9 = operation;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.label = 4;
                                                Object next = iterator2.next(channelsKt__Channels_commonKt$reduceIndexed$1);
                                                if (next == obj) {
                                                    return obj;
                                                }
                                                $i$f$reduceIndexed2 = $i$f$reduceIndexed;
                                                operation7 = operation;
                                                index = index4;
                                                accumulator = next;
                                                obj2 = obj;
                                                iterator = iterator2;
                                                accumulator = operation.invoke(boxInt, accumulator2, accumulator);
                                                operation = operation7;
                                                coroutine_suspended = obj2;
                                                $receiver2 = $receiver3;
                                                $i$a$2$consume = $i$a$2$consume2;
                                                operation2 = $i$f$reduceIndexed2;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver2;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = index;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.L$6 = accumulator;
                                                channelsKt__Channels_commonKt$reduceIndexed$1.label = 3;
                                                hasNext = iterator.hasNext(channelsKt__Channels_commonKt$reduceIndexed$1);
                                                if (hasNext != coroutine_suspended) {
                                                }
                                            } else {
                                                InlineMarker.finallyStart(2);
                                                $receiver$iv.cancel(cause$iv);
                                                InlineMarker.finallyEnd(2);
                                                return accumulator2;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv = th5;
                                    }
                                } catch (Throwable th6) {
                                    e$iv = th6;
                                }
                                operation = operation7;
                                coroutine_suspended = obj2;
                                $receiver2 = $receiver3;
                                $i$a$2$consume = $i$a$2$consume2;
                                operation2 = $i$f$reduceIndexed2;
                            } else {
                                throw ((Result.Failure) accumulator).exception;
                            }
                        } catch (Throwable th7) {
                            e$iv = th7;
                        }
                    } else {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    try {
                        throw e$iv;
                    } catch (Throwable e$iv) {
                        InlineMarker.finallyStart(1);
                        $receiver$iv.cancel(e$iv);
                        InlineMarker.finallyEnd(1);
                        throw e$iv;
                    }
                } else if (!(accumulator instanceof Result.Failure)) {
                    iterator3 = 0;
                    cause$iv = null;
                    try {
                        ChannelIterator iterator7 = receiveChannel.iterator();
                        $receiver = receiveChannel;
                        try {
                            channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                            operation = function3;
                            try {
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = receiveChannel;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = receiveChannel;
                                channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator7;
                                channelsKt__Channels_commonKt$reduceIndexed$1.label = 1;
                                Object hasNext2 = iterator7.hasNext(channelsKt__Channels_commonKt$reduceIndexed$1);
                                if (hasNext2 == coroutine_suspended) {
                                    return coroutine_suspended;
                                }
                                $receiver$iv = receiveChannel;
                                iterator = iterator7;
                                $i$a$2$consume = 0;
                                $receiver2 = receiveChannel;
                                accumulator = hasNext2;
                            } catch (Throwable th8) {
                                e$iv = th8;
                                $receiver$iv = receiveChannel;
                                throw e$iv;
                            }
                        } catch (Throwable th9) {
                            e$iv = th9;
                            $receiver$iv = receiveChannel;
                            throw e$iv;
                        }
                    } catch (Throwable th10) {
                        e$iv = th10;
                    }
                } else {
                    throw ((Result.Failure) accumulator).exception;
                }
                if (!((Boolean) accumulator).booleanValue()) {
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver2;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator;
                    channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = 1;
                    channelsKt__Channels_commonKt$reduceIndexed$1.label = 2;
                    Object next2 = iterator.next(channelsKt__Channels_commonKt$reduceIndexed$1);
                    if (next2 == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                    index = 1;
                    accumulator = next2;
                    operation2 = iterator3;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$0 = $receiver;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$1 = operation;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$2 = $receiver$iv;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$3 = cause$iv;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$4 = $receiver2;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$5 = iterator;
                    channelsKt__Channels_commonKt$reduceIndexed$1.I$0 = index;
                    channelsKt__Channels_commonKt$reduceIndexed$1.L$6 = accumulator;
                    channelsKt__Channels_commonKt$reduceIndexed$1.label = 3;
                    hasNext = iterator.hasNext(channelsKt__Channels_commonKt$reduceIndexed$1);
                    if (hasNext != coroutine_suspended) {
                    }
                } else {
                    throw new UnsupportedOperationException("Empty channel can't be reduced.");
                }
            }
        }
        channelsKt__Channels_commonKt$reduceIndexed$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$reduceIndexed$1
            int I$0;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.reduceIndexed(null, null, this);
            }
        };
        accumulator = channelsKt__Channels_commonKt$reduceIndexed$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$reduceIndexed$1.label;
        if (i == 0) {
        }
        if (!((Boolean) accumulator).booleanValue()) {
        }
    }

    private static final Object reduceIndexed$$forInline(ReceiveChannel $receiver, Function3 operation, Continuation continuation) {
        e$iv = null;
        int i = 1;
        try {
            ChannelIterator iterator = $receiver.iterator();
            InlineMarker.mark(0);
            Object hasNext = iterator.hasNext(continuation);
            InlineMarker.mark(i);
            if (((Boolean) hasNext).booleanValue()) {
                int index = 1;
                InlineMarker.mark(0);
                Object accumulator = iterator.next(continuation);
                InlineMarker.mark(i);
                while (true) {
                    InlineMarker.mark(0);
                    Object hasNext2 = iterator.hasNext(continuation);
                    InlineMarker.mark(i);
                    if (((Boolean) hasNext2).booleanValue()) {
                        Integer valueOf = Integer.valueOf(index);
                        index++;
                        InlineMarker.mark(0);
                        Object next = iterator.next(continuation);
                        InlineMarker.mark(i);
                        accumulator = operation.invoke(valueOf, accumulator, next);
                    } else {
                        i = 2;
                        return accumulator;
                    }
                }
            } else {
                throw new UnsupportedOperationException("Empty channel can't be reduced.");
            }
        } finally {
            try {
                throw e$iv;
            } finally {
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v10 java.lang.Object: [D('sum' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('sum' kotlin.jvm.internal.Ref$IntRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0100 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0101  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0115 A[Catch: all -> 0x0169, TRY_LEAVE, TryCatch #1 {all -> 0x0169, blocks: (B:39:0x010d, B:41:0x0115, B:48:0x0155), top: B:65:0x010d }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0155 A[Catch: all -> 0x0169, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0169, blocks: (B:39:0x010d, B:41:0x0115, B:48:0x0155), top: B:65:0x010d }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object sumBy(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Integer> function1, Continuation<? super Integer> continuation) {
        ChannelsKt__Channels_commonKt$sumBy$1 channelsKt__Channels_commonKt$sumBy$1;
        int i;
        boolean z;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ChannelIterator<E> channelIterator;
        Ref.IntRef sum;
        ReceiveChannel $receiver;
        Throwable cause$iv$iv;
        Function1 selector;
        ReceiveChannel $receiver2;
        Object it;
        Object hasNext;
        boolean z2;
        Function1 selector2;
        ReceiveChannel $receiver$iv2;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$sumBy$1) {
                channelsKt__Channels_commonKt$sumBy$1 = (ChannelsKt__Channels_commonKt$sumBy$1) continuation;
                if ((channelsKt__Channels_commonKt$sumBy$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$sumBy$1.label -= Integer.MIN_VALUE;
                    Object obj = channelsKt__Channels_commonKt$sumBy$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$sumBy$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$sumBy$1.L$7;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$6;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$sumBy$1.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$3;
                            sum = (Ref.IntRef) channelsKt__Channels_commonKt$sumBy$1.L$2;
                            Function1 selector3 = (Function1) channelsKt__Channels_commonKt$sumBy$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$0;
                            try {
                                if (!(obj instanceof Result.Failure)) {
                                    hasNext = obj;
                                    it = coroutine_suspended;
                                    $receiver2 = $receiver3;
                                    z2 = false;
                                    selector2 = selector3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator2 = channelIterator3;
                                    if (!((Boolean) hasNext).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator = (ChannelIterator) channelsKt__Channels_commonKt$sumBy$1.L$7;
                            ReceiveChannel $receiver$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$6;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$sumBy$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$3;
                            sum = (Ref.IntRef) channelsKt__Channels_commonKt$sumBy$1.L$2;
                            Function1 selector4 = (Function1) channelsKt__Channels_commonKt$sumBy$1.L$1;
                            ReceiveChannel $receiver4 = (ReceiveChannel) channelsKt__Channels_commonKt$sumBy$1.L$0;
                            try {
                                if (!(obj instanceof Result.Failure)) {
                                    z2 = false;
                                    Object e$iv = obj;
                                    it = coroutine_suspended;
                                    $receiver2 = $receiver4;
                                    $receiver = $receiver$iv3;
                                    selector = selector4;
                                    try {
                                        sum.element += selector.invoke(e$iv).intValue();
                                        channelsKt__Channels_commonKt$sumBy$1.L$0 = $receiver2;
                                        channelsKt__Channels_commonKt$sumBy$1.L$1 = selector;
                                        channelsKt__Channels_commonKt$sumBy$1.L$2 = sum;
                                        channelsKt__Channels_commonKt$sumBy$1.L$3 = $receiver$iv;
                                        channelsKt__Channels_commonKt$sumBy$1.L$4 = $receiver$iv$iv;
                                        channelsKt__Channels_commonKt$sumBy$1.L$5 = cause$iv$iv;
                                        channelsKt__Channels_commonKt$sumBy$1.L$6 = $receiver;
                                        channelsKt__Channels_commonKt$sumBy$1.L$7 = channelIterator;
                                        channelsKt__Channels_commonKt$sumBy$1.label = 1;
                                        hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$sumBy$1);
                                        if (hasNext == it) {
                                            return it;
                                        }
                                        z2 = z;
                                        selector2 = selector;
                                        $receiver$iv2 = $receiver;
                                        cause$iv$iv2 = cause$iv$iv;
                                        channelIterator2 = channelIterator;
                                        try {
                                            if (!((Boolean) hasNext).booleanValue()) {
                                                channelsKt__Channels_commonKt$sumBy$1.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$1 = selector2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$2 = sum;
                                                channelsKt__Channels_commonKt$sumBy$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$sumBy$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$sumBy$1.L$5 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$6 = $receiver$iv2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$7 = channelIterator2;
                                                channelsKt__Channels_commonKt$sumBy$1.label = 2;
                                                e$iv = channelIterator2.next(channelsKt__Channels_commonKt$sumBy$1);
                                                if (e$iv == it) {
                                                    return it;
                                                }
                                                $receiver = $receiver$iv2;
                                                selector = selector2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                sum.element += selector.invoke(e$iv).intValue();
                                                it = it;
                                                z = z2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$0 = $receiver2;
                                                channelsKt__Channels_commonKt$sumBy$1.L$1 = selector;
                                                channelsKt__Channels_commonKt$sumBy$1.L$2 = sum;
                                                channelsKt__Channels_commonKt$sumBy$1.L$3 = $receiver$iv;
                                                channelsKt__Channels_commonKt$sumBy$1.L$4 = $receiver$iv$iv;
                                                channelsKt__Channels_commonKt$sumBy$1.L$5 = cause$iv$iv;
                                                channelsKt__Channels_commonKt$sumBy$1.L$6 = $receiver;
                                                channelsKt__Channels_commonKt$sumBy$1.L$7 = channelIterator;
                                                channelsKt__Channels_commonKt$sumBy$1.label = 1;
                                                hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$sumBy$1);
                                                if (hasNext == it) {
                                                }
                                            } else {
                                                Unit unit = Unit.INSTANCE;
                                                InlineMarker.finallyStart(1);
                                                $receiver$iv$iv.cancel(cause$iv$iv2);
                                                InlineMarker.finallyEnd(1);
                                                return Boxing.boxInt(sum.element);
                                            }
                                        } catch (Throwable th2) {
                                            e$iv$iv = th2;
                                        }
                                    } catch (Throwable th3) {
                                        e$iv$iv = th3;
                                    }
                                    it = it;
                                    z = z2;
                                } else {
                                    throw ((Result.Failure) obj).exception;
                                }
                            } catch (Throwable th4) {
                                e$iv$iv = th4;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj instanceof Result.Failure)) {
                        Ref.IntRef sum2 = new Ref.IntRef();
                        sum2.element = 0;
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv = $receiver$iv;
                        cause$iv$iv = null;
                        $receiver = $receiver$iv$iv;
                        try {
                            channelIterator = $receiver.iterator();
                            z = false;
                            it = coroutine_suspended;
                            $receiver2 = receiveChannel;
                            sum = sum2;
                            selector = function1;
                            channelsKt__Channels_commonKt$sumBy$1.L$0 = $receiver2;
                            channelsKt__Channels_commonKt$sumBy$1.L$1 = selector;
                            channelsKt__Channels_commonKt$sumBy$1.L$2 = sum;
                            channelsKt__Channels_commonKt$sumBy$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$sumBy$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$sumBy$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$sumBy$1.L$6 = $receiver;
                            channelsKt__Channels_commonKt$sumBy$1.L$7 = channelIterator;
                            channelsKt__Channels_commonKt$sumBy$1.label = 1;
                            hasNext = channelIterator.hasNext(channelsKt__Channels_commonKt$sumBy$1);
                            if (hasNext == it) {
                            }
                        } catch (Throwable th5) {
                            e$iv$iv = th5;
                        }
                    } else {
                        throw ((Result.Failure) obj).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$sumBy$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$sumBy$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj2) {
                this.result = obj2;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.sumBy(null, null, this);
            }
        };
        Object obj2 = channelsKt__Channels_commonKt$sumBy$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$sumBy$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object sumBy$$forInline(ReceiveChannel $receiver, Function1 selector, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        int sum = 0;
        int i = 0;
        Throwable cause$iv$iv = null;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(1);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(1);
                try {
                    sum += ((Number) selector.invoke(e$iv)).intValue();
                    i = 0;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv);
                InlineMarker.finallyEnd(1);
                return Integer.valueOf(sum);
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } catch (Throwable e$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv2;
            }
        }
    }

    /* JADX INFO: Multiple debug info for r12v10 java.lang.Object: [D('sum' kotlin.jvm.internal.Ref$DoubleRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX INFO: Multiple debug info for r9v6 java.lang.Object: [D('sum' kotlin.jvm.internal.Ref$DoubleRef), D('$receiver$iv' kotlinx.coroutines.channels.ReceiveChannel)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x010b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0121 A[Catch: all -> 0x017f, TRY_LEAVE, TryCatch #6 {all -> 0x017f, blocks: (B:39:0x0119, B:41:0x0121, B:50:0x016b), top: B:78:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x016b A[Catch: all -> 0x017f, TRY_ENTER, TRY_LEAVE, TryCatch #6 {all -> 0x017f, blocks: (B:39:0x0119, B:41:0x0121, B:50:0x016b), top: B:78:0x0119 }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object sumByDouble(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Double> function1, Continuation<? super Double> continuation) {
        ChannelsKt__Channels_commonKt$sumByDouble$1 channelsKt__Channels_commonKt$sumByDouble$1;
        int i;
        boolean z;
        Object obj;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        Ref.DoubleRef sum;
        Function1 selector;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        ReceiveChannel $receiver;
        Object obj2;
        Object obj3;
        Function1 selector2;
        ChannelIterator<E> channelIterator2;
        Ref.DoubleRef sum2;
        boolean z2;
        ReceiveChannel $receiver$iv3;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$sumByDouble$1) {
                channelsKt__Channels_commonKt$sumByDouble$1 = (ChannelsKt__Channels_commonKt$sumByDouble$1) continuation;
                if ((channelsKt__Channels_commonKt$sumByDouble$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$sumByDouble$1.label -= Integer.MIN_VALUE;
                    Object obj4 = channelsKt__Channels_commonKt$sumByDouble$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$sumByDouble$1.label;
                    boolean z3 = false;
                    if (i == 0) {
                        if (i == 1) {
                            z3 = false;
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$sumByDouble$1.L$7;
                            $receiver$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$6;
                            Throwable cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$sumByDouble$1.L$5;
                            ReceiveChannel $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$3;
                            sum = (Ref.DoubleRef) channelsKt__Channels_commonKt$sumByDouble$1.L$2;
                            Function1 selector3 = (Function1) channelsKt__Channels_commonKt$sumByDouble$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$0;
                            try {
                                if (!(obj4 instanceof Result.Failure)) {
                                    obj = obj4;
                                    obj2 = coroutine_suspended;
                                    $receiver = $receiver2;
                                    z = false;
                                    cause$iv$iv = cause$iv$iv2;
                                    selector = selector3;
                                    $receiver$iv$iv = $receiver$iv$iv2;
                                    channelIterator = channelIterator3;
                                    if (!((Boolean) obj).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) obj4).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$sumByDouble$1.L$7;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$6;
                            Throwable cause$iv$iv3 = (Throwable) channelsKt__Channels_commonKt$sumByDouble$1.L$5;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$4;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$3;
                            Ref.DoubleRef sum3 = (Ref.DoubleRef) channelsKt__Channels_commonKt$sumByDouble$1.L$2;
                            Function1 selector4 = (Function1) channelsKt__Channels_commonKt$sumByDouble$1.L$1;
                            ReceiveChannel $receiver3 = (ReceiveChannel) channelsKt__Channels_commonKt$sumByDouble$1.L$0;
                            try {
                                if (!(obj4 instanceof Result.Failure)) {
                                    cause$iv$iv = cause$iv$iv3;
                                    sum2 = sum3;
                                    z = false;
                                    Object e$iv = obj4;
                                    ReceiveChannel $receiver$iv5 = $receiver$iv4;
                                    selector2 = selector4;
                                    obj3 = coroutine_suspended;
                                    $receiver = $receiver3;
                                    try {
                                        try {
                                            sum2.element += selector2.invoke(e$iv).doubleValue();
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$0 = $receiver;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$1 = selector2;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$2 = sum2;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$3 = $receiver$iv;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$4 = $receiver$iv$iv;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$5 = cause$iv$iv;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$6 = $receiver$iv3;
                                            channelsKt__Channels_commonKt$sumByDouble$1.L$7 = channelIterator2;
                                            channelsKt__Channels_commonKt$sumByDouble$1.label = 1;
                                            obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$sumByDouble$1);
                                            if (obj == obj3) {
                                                return obj3;
                                            }
                                            z = z2;
                                            $receiver$iv2 = $receiver$iv3;
                                            obj2 = obj3;
                                            selector = selector2;
                                            sum = sum2;
                                            channelIterator = channelIterator2;
                                            try {
                                                if (!((Boolean) obj).booleanValue()) {
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$1 = selector;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$2 = sum;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$6 = $receiver$iv2;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$7 = channelIterator;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.label = 2;
                                                    e$iv = channelIterator.next(channelsKt__Channels_commonKt$sumByDouble$1);
                                                    if (e$iv == obj2) {
                                                        return obj2;
                                                    }
                                                    obj3 = obj2;
                                                    $receiver$iv5 = $receiver$iv2;
                                                    selector2 = selector;
                                                    channelIterator2 = channelIterator;
                                                    sum2 = sum;
                                                    sum2.element += selector2.invoke(e$iv).doubleValue();
                                                    z3 = z3;
                                                    z2 = z;
                                                    $receiver$iv3 = $receiver$iv5;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$0 = $receiver;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$1 = selector2;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$2 = sum2;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$3 = $receiver$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$4 = $receiver$iv$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$5 = cause$iv$iv;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$6 = $receiver$iv3;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.L$7 = channelIterator2;
                                                    channelsKt__Channels_commonKt$sumByDouble$1.label = 1;
                                                    obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$sumByDouble$1);
                                                    if (obj == obj3) {
                                                    }
                                                } else {
                                                    Unit unit = Unit.INSTANCE;
                                                    InlineMarker.finallyStart(1);
                                                    $receiver$iv$iv.cancel(cause$iv$iv);
                                                    InlineMarker.finallyEnd(1);
                                                    return Boxing.boxDouble(sum.element);
                                                }
                                            } catch (Throwable th2) {
                                                e$iv$iv = th2;
                                            }
                                        } catch (Throwable th3) {
                                            e$iv$iv = th3;
                                        }
                                        z3 = z3;
                                        z2 = z;
                                        $receiver$iv3 = $receiver$iv5;
                                    } catch (Throwable th4) {
                                        e$iv$iv = th4;
                                    }
                                } else {
                                    throw ((Result.Failure) obj4).exception;
                                }
                            } catch (Throwable th5) {
                                e$iv$iv = th5;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(obj4 instanceof Result.Failure)) {
                        Ref.DoubleRef sum4 = new Ref.DoubleRef();
                        sum4.element = 0.0d;
                        $receiver$iv = receiveChannel;
                        z3 = false;
                        $receiver$iv$iv = $receiver$iv;
                        Throwable cause$iv$iv4 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv.iterator();
                            z2 = false;
                            $receiver$iv3 = $receiver$iv$iv;
                            obj3 = coroutine_suspended;
                            cause$iv$iv = cause$iv$iv4;
                            $receiver = receiveChannel;
                            sum2 = sum4;
                            selector2 = function1;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$1 = selector2;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$2 = sum2;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$3 = $receiver$iv;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$4 = $receiver$iv$iv;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$5 = cause$iv$iv;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$6 = $receiver$iv3;
                            channelsKt__Channels_commonKt$sumByDouble$1.L$7 = channelIterator2;
                            channelsKt__Channels_commonKt$sumByDouble$1.label = 1;
                            obj = channelIterator2.hasNext(channelsKt__Channels_commonKt$sumByDouble$1);
                            if (obj == obj3) {
                            }
                        } catch (Throwable th6) {
                            e$iv$iv = th6;
                        }
                    } else {
                        throw ((Result.Failure) obj4).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$sumByDouble$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$sumByDouble$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj5) {
                this.result = obj5;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.sumByDouble(null, null, this);
            }
        };
        Object obj42 = channelsKt__Channels_commonKt$sumByDouble$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$sumByDouble$1.label;
        boolean z32 = false;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object sumByDouble$$forInline(ReceiveChannel $receiver, Function1 selector, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        double sum = 0.0d;
        int i = 0;
        Throwable cause$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    sum += ((Number) selector.invoke(e$iv)).doubleValue();
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv);
                InlineMarker.finallyEnd(1);
                return Double.valueOf(sum);
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } catch (Throwable e$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv2;
            }
        }
    }

    public static final <E> ReceiveChannel<E> requireNoNulls(ReceiveChannel<? extends E> receiveChannel) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        return map$default(receiveChannel, null, new ChannelsKt__Channels_commonKt$requireNoNulls$1(receiveChannel, null), 1, null);
    }

    /* JADX INFO: Multiple debug info for r14v9 java.lang.Object: [D('first' java.util.ArrayList), D('second' java.util.ArrayList)] */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:10:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x011c A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011d  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0135 A[Catch: all -> 0x018f, TRY_LEAVE, TryCatch #7 {all -> 0x018f, blocks: (B:41:0x012d, B:43:0x0135, B:55:0x017c), top: B:86:0x012d }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x016b A[Catch: all -> 0x0178, TryCatch #3 {all -> 0x0178, blocks: (B:48:0x015f, B:50:0x016b, B:51:0x016f), top: B:78:0x015f }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x016f A[Catch: all -> 0x0178, TRY_LEAVE, TryCatch #3 {all -> 0x0178, blocks: (B:48:0x015f, B:50:0x016b, B:51:0x016f), top: B:78:0x015f }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x017c A[Catch: all -> 0x018f, TRY_ENTER, TRY_LEAVE, TryCatch #7 {all -> 0x018f, blocks: (B:41:0x012d, B:43:0x0135, B:55:0x017c), top: B:86:0x012d }] */
    /* Code decompiled incorrectly, please refer to instructions dump */
    public static final <E> Object partition(ReceiveChannel<? extends E> receiveChannel, Function1<? super E, Boolean> function1, Continuation<? super Pair<? extends List<? extends E>, ? extends List<? extends E>>> continuation) {
        ChannelsKt__Channels_commonKt$partition$1 channelsKt__Channels_commonKt$partition$1;
        int i;
        boolean z;
        Object obj;
        ArrayList second;
        ReceiveChannel $receiver$iv;
        ReceiveChannel $receiver$iv$iv;
        ArrayList first;
        ReceiveChannel $receiver$iv$iv2;
        Throwable cause$iv$iv;
        ChannelIterator<E> channelIterator;
        ReceiveChannel $receiver$iv2;
        Function1 predicate;
        ReceiveChannel $receiver$iv$iv3;
        Function1 predicate2;
        ReceiveChannel $receiver;
        Throwable cause$iv$iv2;
        ChannelIterator<E> channelIterator2;
        boolean z2;
        ArrayList second2;
        Object obj2;
        ReceiveChannel $receiver$iv3;
        Object hasNext;
        try {
            if (continuation instanceof ChannelsKt__Channels_commonKt$partition$1) {
                channelsKt__Channels_commonKt$partition$1 = (ChannelsKt__Channels_commonKt$partition$1) continuation;
                if ((channelsKt__Channels_commonKt$partition$1.label & Integer.MIN_VALUE) != 0) {
                    channelsKt__Channels_commonKt$partition$1.label -= Integer.MIN_VALUE;
                    Object it = channelsKt__Channels_commonKt$partition$1.result;
                    Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    i = channelsKt__Channels_commonKt$partition$1.label;
                    if (i == 0) {
                        if (i == 1) {
                            ChannelIterator<E> channelIterator3 = (ChannelIterator) channelsKt__Channels_commonKt$partition$1.L$8;
                            ReceiveChannel $receiver$iv4 = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$7;
                            cause$iv$iv = (Throwable) channelsKt__Channels_commonKt$partition$1.L$6;
                            $receiver$iv$iv2 = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$4;
                            ArrayList arrayList = (ArrayList) channelsKt__Channels_commonKt$partition$1.L$3;
                            first = (ArrayList) channelsKt__Channels_commonKt$partition$1.L$2;
                            Function1 predicate3 = (Function1) channelsKt__Channels_commonKt$partition$1.L$1;
                            $receiver$iv$iv = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    obj = coroutine_suspended;
                                    z = false;
                                    $receiver$iv2 = $receiver$iv4;
                                    predicate = predicate3;
                                    channelIterator = channelIterator3;
                                    second = arrayList;
                                    if (!((Boolean) it).booleanValue()) {
                                    }
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th) {
                                e$iv$iv = th;
                                $receiver$iv$iv3 = $receiver$iv$iv2;
                            }
                        } else if (i == 2) {
                            channelIterator2 = (ChannelIterator) channelsKt__Channels_commonKt$partition$1.L$8;
                            ReceiveChannel $receiver$iv5 = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$7;
                            cause$iv$iv2 = (Throwable) channelsKt__Channels_commonKt$partition$1.L$6;
                            $receiver$iv$iv3 = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$5;
                            $receiver$iv = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$4;
                            ArrayList arrayList2 = (ArrayList) channelsKt__Channels_commonKt$partition$1.L$3;
                            first = (ArrayList) channelsKt__Channels_commonKt$partition$1.L$2;
                            Function1 predicate4 = (Function1) channelsKt__Channels_commonKt$partition$1.L$1;
                            ReceiveChannel $receiver2 = (ReceiveChannel) channelsKt__Channels_commonKt$partition$1.L$0;
                            try {
                                if (!(it instanceof Result.Failure)) {
                                    $receiver = $receiver2;
                                    z = false;
                                    ReceiveChannel $receiver$iv6 = $receiver$iv5;
                                    predicate2 = predicate4;
                                    obj = coroutine_suspended;
                                    ArrayList second3 = arrayList2;
                                    try {
                                        try {
                                            try {
                                                if (!predicate2.invoke(it).booleanValue()) {
                                                    first.add(it);
                                                } else {
                                                    second3.add(it);
                                                }
                                                channelsKt__Channels_commonKt$partition$1.L$0 = $receiver;
                                                channelsKt__Channels_commonKt$partition$1.L$1 = predicate2;
                                                channelsKt__Channels_commonKt$partition$1.L$2 = first;
                                                channelsKt__Channels_commonKt$partition$1.L$3 = second2;
                                                channelsKt__Channels_commonKt$partition$1.L$4 = $receiver$iv;
                                                channelsKt__Channels_commonKt$partition$1.L$5 = $receiver$iv$iv3;
                                                channelsKt__Channels_commonKt$partition$1.L$6 = cause$iv$iv2;
                                                channelsKt__Channels_commonKt$partition$1.L$7 = $receiver$iv3;
                                                channelsKt__Channels_commonKt$partition$1.L$8 = channelIterator2;
                                                channelsKt__Channels_commonKt$partition$1.label = 1;
                                                hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$partition$1);
                                                if (hasNext == obj2) {
                                                    return obj2;
                                                }
                                                $receiver$iv2 = $receiver$iv3;
                                                it = hasNext;
                                                predicate = predicate2;
                                                obj = obj2;
                                                channelIterator = channelIterator2;
                                                cause$iv$iv = cause$iv$iv2;
                                                $receiver$iv$iv2 = $receiver$iv$iv3;
                                                $receiver$iv$iv = $receiver;
                                                z = z2;
                                                second = second2;
                                                try {
                                                    if (!((Boolean) it).booleanValue()) {
                                                        channelsKt__Channels_commonKt$partition$1.L$0 = $receiver$iv$iv;
                                                        channelsKt__Channels_commonKt$partition$1.L$1 = predicate;
                                                        channelsKt__Channels_commonKt$partition$1.L$2 = first;
                                                        channelsKt__Channels_commonKt$partition$1.L$3 = second;
                                                        channelsKt__Channels_commonKt$partition$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$partition$1.L$5 = $receiver$iv$iv2;
                                                        channelsKt__Channels_commonKt$partition$1.L$6 = cause$iv$iv;
                                                        channelsKt__Channels_commonKt$partition$1.L$7 = $receiver$iv2;
                                                        channelsKt__Channels_commonKt$partition$1.L$8 = channelIterator;
                                                        channelsKt__Channels_commonKt$partition$1.label = 2;
                                                        it = channelIterator.next(channelsKt__Channels_commonKt$partition$1);
                                                        if (it == obj) {
                                                            return obj;
                                                        }
                                                        predicate2 = predicate;
                                                        $receiver = $receiver$iv$iv;
                                                        $receiver$iv$iv3 = $receiver$iv$iv2;
                                                        cause$iv$iv2 = cause$iv$iv;
                                                        channelIterator2 = channelIterator;
                                                        $receiver$iv6 = $receiver$iv2;
                                                        second3 = second;
                                                        if (!predicate2.invoke(it).booleanValue()) {
                                                        }
                                                        $receiver$iv3 = $receiver$iv6;
                                                        obj2 = obj;
                                                        z2 = z;
                                                        second2 = second3;
                                                        channelsKt__Channels_commonKt$partition$1.L$0 = $receiver;
                                                        channelsKt__Channels_commonKt$partition$1.L$1 = predicate2;
                                                        channelsKt__Channels_commonKt$partition$1.L$2 = first;
                                                        channelsKt__Channels_commonKt$partition$1.L$3 = second2;
                                                        channelsKt__Channels_commonKt$partition$1.L$4 = $receiver$iv;
                                                        channelsKt__Channels_commonKt$partition$1.L$5 = $receiver$iv$iv3;
                                                        channelsKt__Channels_commonKt$partition$1.L$6 = cause$iv$iv2;
                                                        channelsKt__Channels_commonKt$partition$1.L$7 = $receiver$iv3;
                                                        channelsKt__Channels_commonKt$partition$1.L$8 = channelIterator2;
                                                        channelsKt__Channels_commonKt$partition$1.label = 1;
                                                        hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$partition$1);
                                                        if (hasNext == obj2) {
                                                        }
                                                    } else {
                                                        Unit unit = Unit.INSTANCE;
                                                        InlineMarker.finallyStart(1);
                                                        $receiver$iv$iv2.cancel(cause$iv$iv);
                                                        InlineMarker.finallyEnd(1);
                                                        return new Pair(first, second);
                                                    }
                                                } catch (Throwable th2) {
                                                    e$iv$iv = th2;
                                                    $receiver$iv$iv3 = $receiver$iv$iv2;
                                                }
                                            } catch (Throwable th3) {
                                                e$iv$iv = th3;
                                            }
                                        } catch (Throwable th4) {
                                            e$iv$iv = th4;
                                        }
                                    } catch (Throwable th5) {
                                        e$iv$iv = th5;
                                    }
                                    $receiver$iv3 = $receiver$iv6;
                                    obj2 = obj;
                                    z2 = z;
                                    second2 = second3;
                                } else {
                                    throw ((Result.Failure) it).exception;
                                }
                            } catch (Throwable th6) {
                                e$iv$iv = th6;
                            }
                        } else {
                            throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                    } else if (!(it instanceof Result.Failure)) {
                        ArrayList first2 = new ArrayList();
                        ArrayList arrayList3 = new ArrayList();
                        $receiver$iv = receiveChannel;
                        $receiver$iv$iv3 = $receiver$iv;
                        cause$iv$iv2 = null;
                        try {
                            channelIterator2 = $receiver$iv$iv3.iterator();
                            z2 = false;
                            first = first2;
                            $receiver$iv3 = $receiver$iv$iv3;
                            obj2 = coroutine_suspended;
                            $receiver = receiveChannel;
                            predicate2 = function1;
                            second2 = arrayList3;
                            channelsKt__Channels_commonKt$partition$1.L$0 = $receiver;
                            channelsKt__Channels_commonKt$partition$1.L$1 = predicate2;
                            channelsKt__Channels_commonKt$partition$1.L$2 = first;
                            channelsKt__Channels_commonKt$partition$1.L$3 = second2;
                            channelsKt__Channels_commonKt$partition$1.L$4 = $receiver$iv;
                            channelsKt__Channels_commonKt$partition$1.L$5 = $receiver$iv$iv3;
                            channelsKt__Channels_commonKt$partition$1.L$6 = cause$iv$iv2;
                            channelsKt__Channels_commonKt$partition$1.L$7 = $receiver$iv3;
                            channelsKt__Channels_commonKt$partition$1.L$8 = channelIterator2;
                            channelsKt__Channels_commonKt$partition$1.label = 1;
                            hasNext = channelIterator2.hasNext(channelsKt__Channels_commonKt$partition$1);
                            if (hasNext == obj2) {
                            }
                        } catch (Throwable th7) {
                            e$iv$iv = th7;
                        }
                    } else {
                        throw ((Result.Failure) it).exception;
                    }
                    throw e$iv$iv;
                }
            }
            throw e$iv$iv;
        } catch (Throwable e$iv$iv) {
            InlineMarker.finallyStart(1);
            $receiver$iv$iv3.cancel(e$iv$iv);
            InlineMarker.finallyEnd(1);
            throw e$iv$iv;
        }
        channelsKt__Channels_commonKt$partition$1 = new ContinuationImpl(continuation) { // from class: kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt$partition$1
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            /* synthetic */ Object result;

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj3) {
                this.result = obj3;
                this.label |= Integer.MIN_VALUE;
                return ChannelsKt.partition(null, null, this);
            }
        };
        Object it2 = channelsKt__Channels_commonKt$partition$1.result;
        Object coroutine_suspended2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        i = channelsKt__Channels_commonKt$partition$1.label;
        if (i == 0) {
        }
    }

    /* JADX WARN: Finally extract failed */
    private static final Object partition$$forInline(ReceiveChannel $receiver, Function1 predicate, Continuation continuation) {
        Throwable e$iv$iv;
        ChannelIterator it;
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        int i = 0;
        Throwable cause$iv$iv = null;
        int i2 = 1;
        try {
            it = $receiver.iterator();
        } catch (Throwable th) {
            e$iv$iv = th;
        }
        while (true) {
            InlineMarker.mark(i);
            Object hasNext = it.hasNext(continuation);
            InlineMarker.mark(i2);
            if (((Boolean) hasNext).booleanValue()) {
                InlineMarker.mark(i);
                Object e$iv = it.next(continuation);
                InlineMarker.mark(i2);
                try {
                    if (((Boolean) predicate.invoke(e$iv)).booleanValue()) {
                        first.add(e$iv);
                    } else {
                        second.add(e$iv);
                    }
                    i = 0;
                    i2 = 1;
                } catch (Throwable th2) {
                    e$iv$iv = th2;
                }
            } else {
                Unit unit = Unit.INSTANCE;
                InlineMarker.finallyStart(1);
                $receiver.cancel(cause$iv$iv);
                InlineMarker.finallyEnd(1);
                return new Pair(first, second);
            }
            e$iv$iv = th2;
            try {
                throw e$iv$iv;
            } catch (Throwable e$iv$iv2) {
                InlineMarker.finallyStart(1);
                $receiver.cancel(e$iv$iv);
                InlineMarker.finallyEnd(1);
                throw e$iv$iv2;
            }
        }
    }

    public static final <E, R> ReceiveChannel<Pair<E, R>> zip(ReceiveChannel<? extends E> receiveChannel, ReceiveChannel<? extends R> receiveChannel2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(receiveChannel2, "other");
        return zip$default(receiveChannel, receiveChannel2, null, ChannelsKt__Channels_commonKt$zip$1.INSTANCE, 2, null);
    }

    public static /* synthetic */ ReceiveChannel zip$default(ReceiveChannel receiveChannel, ReceiveChannel receiveChannel2, CoroutineContext coroutineContext, Function2 function2, int i, Object obj) {
        if ((i & 2) != 0) {
            coroutineContext = Dispatchers.getUnconfined();
        }
        return ChannelsKt.zip(receiveChannel, receiveChannel2, coroutineContext, function2);
    }

    public static final <E, R, V> ReceiveChannel<V> zip(ReceiveChannel<? extends E> receiveChannel, ReceiveChannel<? extends R> receiveChannel2, CoroutineContext context, Function2<? super E, ? super R, ? extends V> function2) {
        Intrinsics.checkParameterIsNotNull(receiveChannel, "receiver$0");
        Intrinsics.checkParameterIsNotNull(receiveChannel2, "other");
        Intrinsics.checkParameterIsNotNull(context, "context");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return ProduceKt.produce$default(GlobalScope.INSTANCE, context, 0, ChannelsKt.consumesAll(receiveChannel, receiveChannel2), new ChannelsKt__Channels_commonKt$zip$2(receiveChannel, receiveChannel2, function2, null), 2, null);
    }
}
